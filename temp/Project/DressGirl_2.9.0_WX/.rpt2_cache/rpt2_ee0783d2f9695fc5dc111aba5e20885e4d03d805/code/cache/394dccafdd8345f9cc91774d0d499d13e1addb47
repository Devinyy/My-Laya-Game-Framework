{
  "code": "import { ui } from \"../../ui/layaMaxUI\";\r\nexport var LwgPlatform;\r\n(function (LwgPlatform) {\r\n    class Init {\r\n        constructor(_type) {\r\n            if (Laya.Browser.onWeiXin) {\r\n                LwgPlatform.type = EmType.WeChat;\r\n            }\r\n            else if (Laya.Browser.onQGMiniGame) {\r\n                LwgPlatform.type = EmType.OPPO;\r\n            }\r\n            else if (Laya.Browser.onVVMiniGame) {\r\n                LwgPlatform.type = EmType.VIVO;\r\n            }\r\n            else {\r\n                LwgPlatform.type = EmType.ExploitNoAD;\r\n            }\r\n            if (_type) {\r\n                LwgPlatform.type = _type;\r\n            }\r\n        }\r\n        get name() {\r\n            return 'Platform';\r\n        }\r\n    }\r\n    LwgPlatform.Init = Init;\r\n    let EmType;\r\n    (function (EmType) {\r\n        EmType[EmType[\"Exploit\"] = 0] = \"Exploit\";\r\n        EmType[EmType[\"ExploitNoAD\"] = 1] = \"ExploitNoAD\";\r\n        EmType[EmType[\"WeChat\"] = 2] = \"WeChat\";\r\n        EmType[EmType[\"OPPO\"] = 3] = \"OPPO\";\r\n        EmType[EmType[\"VIVO\"] = 4] = \"VIVO\";\r\n        EmType[EmType[\"Bytedance\"] = 5] = \"Bytedance\";\r\n        EmType[EmType[\"Web\"] = 6] = \"Web\";\r\n        EmType[EmType[\"WebTest\"] = 7] = \"WebTest\";\r\n        EmType[EmType[\"WebTestClear\"] = 8] = \"WebTestClear\";\r\n    })(EmType = LwgPlatform.EmType || (LwgPlatform.EmType = {}));\r\n    ;\r\n    LwgPlatform.type = EmType.ExploitNoAD;\r\n})(LwgPlatform || (LwgPlatform = {}));\r\nexport var LwgWX;\r\n(function (LwgWX) {\r\n    class Init {\r\n        constructor(data) {\r\n            if (Laya.Browser.onWeiXin) {\r\n                LwgWX.systemInfoSync = Laya.Browser.window.wx.getSystemInfoSync();\r\n            }\r\n            LwgWX.Login = new _Login;\r\n            LwgWX.AD = new _AD(data.AD);\r\n            LwgWX.Share = new _Share(data.Share.tattle, data.Share.imgUrl);\r\n        }\r\n        get name() {\r\n            return 'LwgWX';\r\n        }\r\n    }\r\n    LwgWX.Init = Init;\r\n    LwgWX.systemInfoSync = {\r\n        model: null,\r\n        windowWidth: 720,\r\n        windowHeight: 1280,\r\n    };\r\n    let EmADVideoModel;\r\n    (function (EmADVideoModel) {\r\n        EmADVideoModel[EmADVideoModel[\"AD\"] = 0] = \"AD\";\r\n        EmADVideoModel[EmADVideoModel[\"share\"] = 1] = \"share\";\r\n        EmADVideoModel[EmADVideoModel[\"test\"] = 2] = \"test\";\r\n    })(EmADVideoModel = LwgWX.EmADVideoModel || (LwgWX.EmADVideoModel = {}));\r\n    class _Login {\r\n        constructor() {\r\n            if (!Laya.Browser.onWeiXin) {\r\n                return;\r\n            }\r\n            this.onShow();\r\n            this.onHide();\r\n        }\r\n        onShow() {\r\n            Laya.Browser.window.wx.onShow(() => {\r\n                LwgSound.playMusic();\r\n                console.log(\"----- 切入前台\");\r\n                let curTime = Date.now();\r\n                let offTime = LwgWX.Login.offlineTime;\r\n                if ((curTime - offTime) >= 1500 && LwgWX.AD.video.model == LwgWX.EmADVideoModel.share) {\r\n                    LwgWX.AD.video.watchCompeletCb && LwgWX.AD.video.watchCompeletCb();\r\n                    LwgDialogue.showTips('分享成功!');\r\n                }\r\n            });\r\n        }\r\n        onHide() {\r\n            Laya.Browser.window.wx.onHide(() => {\r\n                LwgSound.stopMusic();\r\n                let nowTime = new Date().getTime();\r\n                this.offlineTime = nowTime;\r\n                console.log(\"----- 切入后台， 离线时间\", nowTime);\r\n            });\r\n        }\r\n    }\r\n    class _AD {\r\n        constructor(data) {\r\n            if (!Laya.Browser.onWeiXin) {\r\n                return;\r\n            }\r\n            this.lodeVideo(data.video);\r\n            this.lodeBanner(data.bannar);\r\n            this.loadInterst(data.interst);\r\n            this.lodeCustom(data.customArr);\r\n        }\r\n        setShowInScenes(sceneName) {\r\n            if (!Laya.Browser.onWeiXin) {\r\n                return;\r\n            }\r\n            this.showBannarInSceneCheck(sceneName);\r\n            this.showCustomInSceneCheck(sceneName);\r\n        }\r\n        setHideInScenes(sceneName) {\r\n            if (!Laya.Browser.onWeiXin) {\r\n                return;\r\n            }\r\n            this.hideBannarInSceneCheck(sceneName);\r\n            this.hideCustomInSceneCheck();\r\n        }\r\n        lodeBanner(bannarData, show) {\r\n            this.bannar = bannarData;\r\n            if (!this.bannar.adUnitId) {\r\n                return;\r\n            }\r\n            this.bannar.instance = Laya.Browser.window.wx.createBannerAd({\r\n                adUnitId: bannarData.adUnitId,\r\n                adIntervals: this.bannar.autoUpdateTime ? this.bannar.autoUpdateTime : 30,\r\n                style: {\r\n                    left: bannarData.style.left ? bannarData.style.left : 0,\r\n                    top: bannarData.style.top ? bannarData.style.top : LwgWX.systemInfoSync.windowWidth - 148,\r\n                    width: bannarData.style.width ? bannarData.style.width : 750,\r\n                }\r\n            });\r\n            this.bannar.instance.onLoad(() => {\r\n                show && this.bannar.instance.show();\r\n                console.log(`banner${this.bannar.adUnitId}广告加载成功!`);\r\n            });\r\n            this.bannar.instance.onError((err) => {\r\n                console.log(`banner广告:${this.bannar.adUnitId}加载失败！错误信息:${err}`);\r\n            });\r\n        }\r\n        showBannarInSceneCheck(sceneName) {\r\n            if (!this.bannar.showTrack) {\r\n                this.bannar.showTrack = [];\r\n            }\r\n            let appear = false;\r\n            for (let index = 0; index < this.bannar.showScenes.length; index++) {\r\n                const element = this.bannar.showScenes[index];\r\n                if (element == sceneName) {\r\n                    appear = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (appear) {\r\n                this.showBanner();\r\n                this.bannar.showTrack.push({\r\n                    sceneName: sceneName,\r\n                    show: true,\r\n                });\r\n            }\r\n            else {\r\n                this.hideBanner();\r\n                this.bannar.showTrack.push({\r\n                    sceneName: sceneName,\r\n                    show: false,\r\n                });\r\n            }\r\n        }\r\n        hideBannarInSceneCheck(sceneName) {\r\n            if (!this.bannar.showTrack) {\r\n                this.bannar.showTrack = [];\r\n            }\r\n            this.bannar.showTrack.pop();\r\n            if (this.bannar.showTrack.length > 0) {\r\n                if (this.bannar.showTrack[this.bannar.showTrack.length - 1].show) {\r\n                    this.showBanner();\r\n                }\r\n                else {\r\n                    this.hideBanner();\r\n                }\r\n            }\r\n            else {\r\n                this.hideBanner();\r\n            }\r\n        }\r\n        showBanner() {\r\n            this.bannar && this.bannar.instance && this.bannar.instance.show().then(() => console.log('banner 广告显示'));\r\n        }\r\n        showBannerNew() {\r\n            this.bannar.instance.destroy();\r\n            this.bannar.instance = null;\r\n            this.lodeBanner(this.bannar, true);\r\n        }\r\n        hideBanner() {\r\n            this.bannar && this.bannar.instance && this.bannar.instance.hide().then(() => console.log('banner 广告关闭'));\r\n        }\r\n        lodeCustom(customArrData) {\r\n            this.customArr = customArrData;\r\n            for (let index = 0; index < customArrData.length; index++) {\r\n                const custom = customArrData[index];\r\n                if (!custom.adUnitId) {\r\n                    continue;\r\n                }\r\n                custom.instance = Laya.Browser.window.wx.createCustomAd({\r\n                    adUnitId: custom.adUnitId,\r\n                    style: {\r\n                        left: custom.style.left,\r\n                        top: custom.style.top,\r\n                        width: custom.style.width ? custom.style.width : 100,\r\n                        fixed: custom.style.fixed\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        showCustomInSceneCheck(sceneName) {\r\n            for (let i = 0; i < this.customArr.length; i++) {\r\n                const custom = this.customArr[i];\r\n                if (custom && custom.instance) {\r\n                    let appear = false;\r\n                    for (let j = 0; j < custom.showScenes.length; j++) {\r\n                        const name = custom.showScenes[j];\r\n                        if (name == sceneName) {\r\n                            appear = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!custom.showTrack) {\r\n                        custom.showTrack = [];\r\n                    }\r\n                    if (appear) {\r\n                        custom.instance.show().then(() => console.log('原生广告展示！'));\r\n                    }\r\n                    else {\r\n                        custom.instance.hide().then(() => console.log('原生广告关闭！'));\r\n                    }\r\n                    custom.showTrack.push({\r\n                        sceneName: sceneName,\r\n                        show: appear,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        hideCustomInSceneCheck() {\r\n            for (let index = 0; index < this.customArr.length; index++) {\r\n                const custom = this.customArr[index];\r\n                if (!custom.showTrack) {\r\n                    custom.showTrack = [];\r\n                }\r\n                custom.showTrack.pop();\r\n                if (custom.instance) {\r\n                    if (custom.showTrack.length > 0) {\r\n                        if (custom.showTrack[custom.showTrack.length - 1].show) {\r\n                            custom.instance.show().then(() => console.log('原生广告展示！'));\r\n                        }\r\n                        else {\r\n                            custom.instance.hide().then(() => console.log('原生广告关闭！'));\r\n                        }\r\n                    }\r\n                    else {\r\n                        custom.instance.hide().then(() => console.log('原生广告关闭！'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        lodeVideo(videoData) {\r\n            this.video = videoData;\r\n            var onLodeFunc = () => {\r\n                console.log(`激励视频${this.video.adUnitId}广告加载成功!`);\r\n                this.video.instance.offLoad();\r\n                this.video.instance.offClose();\r\n            };\r\n            var onCloseFunc = (err) => {\r\n                console.log(`激励视频${this.video.adUnitId}广告加载失败！错误信息:${err}`);\r\n                this.video.instance.offLoad();\r\n                this.video.instance.offClose();\r\n            };\r\n            if (!this.video.adUnitId) {\r\n                this.video.model = EmADVideoModel.share;\r\n                return;\r\n            }\r\n            else {\r\n                this.video.model = EmADVideoModel.AD;\r\n            }\r\n            this.video.instance = Laya.Browser.window.wx.createRewardedVideoAd({\r\n                adUnitId: this.video.adUnitId,\r\n            });\r\n            this.video.instance.onLoad(onLodeFunc);\r\n            this.video.instance.onError(onCloseFunc);\r\n        }\r\n        showVideo(watchCompelet, watchClose) {\r\n            if (LwgPlatform.type === LwgPlatform.EmType.ExploitNoAD) {\r\n                watchCompelet && watchCompelet();\r\n                return;\r\n            }\r\n            if (this.video.model === EmADVideoModel.share) {\r\n                this.video.watchCompeletCb = watchCompelet;\r\n                LwgWX.Share.share(watchCompelet);\r\n                return;\r\n            }\r\n            if (this.video.curVideoTime === undefined) {\r\n                this.video.curVideoTime = 0;\r\n            }\r\n            if (LwgDate.Now.time - this.video.curVideoTime < 5000) {\r\n                console.log('5秒内不得再次看视频广告！');\r\n                return;\r\n            }\r\n            this.video.curVideoTime = LwgDate.Now.time;\r\n            if (!Laya.Browser.onMiniGame) {\r\n                LwgDialogue.showTips('展示视频广告失败，不在微信上!');\r\n                return;\r\n            }\r\n            if (this.video && this.video.instance) {\r\n                var onCloseFunc = (res) => {\r\n                    if (res && res.isEnded || res === undefined) {\r\n                        LwgDialogue.showTips('观看完成，获得奖励!');\r\n                        LwgSound.playMusic();\r\n                        watchCompelet && watchCompelet(res);\r\n                    }\r\n                    else {\r\n                        watchClose && watchClose(res);\r\n                        LwgSound.playMusic();\r\n                        LwgDialogue.showTips('观看完整广告才可以领取奖励!');\r\n                    }\r\n                    this.video.instance.offClose(onCloseFunc);\r\n                };\r\n                this.video.instance.show()\r\n                    .catch((err) => {\r\n                    console.log(`广告播放失败：${err},准备重新加载`);\r\n                    this.video.instance.load().then(() => this.video.instance.show()\r\n                        .catch(() => {\r\n                        LwgDialogue.showTips('暂无广告！!');\r\n                    }));\r\n                });\r\n                this.video.instance.onClose(onCloseFunc);\r\n            }\r\n            else {\r\n                console.log('广告不存在！');\r\n            }\r\n        }\r\n        showInterstCloseSceneCheck(sceneName) {\r\n            if (!Laya.Browser.onWeiXin) {\r\n                return;\r\n            }\r\n            for (let index = 0; index < this.interst.showCloseScenesLaterArr.length; index++) {\r\n                const element = this.interst.showCloseScenesLaterArr[index];\r\n                if (element == sceneName) {\r\n                    this.interst && this.interst.instance && this.interst.instance.show().catch((err) => {\r\n                        console.error('插屏广告展示失败！', err);\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        loadInterst(interstData) {\r\n            this.interst = interstData;\r\n            if (!this.interst.adUnitId) {\r\n                return;\r\n            }\r\n            this.interst.instance = Laya.Browser.window.wx.createInterstitialAd({\r\n                adUnitId: this.interst.adUnitId,\r\n            });\r\n            this.interst.instance.onLoad(() => {\r\n                console.log('插屏广告加载成功', this.interst);\r\n            });\r\n            this.interst.instance.onError((err) => {\r\n                console.error(\"插屏广告加载失败:\" + JSON.stringify(err));\r\n            });\r\n            this.interst.instance.onClose((res) => {\r\n                console.log(\"插屏广告加载关闭:\" + JSON.stringify(res));\r\n                this.interst.closeCb && this.interst.closeCb();\r\n            });\r\n        }\r\n    }\r\n    class _Share {\r\n        constructor(tattle, imgUrl) {\r\n            this.shareTattle = '';\r\n            this.shareImgUrl = '';\r\n            this.shareTattle = tattle;\r\n            this.shareImgUrl = imgUrl;\r\n            this.onShareAppMessage();\r\n        }\r\n        share(watchCompelet) {\r\n            if (Laya.Browser.window.wx) {\r\n                Laya.Browser.window.wx.shareAppMessage({\r\n                    title: this.shareTattle,\r\n                    imageUrl: this.shareImgUrl,\r\n                });\r\n            }\r\n            else {\r\n                if (!Laya.Browser.onMiniGame) {\r\n                    watchCompelet && watchCompelet();\r\n                }\r\n            }\r\n        }\r\n        onShareAppMessage() {\r\n            if (!Laya.Browser.onMiniGame) {\r\n                return;\r\n            }\r\n            Laya.Browser.window.wx.showShareMenu({\r\n                withShareTicket: true,\r\n            });\r\n            if (Laya.Browser.window.wx) {\r\n                Laya.Browser.window.wx.onShareAppMessage(() => {\r\n                    return {\r\n                        title: this.shareTattle,\r\n                        imageUrl: this.shareImgUrl,\r\n                    };\r\n                });\r\n            }\r\n        }\r\n    }\r\n    function shakeShort() {\r\n        if (Laya.Browser.onMiniGame) {\r\n            wx.vibrateShort({\r\n                success: () => {\r\n                },\r\n                fail: () => {\r\n                },\r\n                complete: () => {\r\n                }\r\n            });\r\n        }\r\n    }\r\n    LwgWX.shakeShort = shakeShort;\r\n    function shakeLong() {\r\n        if (Laya.Browser.onMiniGame) {\r\n            wx.vibrateLong({\r\n                success: () => {\r\n                },\r\n                fail: () => {\r\n                },\r\n                complete: () => {\r\n                }\r\n            });\r\n        }\r\n    }\r\n    LwgWX.shakeLong = shakeLong;\r\n})(LwgWX || (LwgWX = {}));\r\nexport var LwgControl;\r\n(function (LwgControl) {\r\n    class Init {\r\n        constructor(levelLoop, statShow, multiTouchEnabled) {\r\n            LwgControl.Game = new _Game(levelLoop, statShow, multiTouchEnabled);\r\n            LwgControl.Login = new _Login();\r\n        }\r\n        get name() {\r\n            return 'LwgControl';\r\n        }\r\n    }\r\n    LwgControl.Init = Init;\r\n    class _Login {\r\n        constructor() {\r\n            const curDate = new Date;\r\n            this.info = LwgStorage.arrayArray('Login/info');\r\n            this.info.value.push([curDate.getFullYear(), curDate.getMonth() + 1, curDate.getDate(), curDate.getDay(), curDate.getHours(), curDate.getMinutes(), curDate.getSeconds()]);\r\n            let arr = [];\r\n            if (this.info.value.length > 0) {\r\n                for (let index = 0; index < this.info.value.length; index++) {\r\n                    arr.push(this.info.value[index]);\r\n                }\r\n            }\r\n            arr.push([curDate.getFullYear(), curDate.getMonth() + 1, curDate.getDate(), curDate.getDay(), curDate.getHours(), curDate.getMinutes(), curDate.getSeconds()]);\r\n            this.info.value = arr;\r\n            this.totalNum++;\r\n            this.todayNum++;\r\n        }\r\n        get totalNum() {\r\n            return Laya.LocalStorage.getItem('Login/totalNum') ? Number(Laya.LocalStorage.getItem('Login/totalNum')) : 0;\r\n        }\r\n        ;\r\n        set totalNum(val) {\r\n            Laya.LocalStorage.setItem('Login/totalNum', val.toString());\r\n        }\r\n        get todayNum() {\r\n            return Laya.LocalStorage.getItem('Login/todayNum') ? Number(Laya.LocalStorage.getItem('Login/todayNum')) : 0;\r\n        }\r\n        ;\r\n        set todayNum(val) {\r\n            if (LwgDate.Now.date == this.info.value[this.info.value.length - 1][2]) {\r\n                Laya.LocalStorage.setItem('Login/todayNum', val.toString());\r\n            }\r\n        }\r\n        get dayBefore() {\r\n            const arr = this.info.value;\r\n            const curData = arr[arr.length - 1][1];\r\n            let haveFront = false;\r\n            for (let index = arr.length - 1; index < 0; index--) {\r\n                const frontData = arr[index][1];\r\n                if (frontData !== curData) {\r\n                    haveFront = true;\r\n                    return frontData;\r\n                }\r\n            }\r\n            if (!haveFront) {\r\n                return (new Date).getDate();\r\n            }\r\n        }\r\n        get frontDate() {\r\n            if (this.info.value.length >= 2) {\r\n                return this.info.value[this.info.value.length - 2][2];\r\n            }\r\n            else {\r\n                return this.info.value[this.info.value.length - 1][2];\r\n            }\r\n        }\r\n        ;\r\n        get lastdayComparisonToday() {\r\n            return this.frontDate == LwgDate.Now.date;\r\n        }\r\n    }\r\n    LwgControl._Login = _Login;\r\n    class _Game {\r\n        constructor(levelLoop, statShow, multiTouchEnabled) {\r\n            this.levelLoop = levelLoop;\r\n            if (LwgPlatform.type == LwgPlatform.EmType.Exploit || LwgPlatform.type == LwgPlatform.EmType.ExploitNoAD && statShow) {\r\n                Laya.Stat.show();\r\n            }\r\n            else {\r\n                Laya.Stat.hide();\r\n            }\r\n            Laya.MouseManager.multiTouchEnabled = multiTouchEnabled;\r\n        }\r\n        get pause() {\r\n            return this['_pause'];\r\n        }\r\n        ;\r\n        set pause(bool) {\r\n            if (bool) {\r\n                this['_pause'] = false;\r\n                LwgTimer.onOff = false;\r\n                LwgClick.Filter.setValue(LwgClick.EmfilterType.all);\r\n            }\r\n            else {\r\n                this['_pause'] = true;\r\n                LwgTimer.onOff = true;\r\n                LwgClick.Filter.setValue(LwgClick.EmfilterType.none);\r\n            }\r\n        }\r\n        get level() {\r\n            let val = Laya.LocalStorage.getItem('Game/level');\r\n            if (!val) {\r\n                Laya.LocalStorage.setItem('Game/level', (1).toString());\r\n                return 1;\r\n            }\r\n            else {\r\n                return Number(val);\r\n            }\r\n        }\r\n        ;\r\n        set level(val) {\r\n            const curLevel = Laya.LocalStorage.getItem('Game/level') ? Number(Laya.LocalStorage.getItem('Game/level')) : 1;\r\n            const diff = val - curLevel;\r\n            if (diff > 0) {\r\n                this.levelReal += diff;\r\n            }\r\n            if (val >= this.levelLoop && this.levelLoop != -1) {\r\n                Laya.LocalStorage.setItem('Game/level', (1).toString());\r\n            }\r\n            else {\r\n                Laya.LocalStorage.setItem('Game/level', (val).toString());\r\n                if (val <= this.levelLoop) {\r\n                    this.levelReal = val;\r\n                }\r\n            }\r\n        }\r\n        get levelReal() {\r\n            return Laya.LocalStorage.getItem('Game/levelReal') ? Number(Laya.LocalStorage.getItem('Game/levelReal')) : this.level;\r\n        }\r\n        ;\r\n        set levelReal(val) {\r\n            Laya.LocalStorage.setItem('Game/levelReal', val.toString());\r\n        }\r\n        ;\r\n        get levelLoop() {\r\n            return this['Game/levelLoop'] ? this['Game/levelLoop'] : -1;\r\n        }\r\n        ;\r\n        set levelLoop(val) {\r\n            this['Game/levelLoop'] = val;\r\n        }\r\n    }\r\n    class Player {\r\n        static get NAME() {\r\n            return Laya.LocalStorage.getItem('Player/NAME') ? Laya.LocalStorage.getItem('Player/NAME') : this.fName;\r\n        }\r\n        ;\r\n        static set NAME(val) {\r\n            Laya.LocalStorage.setItem('Player/NAME', val.toString());\r\n        }\r\n        ;\r\n        static get level() {\r\n            return Laya.LocalStorage.getItem('Player/level') ? Laya.LocalStorage.getItem('Player/level') : this.fName;\r\n        }\r\n        ;\r\n        static set level(val) {\r\n            Laya.LocalStorage.setItem('Player/level', val.toString());\r\n        }\r\n        ;\r\n    }\r\n    Player.fName = 'You';\r\n    LwgControl.Player = Player;\r\n})(LwgControl || (LwgControl = {}));\r\nexport var LwgScene;\r\n(function (LwgScene) {\r\n    class Init {\r\n        constructor(set) {\r\n            LwgScene.sceneScript = set.sceneScript;\r\n            if (set.sceneOpenAniType) {\r\n                LwgScene.commSceneOpenAniType = set.sceneOpenAniType;\r\n            }\r\n            if (set.overlaySceneOpenAnitype) {\r\n                LwgScene.commOverlaySceneOpenAniType = set.overlaySceneOpenAnitype;\r\n            }\r\n            if (set.overlaySceneCloseAnitype) {\r\n                LwgScene.commOverlaySceneCloseAniType = set.overlaySceneCloseAnitype;\r\n            }\r\n        }\r\n        get name() {\r\n            return this.name;\r\n        }\r\n    }\r\n    LwgScene.Init = Init;\r\n    LwgScene.sceneControl = {};\r\n    LwgScene.sceneScript = {};\r\n    LwgScene.openSceneRecord = [];\r\n    class NameBase {\r\n    }\r\n    NameBase.Init = 'Init';\r\n    NameBase.PreLoad = 'PreLoad';\r\n    NameBase.PreLoadCutIn = 'PreLoadCutIn';\r\n    NameBase.Guide = 'Guide';\r\n    NameBase.CommonDialog = 'CommonDialog';\r\n    NameBase.GameManager = 'GameManager';\r\n    NameBase.Start = 'Start';\r\n    NameBase.Set = 'Set';\r\n    LwgScene.NameBase = NameBase;\r\n    function returnToPreviousScene() {\r\n        if (LwgScene.openSceneRecord.length >= 2 && LwgScene.openSceneRecord[LwgScene.openSceneRecord.length - 2] !== NameBase.PreLoad) {\r\n            const openName = LwgScene.openSceneRecord[LwgScene.openSceneRecord.length - 2];\r\n            const closeName = LwgScene.openSceneRecord[LwgScene.openSceneRecord.length - 1];\r\n            if (openName === closeName) {\r\n                console.log('返回按钮设置有问题，只能指向start使用！');\r\n                return;\r\n            }\r\n            openScene(openName, closeName);\r\n            LwgScene.openSceneRecord.pop();\r\n            if (openName === NameBase.Start) {\r\n                LwgScene.openSceneRecord = [NameBase.Start];\r\n            }\r\n        }\r\n    }\r\n    LwgScene.returnToPreviousScene = returnToPreviousScene;\r\n    function closeAllExceptSelf(selfName) {\r\n        for (const key in LwgScene.sceneControl) {\r\n            if (Object.prototype.hasOwnProperty.call(LwgScene.sceneControl, key)) {\r\n                const scene = LwgScene.sceneControl[key];\r\n                if (scene.name !== selfName) {\r\n                    scene.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    LwgScene.closeAllExceptSelf = closeAllExceptSelf;\r\n    function upSceneZOder(upScene) {\r\n        let num = 0;\r\n        for (const key in LwgScene.sceneControl) {\r\n            if (Object.prototype.hasOwnProperty.call(LwgScene.sceneControl, key)) {\r\n                const scene = LwgScene.sceneControl[key];\r\n                if (scene.parent) {\r\n                    scene.zOrder = 0;\r\n                    num++;\r\n                }\r\n            }\r\n        }\r\n        if (upScene) {\r\n            upScene.zOrder = num;\r\n        }\r\n    }\r\n    LwgScene.upSceneZOder = upSceneZOder;\r\n    function addSceneInStage(openScene, openData, isOverlay, showReturnBtn, parent, scriptName) {\r\n        if (openScene) {\r\n            const script = addSceneScript(openScene, scriptName);\r\n            if (script) {\r\n                script.isOverlay = isOverlay;\r\n                script.openData = openData;\r\n                script.showReturnBtn = showReturnBtn;\r\n                openScene[openScene.name] = script;\r\n            }\r\n            if (parent) {\r\n                parent.addChild(openScene);\r\n            }\r\n            else {\r\n                LwgScene.sceneControl[openScene.name] = openScene;\r\n                LwgScene.sceneParent.addChild(openScene);\r\n            }\r\n        }\r\n    }\r\n    LwgScene.addSceneInStage = addSceneInStage;\r\n    ;\r\n    function addSceneScript(openScene, scriptName) {\r\n        let script0;\r\n        let spcriptBool = false;\r\n        for (const key in LwgScene.sceneScript) {\r\n            if (Object.prototype.hasOwnProperty.call(LwgScene.sceneScript, key)) {\r\n                const element = LwgScene.sceneScript[key];\r\n                if ((scriptName && key === scriptName) || key === openScene.name) {\r\n                    if (!openScene.getComponent(element)) {\r\n                        script0 = openScene.addComponent(element);\r\n                        spcriptBool = true;\r\n                        return script0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!spcriptBool) {\r\n            console.log(`${openScene.name}场景没有同名脚本！,需在LwgInit脚本中导入该脚本！`);\r\n        }\r\n    }\r\n    LwgScene.addSceneScript = addSceneScript;\r\n    function goSceneOpenAni(openScene, closeScene) {\r\n        const openScript = openScene[openScene.name];\r\n        const openSceneName = openScene.name;\r\n        var cb = () => {\r\n            closeScene && closeScene.close();\r\n            !openScript.isOverlay && closeAllExceptSelf(openSceneName);\r\n            openAniAfterCommCb(openScript);\r\n        };\r\n        if (openScript) {\r\n            let openAniTime = openScript.lwgOpenAni();\r\n            if (openAniTime) {\r\n                Laya.timer.once(openAniTime, this, cb);\r\n            }\r\n            else {\r\n                LwgSceneAni.playSceneOpen(LwgScene.commSceneOpenAniType, openScene, closeScene, cb);\r\n            }\r\n        }\r\n    }\r\n    LwgScene.goSceneOpenAni = goSceneOpenAni;\r\n    function goOverlaySceneOpenAni(OpenOverlay) {\r\n        const openScript = OpenOverlay[OpenOverlay.name];\r\n        LwgSceneAni.playOverlaySceneOpen(LwgScene.commOverlaySceneOpenAniType, OpenOverlay, () => {\r\n            openAniAfterCommCb(openScript);\r\n        });\r\n    }\r\n    LwgScene.goOverlaySceneOpenAni = goOverlaySceneOpenAni;\r\n    function goOverlaySceneCloseAni(scene) {\r\n        LwgClick.Filter.setValue(LwgClick.EmfilterType.none);\r\n        LwgSceneAni.playOverlaySceneClose(LwgScene.commOverlaySceneCloseAniType, scene, () => {\r\n            closeAniAfterCommCb(scene);\r\n        });\r\n    }\r\n    LwgScene.goOverlaySceneCloseAni = goOverlaySceneCloseAni;\r\n    function goCommonDialogOpenAni(Dialog) {\r\n        const openScript = Dialog[Dialog.name];\r\n        const openAni = openScript.Doalog[openScript.openAnitype];\r\n        openAni.play(0, false);\r\n        openAni.once(Laya.Event.COMPLETE, this, () => {\r\n            openAniAfterCommCb(openScript);\r\n        });\r\n    }\r\n    LwgScene.goCommonDialogOpenAni = goCommonDialogOpenAni;\r\n    function goCommonDialogCloseAni(dialog) {\r\n        LwgClick.Filter.setValue(LwgClick.EmfilterType.none);\r\n        const script = dialog[dialog.name];\r\n        const closeAni = script.Doalog[script.closeAniType];\r\n        closeAni.play(0, false);\r\n        closeAni.once(Laya.Event.COMPLETE, this, () => {\r\n            closeAniAfterCommCb(dialog);\r\n        });\r\n    }\r\n    LwgScene.goCommonDialogCloseAni = goCommonDialogCloseAni;\r\n    function openAniAfterCommCb(openScript) {\r\n        LwgClick.Filter.setValue(LwgClick.EmfilterType.all);\r\n        openScript.setViewShowByOpen();\r\n        openScript.lwgButton();\r\n        openScript.lwgOpenAniAfter();\r\n        LwgEvent.notify(LwgEvent.BaseEvent.guide);\r\n    }\r\n    function closeAniAfterCommCb(scene) {\r\n        scene.close();\r\n        LwgClick.Filter.setValue(LwgClick.EmfilterType.all);\r\n    }\r\n    function findNodeBelongToScene(node) {\r\n        if (node.parent == LwgScene.sceneParent) {\r\n            return node;\r\n        }\r\n        else {\r\n            return this.findNodeBelongToScene(node.parent);\r\n        }\r\n    }\r\n    LwgScene.findNodeBelongToScene = findNodeBelongToScene;\r\n    LwgScene.preLoadInfo = {\r\n        openName: null,\r\n        closeName: null,\r\n        openIsOverlay: null,\r\n        dataOpen: null,\r\n    };\r\n    function lodeScene(openName, cb) {\r\n        if (!LwgScene.sceneParent) {\r\n            LwgScene.sceneParent = new Laya.Sprite;\r\n            LwgScene.sceneParent.name = 'sceneParent';\r\n            Laya.stage.addChild(LwgScene.sceneParent);\r\n            LwgScene.sceneParent.pos(0, 0);\r\n            LwgScene.sceneParent.size(Laya.stage.width, Laya.stage.height);\r\n            LwgScene.sceneParent.zOrder = 10;\r\n        }\r\n        LwgClick.Filter.setValue(LwgClick.EmfilterType.none);\r\n        let url = NameBase[openName] ? LwgPath.VIEWSBASE : LwgPath.VIEWS;\r\n        Laya.Scene.load(`${url}${openName}.json`, Laya.Handler.create(this, function (Scene) {\r\n            let openScene = LwgTools.Node.checkChildren(LwgScene.sceneParent, openName);\r\n            if (openScene) {\r\n                console.log(`场景${openName}重复出现，请检查代码，可能是按钮点击多次！`);\r\n                LwgClick.Filter.setValue(LwgClick.EmfilterType.all);\r\n                return;\r\n            }\r\n            openScene = Scene;\r\n            Scene.name = openName;\r\n            cb && cb(Scene);\r\n        }));\r\n    }\r\n    function openSceneAndPreLoad(openName, openIsOverlay, openData) {\r\n        LwgScene.preLoadInfo.openName = openName;\r\n        LwgScene.preLoadInfo.openIsOverlay = openIsOverlay;\r\n        openOverlayScene(NameBase.PreLoadCutIn, openData);\r\n    }\r\n    LwgScene.openSceneAndPreLoad = openSceneAndPreLoad;\r\n    function openScene(openName, closeName, openData, fromReturnBtn, showReturnBtn) {\r\n        lodeScene(openName, (Scene) => {\r\n            !fromReturnBtn && LwgScene.openSceneRecord.push(openName);\r\n            addSceneInStage(Scene, openData, false, showReturnBtn);\r\n            goSceneOpenAni(Scene, LwgScene.sceneControl[closeName]);\r\n        });\r\n    }\r\n    LwgScene.openScene = openScene;\r\n    function openOverlayScene(openName, openData) {\r\n        lodeScene(openName, (Scene) => {\r\n            addSceneInStage(Scene, openData, true);\r\n            goOverlaySceneOpenAni(Scene);\r\n        });\r\n    }\r\n    LwgScene.openOverlayScene = openOverlayScene;\r\n    function openCommonDialog(openName, openData, openAniType) {\r\n        lodeScene(NameBase.CommonDialog, (SceneDialog) => {\r\n            addSceneInStage(SceneDialog, openData, true, false, null, openName);\r\n            goCommonDialogOpenAni(SceneDialog);\r\n            Laya.Scene.load(`${LwgPath.VIEWS}${openName}.json`, Laya.Handler.create(this, function (Scene) {\r\n                SceneDialog.ViewBox.addChild(Scene);\r\n                SceneDialog.ViewBox.size(Scene.width, Scene.height);\r\n                SceneDialog.content.size(SceneDialog.ViewBox.width + 40, SceneDialog.ViewBox.height + 200);\r\n                LwgClick.btnOnceUp(SceneDialog.BtnClose, this, () => {\r\n                    goCommonDialogCloseAni(SceneDialog);\r\n                });\r\n            }));\r\n        });\r\n    }\r\n    LwgScene.openCommonDialog = openCommonDialog;\r\n    function closeOverlayScene(closeScene) {\r\n        if (closeScene) {\r\n            const script = closeScene[closeScene.name];\r\n            if (script.isOverlay) {\r\n                script.lwgClearOwner();\r\n                goOverlaySceneCloseAni(closeScene);\r\n            }\r\n            else {\r\n                console.log('只有叠加在场景上面的场景可以自由关闭，否则请使用打开另一个场景，基础场景会自动关闭！');\r\n            }\r\n        }\r\n    }\r\n    LwgScene.closeOverlayScene = closeOverlayScene;\r\n    function closeDialog(dialog) {\r\n        if (dialog) {\r\n            const script = dialog[dialog.name];\r\n        }\r\n    }\r\n    LwgScene.closeDialog = closeDialog;\r\n    function clearScene(caller) {\r\n        Laya.Tween.clearAll(caller);\r\n        Laya.timer.clearAll(caller);\r\n        LwgEvent.offAllCaller(caller);\r\n    }\r\n    LwgScene.clearScene = clearScene;\r\n    class ScriptBase extends Laya.Script {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.ownerSceneName = '';\r\n        }\r\n        lwgOnAwake() { }\r\n        ;\r\n        lwgAdaptive() { }\r\n        ;\r\n        lwgEvent() { }\r\n        ;\r\n        evRegister(name, func) {\r\n            LwgEvent.register(name, this, func);\r\n        }\r\n        evRegisterOnce(name, func) {\r\n            LwgEvent.registerOnce(name, this, func);\r\n        }\r\n        evNotify(name, args) {\r\n            LwgEvent.notify(name, args);\r\n        }\r\n        lwgOnEnable() { }\r\n        lwgOnStart() { }\r\n        lwgButton() { }\r\n        ;\r\n        btnOnDown(target, down, effect) {\r\n            LwgClick.btnOnDown(target, this, down, effect);\r\n        }\r\n        btnOnMove(target, move, effect) {\r\n            LwgClick.btnOnMove(target, this, move, effect);\r\n        }\r\n        btnOnUp(target, up, effect) {\r\n            LwgClick.btnOnUp(target, this, up, effect);\r\n        }\r\n        btnOnUpAD(target, up, effect) {\r\n            LwgClick.btnOnUp(target, this, () => {\r\n                LwgWX.AD.showVideo(() => {\r\n                    up && up();\r\n                });\r\n            }, effect);\r\n        }\r\n        btnOnUpADByCondition(target, condition, reachCb, notReachCb, effect) {\r\n            LwgClick.btnOnUp(target, this, () => {\r\n                if (condition) {\r\n                    LwgWX.AD.showVideo(() => {\r\n                        reachCb && reachCb();\r\n                    });\r\n                }\r\n                else {\r\n                    LwgWX.AD.showVideo(() => {\r\n                        notReachCb && notReachCb();\r\n                    });\r\n                }\r\n            }, effect);\r\n        }\r\n        btnOnOut(target, out, effect) {\r\n            LwgClick.btnOnOut(target, this, out, effect);\r\n        }\r\n        btnOff(target, cb, effect) {\r\n            LwgClick.off(effect, target, this, cb, cb, cb, cb);\r\n        }\r\n        btnOnFour(target, down, move, up, out, effect) {\r\n            LwgClick.on(effect, target, this, down, move, up, out);\r\n        }\r\n        btnOnceDown(target, down, effect) {\r\n            LwgClick.once(effect, target, this, down, null, null, null);\r\n        }\r\n        btnOnceMove(target, move, effect) {\r\n            LwgClick.once(effect, target, this, null, move, null, null);\r\n        }\r\n        btnOnceUp(target, up, effect) {\r\n            LwgClick.once(effect, target, this, null, null, up, null);\r\n        }\r\n        btnOnceUpAD(target, up, effect) {\r\n            LwgClick.once(effect, target, this, null, null, () => {\r\n                LwgWX.AD.showVideo(() => {\r\n                    up && up();\r\n                });\r\n            }, null);\r\n        }\r\n        btnOnceUpADByCondition(target, condition, up, effect) {\r\n            LwgClick.once(effect, target, this, null, null, () => {\r\n                if (condition) {\r\n                    LwgWX.AD.showVideo(() => {\r\n                        up && up();\r\n                    });\r\n                }\r\n                else {\r\n                    up && up();\r\n                }\r\n            }, null);\r\n        }\r\n        btnOnceOut(target, out, effect) {\r\n            LwgClick.once(effect, target, this, null, null, null, out);\r\n        }\r\n        btnOnceFour(target, down, move, up, out, effect) {\r\n            LwgClick.once(effect, target, this, down, move, up, out);\r\n        }\r\n        openScene(openName, data, preLoadCutIn, showReturn) {\r\n            this.lwgClearOwner();\r\n            if (!preLoadCutIn) {\r\n                LwgScene.openScene(openName, this.owner.name, data, preLoadCutIn, showReturn);\r\n            }\r\n            else {\r\n                LwgScene.openSceneAndPreLoad(openName, false, data);\r\n            }\r\n        }\r\n        lwgClearOwner() { }\r\n        ;\r\n        openOverlayScene(openName, data, preLoadCutIn) {\r\n            if (!preLoadCutIn) {\r\n                LwgScene.openOverlayScene(openName, data);\r\n            }\r\n            else {\r\n                LwgScene.openSceneAndPreLoad(openName, true, data);\r\n            }\r\n        }\r\n        openCommonDialog(openName, data, openAniType) {\r\n            LwgScene.openCommonDialog(openName, data, openAniType);\r\n        }\r\n        lwgOnUpdate() { }\r\n        ;\r\n        lwgOnDisable() { }\r\n        ;\r\n        onStageMouseDown(e) { LwgClick.checkStage() && this.lwgOnStageDown(e); }\r\n        ;\r\n        onStageMouseMove(e) { LwgClick.checkStage() && this.lwgOnStageMove(e); }\r\n        ;\r\n        onStageMouseUp(e) { LwgClick.checkStage() && this.lwgOnStageUp(e); }\r\n        ;\r\n        lwgOnStageDown(e) { }\r\n        ;\r\n        lwgOnStageMove(e) { }\r\n        ;\r\n        lwgOnStageUp(e) { }\r\n        ;\r\n    }\r\n    class SceneBase extends ScriptBase {\r\n        constructor() {\r\n            super();\r\n        }\r\n        get openNum() {\r\n            return LwgStorage.number(`${this.owner.name}/openNum`).value;\r\n        }\r\n        set openNum(val) {\r\n            LwgStorage.number(`${this.owner.name}/openNum`).value = val;\r\n        }\r\n        onAwake() {\r\n            this.showReturnBtn && LwgCommon.ReturnBtn.show();\r\n            this.setWH();\r\n            this.setBg();\r\n            this.lwgOnAwake();\r\n            this.lwgAdaptive();\r\n            this.openNum++;\r\n        }\r\n        setWH() {\r\n            this.owner['width'] = Laya.stage.width;\r\n            this.owner['height'] = Laya.stage.height;\r\n        }\r\n        setBg() {\r\n            if (this.owner.getChildByName('background')) {\r\n                this.owner.getChildByName('background')['width'] = Laya.stage.width;\r\n                this.owner.getChildByName('background')['height'] = Laya.stage.height;\r\n            }\r\n            if (this.owner['background']) {\r\n                this.owner['background']['width'] = Laya.stage.width;\r\n                this.owner['background']['height'] = Laya.stage.height;\r\n            }\r\n        }\r\n        onEnable() {\r\n            this.lwgEvent();\r\n            this.lwgOnEnable();\r\n        }\r\n        onStart() {\r\n            this.lwgOnStart();\r\n        }\r\n        setViewShowByOpen() {\r\n            LwgCurrency.Gold.showInSceneCheck(this.owner.name);\r\n            LwgCurrency.Stamina.showInSceneCheck(this.owner.name);\r\n            LwgCurrency.Diamond.showInSceneCheck(this.owner.name);\r\n            LwgCommon.BtnGameManager.showInSceneCheck(this.owner.name);\r\n            LwgWX.AD && LwgWX.AD.setShowInScenes(this.owner.name);\r\n        }\r\n        lwgOpenAni() { return null; }\r\n        ;\r\n        lwgOpenAniAfter() { }\r\n        ;\r\n        adaptiveHeight(arr) {\r\n            LwgAdaptive.stageHeight(arr);\r\n        }\r\n        ;\r\n        adaptiveWidth(arr) {\r\n            LwgAdaptive.stageWidth(arr);\r\n        }\r\n        ;\r\n        adaptiveCenter(arr) {\r\n            LwgAdaptive.center(arr, Laya.stage);\r\n        }\r\n        ;\r\n        onUpdate() { this.lwgOnUpdate(); }\r\n        ;\r\n        closeScene(sceneName) {\r\n            let openScene;\r\n            if (sceneName) {\r\n                openScene = LwgScene.sceneControl[sceneName];\r\n            }\r\n            else {\r\n                openScene = this.owner;\r\n            }\r\n            LwgScene.closeOverlayScene(openScene);\r\n        }\r\n        lwgCloseAni() { return null; }\r\n        ;\r\n        lwgClearOwner() {\r\n            clearScene(this);\r\n            clearScene(this.owner);\r\n        }\r\n        setViewShowByClose() {\r\n            if (this.owner.name !== NameBase.PreLoadCutIn) {\r\n                LwgWX.AD.showInterstCloseSceneCheck(this.owner.name);\r\n                if (this.isOverlay) {\r\n                    LwgWX.AD.setHideInScenes(this.owner.name);\r\n                    LwgCurrency.Gold.hideInSceneCheck();\r\n                    LwgCurrency.Diamond.hideInSceneCheck();\r\n                    LwgCurrency.Stamina.hideInSceneCheck();\r\n                    LwgCommon.BtnGameManager.hideInSceneCheck();\r\n                }\r\n            }\r\n        }\r\n        onDisable() {\r\n            this.setViewShowByClose();\r\n            this.lwgClearOwner();\r\n            this.lwgOnDisable();\r\n        }\r\n    }\r\n    LwgScene.SceneBase = SceneBase;\r\n    let EmDialogCommonOpenAniType;\r\n    (function (EmDialogCommonOpenAniType) {\r\n        EmDialogCommonOpenAniType[\"none\"] = \"none\";\r\n        EmDialogCommonOpenAniType[\"open_popup\"] = \"open_popup\";\r\n        EmDialogCommonOpenAniType[\"open_popupRotate\"] = \"open_popupRotate\";\r\n    })(EmDialogCommonOpenAniType = LwgScene.EmDialogCommonOpenAniType || (LwgScene.EmDialogCommonOpenAniType = {}));\r\n    let EmDialogCommonCloseAniType;\r\n    (function (EmDialogCommonCloseAniType) {\r\n        EmDialogCommonCloseAniType[\"none\"] = \"none\";\r\n        EmDialogCommonCloseAniType[\"close_shrink\"] = \"close_shrink\";\r\n    })(EmDialogCommonCloseAniType = LwgScene.EmDialogCommonCloseAniType || (LwgScene.EmDialogCommonCloseAniType = {}));\r\n    class CommonDialogBase extends SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.openAnitype = EmDialogCommonOpenAniType.open_popup;\r\n            this.closeAniType = EmDialogCommonCloseAniType.close_shrink;\r\n        }\r\n        get Doalog() {\r\n            return this.owner;\r\n        }\r\n        onAwake() {\r\n            this.setWH();\r\n            this.setBg();\r\n            this.lwgOnAwake();\r\n            this.lwgAdaptive();\r\n        }\r\n    }\r\n    LwgScene.CommonDialogBase = CommonDialogBase;\r\n    class ObjectBase extends ScriptBase {\r\n        constructor() {\r\n            super();\r\n        }\r\n        clearAndDestroy() {\r\n            this.lwgClearOwner();\r\n            this._owner.destroy();\r\n        }\r\n        get _owner() {\r\n            return this.owner;\r\n        }\r\n        get presentPoint() {\r\n            return new Laya.Point(this._owner.x, this._owner.y);\r\n        }\r\n        get ownerScene() {\r\n            return this.owner.scene;\r\n        }\r\n        onAwake() {\r\n            LwgNode.addProperty(this._owner);\r\n            this._owner[this._owner.name] = this;\r\n            this.ownerSceneName = this._owner.name;\r\n            this.lwgOnAwake();\r\n            this.lwgAdaptive();\r\n        }\r\n        onEnable() {\r\n            this.lwgButton();\r\n            this.lwgEvent();\r\n            this.lwgOnEnable();\r\n        }\r\n        onStart() {\r\n            this.lwgOnStart();\r\n        }\r\n        onUpdate() {\r\n            this.lwgOnUpdate();\r\n        }\r\n        lwgClearOwner() {\r\n            clearScene(this);\r\n            clearScene(this.owner);\r\n        }\r\n        onDisable() {\r\n            this.lwgClearOwner();\r\n            this.lwgOnDisable();\r\n        }\r\n    }\r\n    LwgScene.ObjectBase = ObjectBase;\r\n    class ViewObjBase {\r\n        constructor() {\r\n            this.viewNameByUI = '';\r\n            this.style = {\r\n                x: 4,\r\n                y: 46,\r\n            };\r\n            this.aniTime = 100;\r\n            this.appearScene = [];\r\n            this.showRrackArr = [];\r\n        }\r\n        show(style = this.style, delay = this.aniTime, parent = Laya.stage) {\r\n            this.createView(style, parent);\r\n            this.showAni(delay);\r\n        }\r\n        ;\r\n        showInSceneCheck(sceneName) {\r\n            let appear = false;\r\n            for (let index = 0; index < this.appearScene.length; index++) {\r\n                const element = this.appearScene[index];\r\n                if (element == sceneName) {\r\n                    appear = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (appear) {\r\n                this.show();\r\n                this.showRrackArr.push({\r\n                    sceneName: sceneName,\r\n                    show: true,\r\n                });\r\n            }\r\n            else {\r\n                this.hide();\r\n                this.showRrackArr.push({\r\n                    sceneName: sceneName,\r\n                    show: false,\r\n                });\r\n            }\r\n        }\r\n        hideInSceneCheck() {\r\n            this.showRrackArr.pop();\r\n            if (this.showRrackArr.length > 0) {\r\n                if (this.showRrackArr[this.showRrackArr.length - 1].show) {\r\n                    this.show();\r\n                }\r\n                else {\r\n                    this.hide();\r\n                }\r\n            }\r\n            else {\r\n                this.hide();\r\n            }\r\n        }\r\n        createView(style, parent = Laya.stage) {\r\n            if (!this.view) {\r\n                this.view = new ui.Views.Base[this.viewNameByUI];\r\n                this.view.visible = false;\r\n                this.view.zOrder = 100;\r\n                this.createCb();\r\n            }\r\n            if (parent) {\r\n                parent.addChild(this.view);\r\n            }\r\n            else {\r\n                Laya.stage.addChild(this.view);\r\n            }\r\n            if (style.x) {\r\n                this.view.x = style.x;\r\n            }\r\n            if (style.y) {\r\n                this.view.y = style.y;\r\n            }\r\n            if (style.left) {\r\n                this.view.left = style.left;\r\n            }\r\n            if (style.right) {\r\n                this.view.right = style.right;\r\n            }\r\n            if (style.centerX) {\r\n                this.view.centerX = style.centerX;\r\n            }\r\n            if (style.centerY) {\r\n                this.view.centerY = style.centerY;\r\n            }\r\n        }\r\n        createCb() { }\r\n        ;\r\n        showAni(delay) {\r\n            if (this.view.visible) {\r\n                this.showCb();\r\n                return;\r\n            }\r\n            if (delay) {\r\n                this.view.visible = true;\r\n                if (delay) {\r\n                    LwgAni2D.scale_Alpha(this.view, 0, 1, 1, 1, 1, 1, delay, 0, () => {\r\n                        this.showCb();\r\n                    });\r\n                }\r\n                else {\r\n                    this.showCb();\r\n                }\r\n            }\r\n        }\r\n        showCb() { }\r\n        ;\r\n        move(x, y, time = 200, delay = 0, cb = null) {\r\n            LwgAni2D.move(this.view, x, y ? y : this.view.y, time, () => {\r\n                cb && cb();\r\n            }, delay);\r\n        }\r\n        hide(ani, cb = null) {\r\n            if (!this.view) {\r\n                return;\r\n            }\r\n            if (ani) {\r\n                LwgAni2D.scale_Alpha(this.view, 1, 1, 1, 1, 1, 0, this.aniTime, 0, () => {\r\n                    this.view.visible = false;\r\n                    this.hideCb();\r\n                    cb && cb();\r\n                });\r\n            }\r\n            else {\r\n                this.view.visible = false;\r\n                this.hideCb();\r\n                cb && cb();\r\n            }\r\n        }\r\n        hideCb() { }\r\n        ;\r\n    }\r\n    LwgScene.ViewObjBase = ViewObjBase;\r\n    class RuntimeImgBase extends Laya.Image {\r\n        onAwake() {\r\n            this.lwgOnAwake();\r\n        }\r\n        lwgOnAwake() {\r\n        }\r\n        onDisable() {\r\n            this.lwgClear();\r\n            this.lwgOnDisable();\r\n        }\r\n        lwgOnDisable() {\r\n        }\r\n        lwgClear() {\r\n            clearScene(this);\r\n        }\r\n    }\r\n    LwgScene.RuntimeImgBase = RuntimeImgBase;\r\n    class RuntimeImgViwe extends Laya.View {\r\n        onAwake() {\r\n            this.lwgOnAwake();\r\n        }\r\n        lwgOnAwake() {\r\n        }\r\n        onDisable() {\r\n            this.lwgClear();\r\n            this.lwgOnDisable();\r\n        }\r\n        lwgOnDisable() {\r\n        }\r\n        lwgClear() {\r\n            Laya.Tween.clearAll(this);\r\n            Laya.timer.clearAll(this);\r\n            LwgEvent.offAllCaller(this);\r\n        }\r\n    }\r\n    LwgScene.RuntimeImgViwe = RuntimeImgViwe;\r\n})(LwgScene || (LwgScene = {}));\r\nexport var LwgGuide;\r\n(function (LwgGuide) {\r\n    let EmClickType;\r\n    (function (EmClickType) {\r\n        EmClickType[EmClickType[\"clickDown\"] = 0] = \"clickDown\";\r\n        EmClickType[EmClickType[\"clickMove\"] = 1] = \"clickMove\";\r\n        EmClickType[EmClickType[\"clickUp\"] = 2] = \"clickUp\";\r\n        EmClickType[EmClickType[\"clickOut\"] = 3] = \"clickOut\";\r\n        EmClickType[EmClickType[\"slide\"] = 4] = \"slide\";\r\n        EmClickType[EmClickType[\"slideLR\"] = 5] = \"slideLR\";\r\n        EmClickType[EmClickType[\"slideUD\"] = 6] = \"slideUD\";\r\n        EmClickType[EmClickType[\"multiTouch\"] = 7] = \"multiTouch\";\r\n    })(EmClickType = LwgGuide.EmClickType || (LwgGuide.EmClickType = {}));\r\n    let EmClickTarget;\r\n    (function (EmClickTarget) {\r\n        EmClickTarget[EmClickTarget[\"assign\"] = 0] = \"assign\";\r\n        EmClickTarget[EmClickTarget[\"parent\"] = 1] = \"parent\";\r\n        EmClickTarget[EmClickTarget[\"stage\"] = 2] = \"stage\";\r\n    })(EmClickTarget = LwgGuide.EmClickTarget || (LwgGuide.EmClickTarget = {}));\r\n    let EmMaskType;\r\n    (function (EmMaskType) {\r\n        EmMaskType[EmMaskType[\"none\"] = 0] = \"none\";\r\n        EmMaskType[EmMaskType[\"round\"] = 1] = \"round\";\r\n        EmMaskType[EmMaskType[\"rect\"] = 2] = \"rect\";\r\n        EmMaskType[EmMaskType[\"rectRound\"] = 3] = \"rectRound\";\r\n    })(EmMaskType = LwgGuide.EmMaskType || (LwgGuide.EmMaskType = {}));\r\n    class ViewGuide extends ui.Views.Base.GuideUI {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.guideOder = [];\r\n            this.clickTarget = [];\r\n        }\r\n        get indexGuide() {\r\n            return LwgStorage.number(`Guide/index`, null, 0).value;\r\n        }\r\n        set indexGuide(val) {\r\n            LwgStorage.number(`Guide/index`).value = val;\r\n        }\r\n        onAwake() {\r\n            this.background.size(3000, 3000);\r\n            this.lwgOnAwake();\r\n            LwgEvent.register(LwgEvent.BaseEvent.guide, this, (guideData) => {\r\n                this.lwgGuideCb();\r\n            });\r\n        }\r\n        guideInit() {\r\n            const guideData = this.guideOder[this.indexGuide];\r\n            if (guideData) {\r\n                if (guideData.index === this.indexGuide) {\r\n                    const scene = LwgScene.findNodeBelongToScene(this);\r\n                    if (guideData.sceneName === scene.name) {\r\n                        switch (guideData.mask) {\r\n                            case EmMaskType.none:\r\n                                this.maskNone();\r\n                                break;\r\n                            case EmMaskType.round:\r\n                                this.maskRound(guideData);\r\n                                break;\r\n                            case EmMaskType.rect:\r\n                                this.maskRect(guideData);\r\n                                break;\r\n                            case EmMaskType.rectRound:\r\n                                this.maskRectRound(guideData);\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                        if (guideData.sceneName === scene.name) {\r\n                            switch (guideData.clickTargetType) {\r\n                                case EmClickTarget.assign:\r\n                                    if (guideData.assign) {\r\n                                        this.clickTarget = guideData.assign;\r\n                                    }\r\n                                    else {\r\n                                        console.log('指定的点击目标不存在！');\r\n                                    }\r\n                                    break;\r\n                                case EmClickTarget.stage:\r\n                                    this.clickTarget = [Laya.stage];\r\n                                    break;\r\n                                case EmClickTarget.parent:\r\n                                    this.clickTarget = [this.parent];\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            this.setTargetClick(guideData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        maskNone() {\r\n            this.background.visible = false;\r\n        }\r\n        maskRound(guideData) {\r\n            const round = guideData.round;\r\n            if (round.length > 0) {\r\n                LwgTools.Draw.maskRound(this.background, round);\r\n            }\r\n            else {\r\n                console.log('遮罩数据不正确');\r\n            }\r\n        }\r\n        maskRect(guideData) {\r\n            const rect = guideData.rect;\r\n            if (rect.length > 0) {\r\n                LwgTools.Draw.maskRect(this.background, rect);\r\n            }\r\n            else {\r\n                console.log('遮罩数据不正确');\r\n            }\r\n        }\r\n        maskRectRound(guideData) {\r\n            const rectRound = guideData.rectRound;\r\n            if (rectRound.length > 0) {\r\n                LwgTools.Draw.maskRectRound(this.background, rectRound);\r\n            }\r\n            else {\r\n                console.log('遮罩数据不正确');\r\n            }\r\n        }\r\n        setTargetClick(guideData) {\r\n            switch (guideData.clickType) {\r\n                case EmClickType.clickUp:\r\n                    this.whenClick(guideData);\r\n                    break;\r\n                case EmClickType.slide:\r\n                    this.whenSlide(guideData);\r\n                    break;\r\n                case EmClickType.slideLR:\r\n                    this.whenSlideLR(guideData);\r\n                    break;\r\n                case EmClickType.slideUD:\r\n                    this.whenSlideUD(guideData);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        whenClick(guideData) {\r\n        }\r\n        whenSlide(guideData) {\r\n        }\r\n        whenSlideLR(guideData) {\r\n        }\r\n        whenSlideUD(guideData) {\r\n        }\r\n        lwgOnAwake() {\r\n        }\r\n        lwgGuideCb() {\r\n        }\r\n        onDisable() {\r\n            this.lwgClear();\r\n            this.lwgOnDisable();\r\n        }\r\n        lwgOnDisable() {\r\n        }\r\n        lwgClear() {\r\n            LwgScene.clearScene(this);\r\n        }\r\n    }\r\n    LwgGuide.ViewGuide = ViewGuide;\r\n})(LwgGuide || (LwgGuide = {}));\r\nexport var LwgSceneAni;\r\n(function (LwgSceneAni) {\r\n    let EmOpenSceneType;\r\n    (function (EmOpenSceneType) {\r\n        EmOpenSceneType[\"fadeOut_openLaterClose\"] = \"fadeOut_openLaterClose\";\r\n        EmOpenSceneType[\"fadeOut_closeLaterOpen\"] = \"fadeOut_closeLaterOpen\";\r\n    })(EmOpenSceneType = LwgSceneAni.EmOpenSceneType || (LwgSceneAni.EmOpenSceneType = {}));\r\n    let EmOpenOverlayType;\r\n    (function (EmOpenOverlayType) {\r\n        EmOpenOverlayType[\"fadeOut_commonFadeOut\"] = \"fadeOut_commonFadeOut\";\r\n    })(EmOpenOverlayType = LwgSceneAni.EmOpenOverlayType || (LwgSceneAni.EmOpenOverlayType = {}));\r\n    let EmCloseOverlayType;\r\n    (function (EmCloseOverlayType) {\r\n        EmCloseOverlayType[\"fadeOut_commonFadeOut\"] = \"fadeOut_commonFadeOut\";\r\n    })(EmCloseOverlayType = LwgSceneAni.EmCloseOverlayType || (LwgSceneAni.EmCloseOverlayType = {}));\r\n    function playSceneOpen(type = EmOpenSceneType.fadeOut_openLaterClose, openScene, closeScene, cb) {\r\n        const dataArr = type.split('_');\r\n        SceneOpen[dataArr[0]][dataArr[1]](openScene, closeScene, cb);\r\n    }\r\n    LwgSceneAni.playSceneOpen = playSceneOpen;\r\n    function playOverlaySceneOpen(type = EmOpenOverlayType.fadeOut_commonFadeOut, openScene, cb) {\r\n        const dataArr = type.split('_');\r\n        OverlaySceneOpen[dataArr[0]][dataArr[1]](openScene, cb);\r\n    }\r\n    LwgSceneAni.playOverlaySceneOpen = playOverlaySceneOpen;\r\n    function playOverlaySceneClose(type = EmCloseOverlayType.fadeOut_commonFadeOut, closeScene, cb) {\r\n        const dataArr = type.split('_');\r\n        OverlaySceneClose[dataArr[0]][dataArr[1]](closeScene, cb);\r\n    }\r\n    LwgSceneAni.playOverlaySceneClose = playOverlaySceneClose;\r\n    let SceneOpen;\r\n    (function (SceneOpen) {\r\n        class fadeOut {\r\n            static openLaterClose(openScene, closeScene, cb) {\r\n                const time = 150;\r\n                openScene['background'] && LwgAni2D.fadeOut(openScene['background'], 0, 1, time / 2);\r\n                LwgAni2D.fadeOut(openScene, 0, 1, time, 0, () => {\r\n                    closeScene && closeScene.close();\r\n                    cb && cb();\r\n                });\r\n                return time;\r\n            }\r\n            static closeLaterOpen(openScene, closeScene, cb) {\r\n                const time = 300;\r\n                const delay = 100;\r\n                if (openScene['Background']) {\r\n                    LwgAni2D.fadeOut(closeScene['Background'], 1, 0, time / 2);\r\n                }\r\n                LwgAni2D.fadeOut(openScene, 1, 0, time, delay, () => {\r\n                    closeScene && closeScene.close();\r\n                    cb && cb();\r\n                });\r\n                return time + delay;\r\n            }\r\n        }\r\n        SceneOpen.fadeOut = fadeOut;\r\n    })(SceneOpen || (SceneOpen = {}));\r\n    let OverlaySceneOpen;\r\n    (function (OverlaySceneOpen) {\r\n        class fadeOut {\r\n            static commonFadeOut(openScene, cb) {\r\n                return SceneOpen.fadeOut.openLaterClose(openScene, null, cb);\r\n            }\r\n        }\r\n        OverlaySceneOpen.fadeOut = fadeOut;\r\n        class Popup {\r\n            static QBounce(openScene, cb) {\r\n            }\r\n        }\r\n        OverlaySceneOpen.Popup = Popup;\r\n    })(OverlaySceneOpen || (OverlaySceneOpen = {}));\r\n    let OverlaySceneClose;\r\n    (function (OverlaySceneClose) {\r\n        class fadeOut {\r\n            static commonFadeOut(closeScene, cb) {\r\n                const time = 300;\r\n                LwgAni2D.fadeOut(closeScene, 1, 0, time, 0, () => {\r\n                    closeScene && closeScene.close();\r\n                    cb && cb();\r\n                });\r\n                return time;\r\n            }\r\n        }\r\n        OverlaySceneClose.fadeOut = fadeOut;\r\n        class PinchIn {\r\n            static commonPinchIn(openScene, cb) {\r\n            }\r\n        }\r\n        OverlaySceneClose.PinchIn = PinchIn;\r\n    })(OverlaySceneClose || (OverlaySceneClose = {}));\r\n})(LwgSceneAni || (LwgSceneAni = {}));\r\nexport var LwgNode;\r\n(function (LwgNode) {\r\n    class Sprite extends Laya.Sprite {\r\n    }\r\n    LwgNode.Sprite = Sprite;\r\n    class Image extends Laya.Image {\r\n    }\r\n    LwgNode.Image = Image;\r\n    class _Box extends Laya.Box {\r\n    }\r\n    LwgNode._Box = _Box;\r\n    function addProperty(node, nodeType) {\r\n        if (!node)\r\n            return;\r\n        let lwgPro;\r\n        switch (nodeType) {\r\n            case 'Img':\r\n                lwgPro;\r\n                break;\r\n            case 'box':\r\n                lwgPro;\r\n                break;\r\n            default:\r\n                lwgPro;\r\n                break;\r\n        }\r\n        let getGPoint = () => {\r\n            if (node.parent) {\r\n                return node.parent.localToGlobal(new Laya.Point(node.x, node.y));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n        const fPoint = new Laya.Point(node.x, node.y);\r\n        const fGPoint = getGPoint();\r\n        const fRotation = node.rotation;\r\n        lwgPro = {\r\n            get gPoint() {\r\n                return getGPoint();\r\n            },\r\n            fPoint: fPoint,\r\n            fGPoint: fGPoint,\r\n            fRotation: fRotation,\r\n            getDisByNode(OtherNode) {\r\n                const nodePos = getGPoint();\r\n                if (nodePos) {\r\n                    if (OtherNode.parent) {\r\n                        let otherNodePos = OtherNode.parent.localToGlobal(new Laya.Point(node.x, node.y));\r\n                        return nodePos.distance(otherNodePos.x, otherNodePos.y);\r\n                    }\r\n                }\r\n                return null;\r\n            },\r\n            getGlobleDisByPoint(point) {\r\n                const nodeGPos = getGPoint();\r\n                return nodeGPos.distance(point.x, point.y);\r\n            },\r\n            getLocalDisByPoint(point) {\r\n                const nodePos = new Laya.Point(node.x, node.y);\r\n                return nodePos.distance(point.x, point.y);\r\n            },\r\n            getChildGPoint(Child) {\r\n                const point = new Laya.Point(Child.x, Child.y);\r\n                const gPoint = node.localToGlobal(point);\r\n                return gPoint;\r\n            }\r\n        };\r\n        node['lwg'] = lwgPro;\r\n    }\r\n    LwgNode.addProperty = addProperty;\r\n})(LwgNode || (LwgNode = {}));\r\nexport var LwgDialogue;\r\n(function (LwgDialogue) {\r\n    let EmFloatWordAniType;\r\n    (function (EmFloatWordAniType) {\r\n    })(EmFloatWordAniType = LwgDialogue.EmFloatWordAniType || (LwgDialogue.EmFloatWordAniType = {}));\r\n    class FloatWord {\r\n        static createFontSystem(x, y, contentStyle, scale, showIcon = true, aniType) {\r\n            const floatWord = new ui.Views.Base.FloatFontSystemObjUI();\r\n            const scale0 = scale ? scale : 1;\r\n            floatWord.scale(scale0, scale0);\r\n            Laya.stage.addChild(floatWord);\r\n            floatWord.pos(x, y);\r\n            floatWord.lbContent.text = contentStyle.content;\r\n            if (contentStyle.color) {\r\n                floatWord.lbContent.color = contentStyle.color;\r\n            }\r\n            if (contentStyle.size) {\r\n                floatWord.lbContent.size(contentStyle.size, contentStyle.size);\r\n            }\r\n            if (!showIcon) {\r\n                floatWord.imgIcon.visible = false;\r\n            }\r\n            if (contentStyle.stroke) {\r\n                floatWord.lbContent.stroke = contentStyle.stroke;\r\n            }\r\n            if (contentStyle.strokeColor) {\r\n                floatWord.lbContent.strokeColor = contentStyle.strokeColor;\r\n            }\r\n            floatWord.ani1.on(Laya.Event.LABEL, this, (e) => {\r\n                if (e == 'end') {\r\n                    floatWord.destroy();\r\n                }\r\n            });\r\n            return floatWord;\r\n        }\r\n        static createFontArt(x, y, index, scale, showIcon = true, aniType) {\r\n        }\r\n        static createFontArtNum(x, y, content, scale, showIcon = true, aniType) {\r\n        }\r\n    }\r\n    LwgDialogue.FloatWord = FloatWord;\r\n    let Skin;\r\n    (function (Skin) {\r\n        Skin[\"blackBord\"] = \"Lwg/UI/img_rectangle_mask_06.png\";\r\n    })(Skin || (Skin = {}));\r\n    function showTips(content) {\r\n        const hide_M = Laya.Pool.getItemByClass('CommonTips', Laya.Sprite);\r\n        hide_M.name = 'CommonTips';\r\n        Laya.stage.addChild(hide_M);\r\n        hide_M.width = Laya.stage.width;\r\n        hide_M.height = 100;\r\n        hide_M.pivotY = hide_M.height / 2;\r\n        hide_M.pivotX = Laya.stage.width / 2;\r\n        hide_M.x = Laya.stage.width / 2;\r\n        hide_M.y = Laya.stage.height / 2;\r\n        hide_M.zOrder = 100;\r\n        const Pic = new Laya.Image();\r\n        hide_M.addChild(Pic);\r\n        Pic.skin = Skin.blackBord;\r\n        Pic.width = Laya.stage.width;\r\n        Pic.pivotX = Laya.stage.width / 2;\r\n        Pic.height = 100;\r\n        Pic.pivotY = Pic.height / 2;\r\n        Pic.y = hide_M.height / 2;\r\n        Pic.x = Laya.stage.width / 2;\r\n        Pic.alpha = 0.6;\r\n        const Dec = new Laya.Label();\r\n        hide_M.addChild(Dec);\r\n        Dec.width = Laya.stage.width;\r\n        Dec.text = content;\r\n        Dec.pivotX = Laya.stage.width / 2;\r\n        Dec.x = Laya.stage.width / 2;\r\n        Dec.height = 100;\r\n        Dec.pivotY = 50;\r\n        Dec.y = hide_M.height / 2;\r\n        Dec.bold = true;\r\n        Dec.fontSize = 35;\r\n        Dec.color = '#ffffff';\r\n        Dec.align = 'center';\r\n        Dec.valign = 'middle';\r\n        Dec.alpha = 0;\r\n        LwgAni2D.scale_Alpha(hide_M, 0, 1, 0, 1, 1, 1, 200, 0, () => {\r\n            LwgAni2D.fadeOut(Dec, 0, 1, 150, 0, () => {\r\n                LwgAni2D.fadeOut(Dec, 1, 0, 200, 800, () => {\r\n                    LwgAni2D.scale_Alpha(hide_M, 1, 1, 1, 1, 0, 0, 200, 0, () => {\r\n                        hide_M.removeSelf();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    LwgDialogue.showTips = showTips;\r\n    LwgDialogue.dialogContent = {\r\n        get Array() {\r\n            return Laya.loader.getRes(\"GameData/LwgDialogue/LwgDialogue.json\")['RECORDS'] !== null ? Laya.loader.getRes(\"GameData/LwgDialogue/LwgDialogue.json\")['RECORDS'] : [];\r\n        },\r\n    };\r\n    function getDialogContent(useWhere, name) {\r\n        let dia;\r\n        for (let index = 0; index < LwgDialogue.dialogContent.Array.length; index++) {\r\n            const element = LwgDialogue.dialogContent.Array[index];\r\n            if (element['useWhere'] == useWhere && element['name'] == name) {\r\n                dia = element;\r\n                break;\r\n            }\r\n        }\r\n        const arr = [];\r\n        for (const key in dia) {\r\n            if (dia.hasOwnProperty(key)) {\r\n                const value = dia[key];\r\n                if (key.substring(0, 7) == 'content' || value !== -1) {\r\n                    arr.push(value);\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    LwgDialogue.getDialogContent = getDialogContent;\r\n    function getDialogContent_Random(useWhere) {\r\n        let contentArr = [];\r\n        let whereArr = getUseWhere(useWhere);\r\n        let index = Math.floor(Math.random() * whereArr.length);\r\n        for (const key in whereArr[index]) {\r\n            if (whereArr[index].hasOwnProperty(key)) {\r\n                const value = whereArr[index][key];\r\n                if (key.substring(0, 7) == 'content' && value !== \"-1\") {\r\n                    contentArr.push(value);\r\n                }\r\n            }\r\n        }\r\n        return contentArr;\r\n    }\r\n    LwgDialogue.getDialogContent_Random = getDialogContent_Random;\r\n    function getUseWhere(useWhere) {\r\n        let arr = [];\r\n        for (let index = 0; index < LwgDialogue.dialogContent.Array.length; index++) {\r\n            const element = LwgDialogue.dialogContent.Array[index];\r\n            if (element['useWhere'] == useWhere) {\r\n                arr.push(element);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    LwgDialogue.getUseWhere = getUseWhere;\r\n    let UseWhere;\r\n    (function (UseWhere) {\r\n        UseWhere[\"scene1\"] = \"scene1\";\r\n        UseWhere[\"scene2\"] = \"scene2\";\r\n        UseWhere[\"scene3\"] = \"scene3\";\r\n    })(UseWhere = LwgDialogue.UseWhere || (LwgDialogue.UseWhere = {}));\r\n    let DialogProperty;\r\n    (function (DialogProperty) {\r\n        DialogProperty[\"name\"] = \"name\";\r\n        DialogProperty[\"useWhere\"] = \"useWhere\";\r\n        DialogProperty[\"content\"] = \"content\";\r\n        DialogProperty[\"max\"] = \"max\";\r\n    })(DialogProperty = LwgDialogue.DialogProperty || (LwgDialogue.DialogProperty = {}));\r\n    let PlayMode;\r\n    (function (PlayMode) {\r\n        PlayMode[\"voluntarily\"] = \"voluntarily\";\r\n        PlayMode[\"manual\"] = \"manual\";\r\n        PlayMode[\"clickContent\"] = \"clickContent\";\r\n    })(PlayMode = LwgDialogue.PlayMode || (LwgDialogue.PlayMode = {}));\r\n    function createVoluntarilyDialogue(x, y, useWhere, startdelay, delay, parent, content) {\r\n        if (startdelay == undefined) {\r\n            startdelay = 0;\r\n        }\r\n        Laya.timer.once(startdelay, this, () => {\r\n            let Pre_Dialogue;\r\n            Laya.loader.load('Prefab/Dialogue_Common.json', Laya.Handler.create(this, function (prefab) {\r\n                let _prefab = new Laya.Prefab();\r\n                _prefab.json = prefab;\r\n                Pre_Dialogue = Laya.Pool.getItemByCreateFun('Pre_Dialogue', _prefab.create, _prefab);\r\n                if (parent) {\r\n                    parent.addChild(Pre_Dialogue);\r\n                }\r\n                else {\r\n                    Laya.stage.addChild(Pre_Dialogue);\r\n                }\r\n                Pre_Dialogue.x = x;\r\n                Pre_Dialogue.y = y;\r\n                let ContentLabel = Pre_Dialogue.getChildByName('Content');\r\n                let contentArr;\r\n                if (content !== undefined) {\r\n                    ContentLabel.text = content[0];\r\n                }\r\n                else {\r\n                    contentArr = getDialogContent_Random(useWhere);\r\n                    ContentLabel.text = contentArr[0];\r\n                }\r\n                Pre_Dialogue.zOrder = 100;\r\n                if (delay == undefined) {\r\n                    delay = 1000;\r\n                }\r\n                LwgAni2D.scale_Alpha(Pre_Dialogue, 0, 0, 0, 1, 1, 1, 150, 1000, () => {\r\n                    for (let index = 0; index < contentArr.length; index++) {\r\n                        Laya.timer.once(index * delay, this, () => {\r\n                            ContentLabel.text = contentArr[index];\r\n                            if (index == contentArr.length - 1) {\r\n                                Laya.timer.once(delay, this, () => {\r\n                                    LwgAni2D.scale_Alpha(Pre_Dialogue, 1, 1, 1, 0, 0, 0, 150, 1000, () => {\r\n                                        Pre_Dialogue.removeSelf();\r\n                                    });\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                LwgDialogue.DialogueNode = Pre_Dialogue;\r\n            }));\r\n        });\r\n    }\r\n    LwgDialogue.createVoluntarilyDialogue = createVoluntarilyDialogue;\r\n    function createCommonDialog(parent, x, y, content) {\r\n        let Dialogue_Common;\r\n        Laya.loader.load('Prefab/Dialogue_Common.json', Laya.Handler.create(this, function (prefab) {\r\n            let _prefab = new Laya.Prefab();\r\n            _prefab.json = prefab;\r\n            Dialogue_Common = Laya.Pool.getItemByCreateFun('Dialogue_Common', _prefab.create, _prefab);\r\n            parent.addChild(Dialogue_Common);\r\n            Dialogue_Common.pos(x, y);\r\n            let Content = Dialogue_Common.getChildByName('Dialogue_Common');\r\n            Content.text = content;\r\n        }));\r\n    }\r\n    LwgDialogue.createCommonDialog = createCommonDialog;\r\n})(LwgDialogue || (LwgDialogue = {}));\r\nexport var LwgCommon;\r\n(function (LwgCommon) {\r\n    class Init {\r\n        constructor(set) {\r\n            LwgCommon.ReturnBtn = new _BtnReturn;\r\n            LwgCommon.BtnGameManager = new _GameManagerBtn;\r\n            LwgCommon.ReturnBtn.appearScene = set.ReturnBtn.appearScene;\r\n            if (!Laya.Browser.onWeiXin) {\r\n                LwgCommon.BtnGameManager.appearScene = set.BtnGameManager.appearScene;\r\n            }\r\n        }\r\n        get modelName() {\r\n            return 'LwgCommon';\r\n        }\r\n    }\r\n    LwgCommon.Init = Init;\r\n    class _BtnReturn extends LwgScene.ViewObjBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.viewNameByUI = 'ReturnBtnObjUI';\r\n        }\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new _BtnReturn();\r\n            }\r\n            return this._ins;\r\n        }\r\n        createCb() {\r\n            LwgClick.on(LwgClick.effectType, this.view, this, null, null, () => {\r\n                LwgScene.returnToPreviousScene();\r\n            });\r\n        }\r\n    }\r\n    LwgCommon._BtnReturn = _BtnReturn;\r\n    class _GameManagerBtn extends LwgScene.ViewObjBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.viewNameByUI = 'GameManagerBtnObjUI';\r\n            this.style = {\r\n                right: 20,\r\n                bottom: 20,\r\n            };\r\n        }\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new _GameManagerBtn();\r\n            }\r\n            return this._ins;\r\n        }\r\n        createCb() {\r\n            LwgClick.on(LwgClick.effectType, this.view, this, null, null, () => {\r\n                if (Laya.stage.getChildByName(LwgScene.NameBase.GameManager)) {\r\n                    return;\r\n                }\r\n                ;\r\n                Laya.Scene.load(`${LwgPath.VIEWSBASE}${LwgScene.NameBase.GameManager}.json`, Laya.Handler.create(this, (view) => {\r\n                    view.name = LwgScene.NameBase.GameManager;\r\n                    LwgScene.addSceneInStage(view, null, true, false, Laya.stage);\r\n                    view.zOrder = LwgScene.sceneParent.zOrder + 1;\r\n                    LwgScene.goOverlaySceneOpenAni(view);\r\n                }));\r\n            });\r\n        }\r\n    }\r\n    LwgCommon._GameManagerBtn = _GameManagerBtn;\r\n})(LwgCommon || (LwgCommon = {}));\r\nexport var LwgCurrency;\r\n(function (LwgCurrency) {\r\n    class Init {\r\n        constructor(set) {\r\n            LwgCurrency.Gold = new _Gold(set.Gold);\r\n            LwgCurrency.Diamond = new _Diamond(set.Diamond);\r\n            LwgCurrency.Stamina = new _Stamina(set.Stamina);\r\n        }\r\n        get name() {\r\n            return 'LwgCurrency';\r\n        }\r\n    }\r\n    LwgCurrency.Init = Init;\r\n    let SkinUrl;\r\n    (function (SkinUrl) {\r\n        SkinUrl[SkinUrl[\"Lwg/UI/img_corner_12.png\"] = 0] = \"Lwg/UI/img_corner_12.png\";\r\n    })(SkinUrl || (SkinUrl = {}));\r\n    class BaseCurrency extends LwgScene.ViewObjBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.adTip = '看广告才可以获得金币!';\r\n            this.viewNameByUI = 'GoldObjUI';\r\n            this.initialNum = 0;\r\n        }\r\n        get num() {\r\n            return this['_num'];\r\n        }\r\n        set num(val) {\r\n            this['_num'] = val;\r\n        }\r\n        createCb() {\r\n            this.view.num.text = this.num.toString();\r\n            LwgClick.on(LwgClick.EmEffectType.noEffect, this.view, this, (e) => {\r\n                e.stopPropagation();\r\n            }, null, (e) => {\r\n                e.stopPropagation();\r\n                this.btnAddClick && this.btnAddClick();\r\n            });\r\n            LwgEvent.notify(LwgEvent.BaseEvent.redDotHint);\r\n        }\r\n        updateNumOnNode() {\r\n            const num = this.view.num;\r\n            if (num['sheet']) {\r\n                num['value'] = this.num.toString();\r\n            }\r\n            else {\r\n                num['text'] = this.num.toString();\r\n            }\r\n        }\r\n        addNumDisPlayNode(number) {\r\n            this.num += Number(number);\r\n            this.updateNumOnNode();\r\n        }\r\n        subNumDisPlayNode(number) {\r\n            this.num -= Number(number);\r\n            this.updateNumOnNode();\r\n        }\r\n        addDisPlayNode(number) {\r\n            const lbNum = this.view.getChildByName('Num');\r\n            if (lbNum['sheet']) {\r\n                lbNum['value'] = (Number(lbNum['value']) + number).toString();\r\n            }\r\n            else {\r\n                lbNum['text'] = (Number(lbNum['text']) + number).toString();\r\n            }\r\n        }\r\n        addNumNoDisPlayNode(number) {\r\n            this.num += Number(number);\r\n        }\r\n        createOne(width, height, url) {\r\n            const Gold = Laya.Pool.getItemByClass('addGold', Laya.Image);\r\n            Gold.name = 'addGold';\r\n            Gold.alpha = 1;\r\n            Gold.zOrder = 60;\r\n            Gold.width = width;\r\n            Gold.height = height;\r\n            Gold.pivotX = width / 2;\r\n            Gold.pivotY = height / 2;\r\n            if (!url) {\r\n                Gold.skin = SkinUrl[0];\r\n            }\r\n            else {\r\n                Gold.skin = url;\r\n            }\r\n            if (this.view) {\r\n                Gold.zOrder = this.view.zOrder + 10;\r\n            }\r\n            return Gold;\r\n        }\r\n        playGetSingleAni(parent, number, width, height, url, firstPoint, targetPoint, cbStep, cbCompelet) {\r\n            for (let index = 0; index < number; index++) {\r\n                Laya.timer.once(index * 30, this, () => {\r\n                    const Gold = this.createOne(width, height, url);\r\n                    parent.addChild(Gold);\r\n                    LwgAni2D.move_Scale(Gold, 1, firstPoint.x, firstPoint.y, targetPoint.x, targetPoint.y, 1, 350, 0, null, () => {\r\n                        LwgSound.playSound(LwgSound.getMoneyUrl);\r\n                        if (index === number - 1) {\r\n                            Laya.timer.once(200, this, () => {\r\n                                if (cbCompelet) {\r\n                                    cbCompelet();\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (cbStep) {\r\n                                cbStep();\r\n                            }\r\n                        }\r\n                        Gold.removeSelf();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        playGetHeapAni(parent, number, size, url, firstPoint, targetPoint, cbStep, cbCompelet) {\r\n            for (let index = 0; index < number; index++) {\r\n                const Gold = this.createOne(size[0] ? size[0] : 60, size[1] ? size[1] : 60, url ? url : SkinUrl[0]);\r\n                parent = parent ? parent : Laya.stage;\r\n                parent.addChild(Gold);\r\n                firstPoint = firstPoint ? firstPoint : new Laya.Point(Laya.stage.width / 2, Laya.stage.height / 2);\r\n                targetPoint = targetPoint ? targetPoint : new Laya.Point(this.view.x + this.view.icon.x, this.view.y + this.view.icon.y);\r\n                let x = Math.floor(Math.random() * 2) == 1 ? firstPoint.x + Math.random() * 100 : firstPoint.x - Math.random() * 100;\r\n                let y = Math.floor(Math.random() * 2) == 1 ? firstPoint.y + Math.random() * 100 : firstPoint.y - Math.random() * 100;\r\n                LwgAni2D.move_Scale(Gold, 0.5, firstPoint.x, firstPoint.y, x, y, 1, 300, Math.random() * 100 + 100, Laya.Ease.expoIn, () => {\r\n                    LwgAni2D.move_Scale(Gold, 1, Gold.x, Gold.y, targetPoint.x, targetPoint.y, 1, 400, Math.random() * 200 + 100, Laya.Ease.cubicOut, () => {\r\n                        LwgSound.playSound(LwgSound.getMoneyUrl);\r\n                        if (index === number - 1) {\r\n                            Laya.timer.once(200, this, () => {\r\n                                if (cbCompelet) {\r\n                                    cbCompelet();\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (cbStep) {\r\n                                cbStep();\r\n                            }\r\n                        }\r\n                        Gold.destroy(true);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    class _Gold extends BaseCurrency {\r\n        constructor(data) {\r\n            super();\r\n            this.adTip = '看广告才可以获得金币!';\r\n            this.viewNameByUI = 'GoldObjUI';\r\n            this.appearScene = data.appearScene;\r\n            this.initialNum = data.initialNum ? this.initialNum : 0;\r\n            if (data.btnAddClick) {\r\n                this.btnAddClick = data.btnAddClick;\r\n            }\r\n        }\r\n        get num() {\r\n            return Laya.LocalStorage.getItem('Gold/num') ? Number(Laya.LocalStorage.getItem('Gold/num')) : this.initialNum;\r\n        }\r\n        ;\r\n        set num(val) {\r\n            Laya.LocalStorage.setItem('Gold/numm', val.toString());\r\n            LwgEvent.notify(LwgEvent.BaseEvent.redDotHint);\r\n        }\r\n    }\r\n    class _Diamond extends BaseCurrency {\r\n        constructor(data) {\r\n            super();\r\n            this.adTip = '看广告才可以获得钻石!';\r\n            this.viewNameByUI = 'DiamondObjUI';\r\n            this.style = {\r\n                x: 4,\r\n                y: 46,\r\n            };\r\n            this.appearScene = data.appearScene;\r\n            this.initialNum = data.initialNum ? this.initialNum : 0;\r\n            if (data.btnAddClick) {\r\n                this.btnAddClick = data.btnAddClick;\r\n            }\r\n        }\r\n        get num() {\r\n            return Laya.LocalStorage.getItem('Diamond/num') ? Number(Laya.LocalStorage.getItem('Diamond/num')) : this.initialNum;\r\n        }\r\n        set num(val) {\r\n            Laya.LocalStorage.setItem('Diamond/num', val.toString());\r\n            LwgEvent.notify(LwgEvent.BaseEvent.redDotHint);\r\n        }\r\n    }\r\n    class _Stamina extends BaseCurrency {\r\n        constructor(data) {\r\n            super();\r\n            this.maxNum = 100;\r\n            this.initialNum = 50;\r\n            this.addOnceByTime = 1000 * 60 * 5;\r\n            this.addNumByTime = 5;\r\n            this.adTip = '看广告才可以获得体力!';\r\n            this.viewNameByUI = 'StaminaObjUI';\r\n            this.style = {\r\n                x: 174,\r\n                y: 46,\r\n            };\r\n            this.appearScene = data.appearScene;\r\n            this.initialNum = data.initialNum;\r\n            this.maxNum = data.maxNum;\r\n            this.addOnceByTime = data.addOnceByTime;\r\n            this.addNumByTime = data.addNumByTime;\r\n            if (data.btnAddClick) {\r\n                this.btnAddClick = data.btnAddClick;\r\n            }\r\n        }\r\n        get num() {\r\n            return Laya.LocalStorage.getItem('Stamina/num') ? Number(Laya.LocalStorage.getItem('Stamina/num')) : 50;\r\n        }\r\n        set num(val) {\r\n            if (val > this.maxNum) {\r\n                val = this.maxNum;\r\n            }\r\n            Laya.LocalStorage.setItem('Stamina/num', val.toString());\r\n            LwgEvent.notify(LwgEvent.BaseEvent.redDotHint);\r\n        }\r\n        showCb() {\r\n            this.addRules();\r\n        }\r\n        hideCb() {\r\n            Laya.timer.clearAll(this);\r\n        }\r\n        get lastAddTime() {\r\n            if (!Laya.LocalStorage.getItem('Stamina/lastAddTime')) {\r\n                Laya.LocalStorage.setItem('Stamina/lastAddTime', LwgDate.Now.time.toString());\r\n            }\r\n            return Number(Laya.LocalStorage.getItem('Stamina/lastAddTime'));\r\n        }\r\n        set lastAddTime(val) {\r\n            Laya.LocalStorage.setItem('Stamina/lastAddTime', val.toString());\r\n        }\r\n        addRules() {\r\n            LwgTimer.frameLoop(1, this, () => {\r\n                if (Number(this.num) >= this.maxNum) {\r\n                    this.view.countDown.text = '00:00';\r\n                    this.view.boxCountHint.visible = false;\r\n                }\r\n                else {\r\n                    this.view.boxCountHint.visible = true;\r\n                    const time = LwgDate.Now.time - this.lastAddTime;\r\n                    if (LwgDate.Now.time - this.lastAddTime > this.addOnceByTime) {\r\n                        const num = Math.round((LwgDate.Now.time - this.lastAddTime) / this.addOnceByTime) * this.addNumByTime;\r\n                        this.num += num;\r\n                        this.lastAddTime = LwgDate.Now.time;\r\n                        this.view.countDown.text = '00:00';\r\n                    }\r\n                    else {\r\n                        const obj = LwgDate.getHMSByTime(time);\r\n                        const minutes0 = this.addOnceByTime / 1000 / 60 - obj.minutes;\r\n                        const seconds = 59 - obj.seconds;\r\n                        const seconds0 = seconds >= 10 ? seconds : '0' + (seconds);\r\n                        if (minutes0 > 0) {\r\n                            const minutes = (minutes0 - 1) >= 10 ? (minutes0 - 1) : '0' + (minutes0 - 1);\r\n                            this.view.countDown.text = `${minutes}:${seconds0}`;\r\n                        }\r\n                        else {\r\n                            const seconds0 = seconds >= 10 ? seconds : '0' + (seconds);\r\n                            this.view.countDown.text = `00:${seconds0}`;\r\n                        }\r\n                    }\r\n                }\r\n                this.view.num.text = this.num.toString();\r\n            });\r\n        }\r\n    }\r\n})(LwgCurrency || (LwgCurrency = {}));\r\nexport var LwgEvent;\r\n(function (LwgEvent) {\r\n    class BaseEvent {\r\n    }\r\n    BaseEvent.redDotHint = 'redDotHint';\r\n    BaseEvent.guide = 'guide';\r\n    LwgEvent.BaseEvent = BaseEvent;\r\n    LwgEvent.dispatcher = new Laya.EventDispatcher();\r\n    function register(type, caller, listener) {\r\n        if (!caller) {\r\n            console.error(\"事件的执行域必须存在!\");\r\n        }\r\n        LwgEvent.dispatcher.on(type.toString(), caller, listener);\r\n    }\r\n    LwgEvent.register = register;\r\n    function registerOnce(type, caller, listener) {\r\n        if (!caller) {\r\n            console.error(\"事件的执行域必须存在!\");\r\n        }\r\n        LwgEvent.dispatcher.once(type.toString(), caller, listener);\r\n    }\r\n    LwgEvent.registerOnce = registerOnce;\r\n    function notify(type, args) {\r\n        LwgEvent.dispatcher.event(type.toString(), args);\r\n    }\r\n    LwgEvent.notify = notify;\r\n    function off(type, caller, listener) {\r\n        LwgEvent.dispatcher.off(type.toString(), caller, listener);\r\n    }\r\n    LwgEvent.off = off;\r\n    function offAll(type) {\r\n        LwgEvent.dispatcher.offAll(type.toString());\r\n    }\r\n    LwgEvent.offAll = offAll;\r\n    function offAllCaller(caller) {\r\n        LwgEvent.dispatcher.offAllCaller(caller);\r\n    }\r\n    LwgEvent.offAllCaller = offAllCaller;\r\n})(LwgEvent || (LwgEvent = {}));\r\nexport var LwgDate;\r\n(function (LwgDate) {\r\n    class Now {\r\n        static get year() {\r\n            return (new Date()).getFullYear();\r\n        }\r\n        ;\r\n        static get month() {\r\n            return (new Date()).getMonth();\r\n        }\r\n        ;\r\n        static get date() {\r\n            return (new Date()).getDate();\r\n        }\r\n        ;\r\n        static get day() {\r\n            return (new Date()).getDay();\r\n        }\r\n        ;\r\n        static get hours() {\r\n            return (new Date()).getHours();\r\n        }\r\n        ;\r\n        static get minutes() {\r\n            return (new Date()).getMinutes();\r\n        }\r\n        ;\r\n        static get seconds() {\r\n            return (new Date()).getSeconds();\r\n        }\r\n        ;\r\n        static get milliseconds() {\r\n            return (new Date()).getMilliseconds();\r\n        }\r\n        ;\r\n        static get toLocaleDateString() {\r\n            return (new Date()).toLocaleDateString();\r\n        }\r\n        ;\r\n        static get toLocaleTimeString() {\r\n            return (new Date()).toLocaleTimeString();\r\n        }\r\n        ;\r\n        static get time() {\r\n            return (new Date()).getTime();\r\n        }\r\n        ;\r\n        static getHoursDiffLastTime(lastTime) {\r\n            return getSumHoursByTime(lastTime, this.time);\r\n        }\r\n        ;\r\n        static getMinutsDiffLastTime(lastTime) {\r\n            return getSumMinutesByTime(lastTime, this.time);\r\n        }\r\n        static getSecondsDiffLastTime(lastTime) {\r\n            return getSumSecondsByTime(lastTime, this.time);\r\n        }\r\n        static getHoursDiffNextTime(nextTime) {\r\n            return getSumHoursByTime(this.time, nextTime);\r\n        }\r\n        ;\r\n        static getMinutsDiffNextTime(nextTime) {\r\n            return getSumMinutesByTime(this.time, nextTime);\r\n        }\r\n        static getSecondsDiffNextTime(nextTime) {\r\n            return getSumSecondsByTime(this.time, nextTime);\r\n        }\r\n        static getTimeByMilliseconds(milliseconds) {\r\n            return this.time + milliseconds;\r\n        }\r\n        static getTimeByScends(seconds) {\r\n            return this.time + seconds * 1000;\r\n        }\r\n        static getTimeByMinutes(minutes) {\r\n            return this.time + minutes * 60 * 1000;\r\n        }\r\n        static getTimeByHours(hours) {\r\n            return this.time + hours * 60 * 60 * 1000;\r\n        }\r\n    }\r\n    LwgDate.Now = Now;\r\n    function getTimeByMillisecondsOntime(time, seconds) {\r\n        return time + seconds;\r\n    }\r\n    LwgDate.getTimeByMillisecondsOntime = getTimeByMillisecondsOntime;\r\n    function getTimeByScendsOntime(time, seconds) {\r\n        return time + seconds * 1000;\r\n    }\r\n    LwgDate.getTimeByScendsOntime = getTimeByScendsOntime;\r\n    function getTimeByMinutesOntime(time, minutes) {\r\n        return time + minutes * 60 * 1000;\r\n    }\r\n    LwgDate.getTimeByMinutesOntime = getTimeByMinutesOntime;\r\n    function getTimeByHoursOntime(time, hours) {\r\n        return time + hours * 60 * 60 * 1000;\r\n    }\r\n    LwgDate.getTimeByHoursOntime = getTimeByHoursOntime;\r\n    function getHMSByTime(msec) {\r\n        let hours = parseInt(`${msec / (1000 * 60 * 60)}`).toString();\r\n        let minutes = parseInt(`${(msec % (1000 * 60 * 60)) / (1000 * 60)}`).toString();\r\n        let seconds = parseInt(`${(msec % (1000 * 60)) / 1000}`).toString();\r\n        return {\r\n            hours: +hours,\r\n            minutes: +minutes,\r\n            seconds: +seconds,\r\n        };\r\n    }\r\n    LwgDate.getHMSByTime = getHMSByTime;\r\n    function getHMSFormatByTowTime(startTimes, endTimes) {\r\n        let msec = (Math.floor(endTimes / 1000) - Math.floor(startTimes / 1000)) * 1000;\r\n        const timeObj = getHMSByTime(msec);\r\n        const hours = timeObj.hours < 10 ? '0' + timeObj.hours : timeObj.hours.toString();\r\n        const minutes = timeObj.minutes < 10 ? '0' + timeObj.minutes : timeObj.minutes.toString();\r\n        const seconds = timeObj.seconds < 10 ? '0' + timeObj.seconds : timeObj.seconds.toString();\r\n        return hours + ':' + minutes + ':' + seconds;\r\n    }\r\n    LwgDate.getHMSFormatByTowTime = getHMSFormatByTowTime;\r\n    function getSumMinutesByTime(startTimes, endTimes) {\r\n        const msec = (Math.floor(endTimes / 1000) - Math.floor(startTimes / 1000)) * 1000;\r\n        const timeObj = getHMSByTime(msec);\r\n        return timeObj.hours * 60 + timeObj.minutes + timeObj.seconds / 60;\r\n    }\r\n    LwgDate.getSumMinutesByTime = getSumMinutesByTime;\r\n    function getSumSecondsByTime(startTimes, endTimes) {\r\n        const msec = (Math.floor(endTimes / 1000) - Math.floor(startTimes / 1000)) * 1000;\r\n        const timeObj = getHMSByTime(msec);\r\n        return timeObj.hours * 3600 + timeObj.minutes * 60 + timeObj.seconds;\r\n    }\r\n    LwgDate.getSumSecondsByTime = getSumSecondsByTime;\r\n    function getSumHoursByTime(startTimes, endTimes) {\r\n        const msec = (Math.floor(endTimes / 1000) - Math.floor(startTimes / 1000)) * 1000;\r\n        const timeObj = getHMSByTime(msec);\r\n        return timeObj.hours + timeObj.minutes * 60 + timeObj.seconds * 3600;\r\n    }\r\n    LwgDate.getSumHoursByTime = getSumHoursByTime;\r\n})(LwgDate || (LwgDate = {}));\r\nexport var LwgTimer;\r\n(function (LwgTimer) {\r\n    LwgTimer.onOff = true;\r\n    function frameLoop(delay, caller, method, immediately, args, coverBefore) {\r\n        if (immediately) {\r\n            if (LwgTimer.onOff) {\r\n                method();\r\n            }\r\n        }\r\n        Laya.timer.frameLoop(delay, caller, () => {\r\n            if (LwgTimer.onOff) {\r\n                method();\r\n            }\r\n        }, args, coverBefore);\r\n    }\r\n    LwgTimer.frameLoop = frameLoop;\r\n    function frameRandomLoop(delay1, delay2, caller, method, immediately, args, coverBefore) {\r\n        if (immediately) {\r\n            if (LwgTimer.onOff) {\r\n                method();\r\n            }\r\n        }\r\n        var func = () => {\r\n            let delay = LwgTools.Num.randomOneInt(delay1, delay2);\r\n            Laya.timer.frameOnce(delay, caller, () => {\r\n                if (LwgTimer.onOff) {\r\n                    method();\r\n                    func();\r\n                }\r\n            }, args, coverBefore);\r\n        };\r\n        func();\r\n    }\r\n    LwgTimer.frameRandomLoop = frameRandomLoop;\r\n    function frameNumLoop(delay, num, caller, method, methodCompelet, immediately, args, coverBefore) {\r\n        immediately && LwgTimer.onOff && method();\r\n        if (num <= 0) {\r\n            return;\r\n        }\r\n        let num0 = 0;\r\n        var func = () => {\r\n            if (LwgTimer.onOff) {\r\n                num0++;\r\n                if (num0 >= num) {\r\n                    method();\r\n                    if (methodCompelet) {\r\n                        methodCompelet();\r\n                    }\r\n                    Laya.timer.clear(caller, func);\r\n                }\r\n                else {\r\n                    method();\r\n                }\r\n            }\r\n        };\r\n        Laya.timer.frameLoop(delay, caller, func, args, coverBefore);\r\n    }\r\n    LwgTimer.frameNumLoop = frameNumLoop;\r\n    function numRandomLoop(delay1, delay2, num, caller, method, methodCompelet, immediately, args, coverBefore) {\r\n        immediately && LwgTimer.onOff && method();\r\n        if (num <= 0) {\r\n            return;\r\n        }\r\n        let num0 = 0;\r\n        var func = () => {\r\n            let delay = LwgTools.Num.randomOneInt(delay1, delay2);\r\n            Laya.timer.frameOnce(delay, caller, () => {\r\n                if (LwgTimer.onOff) {\r\n                    num0++;\r\n                    if (num0 >= num) {\r\n                        method();\r\n                        methodCompelet();\r\n                    }\r\n                    else {\r\n                        method();\r\n                        func();\r\n                    }\r\n                }\r\n            }, args, coverBefore);\r\n        };\r\n        func();\r\n    }\r\n    LwgTimer.numRandomLoop = numRandomLoop;\r\n    function frameNumRandomLoop(delay1, delay2, num, caller, method, methodCompelet, immediately, args, coverBefore) {\r\n        immediately && LwgTimer.onOff && method();\r\n        if (num === 0) {\r\n            return;\r\n        }\r\n        let num0 = 0;\r\n        var func = () => {\r\n            let delay = LwgTools.Num.randomOneInt(delay1, delay2);\r\n            Laya.timer.frameOnce(delay, caller, () => {\r\n                if (LwgTimer.onOff) {\r\n                    num0++;\r\n                    if (num0 >= num) {\r\n                        method();\r\n                        methodCompelet && methodCompelet();\r\n                    }\r\n                    else {\r\n                        method();\r\n                        func();\r\n                    }\r\n                }\r\n            }, args, coverBefore);\r\n        };\r\n        func();\r\n    }\r\n    LwgTimer.frameNumRandomLoop = frameNumRandomLoop;\r\n    function frameOnce(delay, caller, afterMethod, beforeMethod, args, coverBefore) {\r\n        beforeMethod && beforeMethod();\r\n        Laya.timer.frameOnce(delay, caller, () => {\r\n            if (LwgTimer.onOff) {\r\n                afterMethod();\r\n            }\r\n        }, args, coverBefore);\r\n    }\r\n    LwgTimer.frameOnce = frameOnce;\r\n    function frameNumOnce(delay, num, caller, afterMethod, beforeMethod, args, coverBefore) {\r\n        for (let index = 0; index < num; index++) {\r\n            beforeMethod && beforeMethod();\r\n            Laya.timer.frameOnce(delay, caller, () => {\r\n                if (LwgTimer.onOff) {\r\n                    afterMethod();\r\n                }\r\n            }, args, coverBefore);\r\n        }\r\n    }\r\n    LwgTimer.frameNumOnce = frameNumOnce;\r\n    function loop(delay, caller, method, immediately, args, coverBefore) {\r\n        if (immediately) {\r\n            if (LwgTimer.onOff) {\r\n                method();\r\n            }\r\n        }\r\n        Laya.timer.loop(delay, caller, () => {\r\n            if (LwgTimer.onOff) {\r\n                method();\r\n            }\r\n        }, args, coverBefore);\r\n    }\r\n    LwgTimer.loop = loop;\r\n    function randomLoop(delay1, delay2, caller, method, immediately, args, coverBefore) {\r\n        if (immediately) {\r\n            if (LwgTimer.onOff) {\r\n                method();\r\n            }\r\n        }\r\n        var func = () => {\r\n            let delay = LwgTools.Num.randomOneInt(delay1, delay2);\r\n            Laya.timer.once(delay, caller, () => {\r\n                if (LwgTimer.onOff) {\r\n                    method();\r\n                    func();\r\n                }\r\n            }, args, coverBefore);\r\n        };\r\n        func();\r\n    }\r\n    LwgTimer.randomLoop = randomLoop;\r\n    function numLoop(delay, num, caller, method, methodCompelet, immediately, args, coverBefore) {\r\n        if (immediately) {\r\n            method();\r\n        }\r\n        let num0 = 0;\r\n        var func = () => {\r\n            if (LwgTimer.onOff) {\r\n                num0++;\r\n                if (num0 > num) {\r\n                    method();\r\n                    if (methodCompelet) {\r\n                        methodCompelet();\r\n                    }\r\n                    Laya.timer.clear(caller, func);\r\n                }\r\n                else {\r\n                    method();\r\n                }\r\n            }\r\n        };\r\n        Laya.timer.loop(delay, caller, func, args, coverBefore);\r\n    }\r\n    LwgTimer.numLoop = numLoop;\r\n    function once(delay, caller, afterMethod, beforeMethod, args, coverBefore) {\r\n        if (beforeMethod) {\r\n            beforeMethod();\r\n        }\r\n        Laya.timer.once(delay, caller, () => {\r\n            afterMethod();\r\n        }, args, coverBefore);\r\n    }\r\n    LwgTimer.once = once;\r\n    function clearAll(caller) {\r\n        Laya.timer.clearAll(caller);\r\n    }\r\n    LwgTimer.clearAll = clearAll;\r\n    function clear(caller, func) {\r\n        Laya.timer.clear(caller, func);\r\n    }\r\n    LwgTimer.clear = clear;\r\n})(LwgTimer || (LwgTimer = {}));\r\nexport var LwgAdaptive;\r\n(function (LwgAdaptive) {\r\n    class Init {\r\n        constructor(_width, _height) {\r\n            LwgAdaptive.width = _width;\r\n            LwgAdaptive.height = _height;\r\n        }\r\n        get name() {\r\n            return 'LwgAdaptive';\r\n        }\r\n    }\r\n    LwgAdaptive.Init = Init;\r\n    LwgAdaptive.width = 720;\r\n    LwgAdaptive.height = 1280;\r\n    LwgAdaptive.Use = {\r\n        get value() {\r\n            return this['Adaptive/value'] ? this['Adaptive/value'] : null;\r\n        },\r\n        set value(val) {\r\n            this['Adaptive/value'] = val;\r\n        }\r\n    };\r\n    function stageWidth(arr) {\r\n        for (let index = 0; index < arr.length; index++) {\r\n            const element = arr[index];\r\n            if (element.pivotX == 0 && element.width) {\r\n                element.x = element.x / LwgAdaptive.Use.value[0] * Laya.stage.width + element.width / 2;\r\n            }\r\n            else {\r\n                element.x = element.x / LwgAdaptive.Use.value[0] * Laya.stage.width;\r\n            }\r\n        }\r\n    }\r\n    LwgAdaptive.stageWidth = stageWidth;\r\n    function stageHeight(arr) {\r\n        for (let index = 0; index < arr.length; index++) {\r\n            const element = arr[index];\r\n            if (element.pivotY == 0 && element.height) {\r\n                element.y = element.y / LwgAdaptive.Use.value[1] * element.scaleX * Laya.stage.height + element.height / 2;\r\n            }\r\n            else {\r\n                element.y = element.y / LwgAdaptive.Use.value[1] * element.scaleX * Laya.stage.height;\r\n            }\r\n        }\r\n    }\r\n    LwgAdaptive.stageHeight = stageHeight;\r\n    function center(arr, target) {\r\n        for (let index = 0; index < arr.length; index++) {\r\n            const element = arr[index];\r\n            if (element.width > 0) {\r\n                element.x = target.width / 2 - (element.width / 2 - element.pivotX) * element.scaleX;\r\n            }\r\n            else {\r\n                element.x = target.width / 2;\r\n            }\r\n            if (element.height > 0) {\r\n                element.y = target.height / 2 - (element.height / 2 - element.pivotY) * element.scaleY;\r\n            }\r\n            else {\r\n                element.y = target.height / 2;\r\n            }\r\n        }\r\n    }\r\n    LwgAdaptive.center = center;\r\n})(LwgAdaptive || (LwgAdaptive = {}));\r\nexport var LwgStorage;\r\n(function (LwgStorage) {\r\n    class admin {\r\n        removeSelf() { }\r\n        func() { }\r\n    }\r\n    class TpNumVariable extends admin {\r\n    }\r\n    LwgStorage.TpNumVariable = TpNumVariable;\r\n    class TpStrVariable extends admin {\r\n    }\r\n    LwgStorage.TpStrVariable = TpStrVariable;\r\n    class TpBoolVariable extends admin {\r\n    }\r\n    LwgStorage.TpBoolVariable = TpBoolVariable;\r\n    class TpArrayVariable extends admin {\r\n    }\r\n    LwgStorage.TpArrayVariable = TpArrayVariable;\r\n    class TpArrayArrVariable extends admin {\r\n    }\r\n    LwgStorage.TpArrayArrVariable = TpArrayArrVariable;\r\n    class Object extends admin {\r\n    }\r\n    LwgStorage.Object = Object;\r\n    function number(name, _func, initial) {\r\n        if (!this[`_num${name}`]) {\r\n            const obj = {\r\n                get value() {\r\n                    if (Laya.LocalStorage.getItem(name)) {\r\n                        return Number(Laya.LocalStorage.getItem(name));\r\n                    }\r\n                    else {\r\n                        initial = initial ? initial : 0;\r\n                        Laya.LocalStorage.setItem(name, initial.toString());\r\n                        return initial;\r\n                    }\r\n                },\r\n                set value(data) {\r\n                    Laya.LocalStorage.setItem(name, data.toString());\r\n                    this['func']();\r\n                },\r\n                removeSelf() {\r\n                    Laya.LocalStorage.removeItem(name);\r\n                },\r\n                func() {\r\n                    this['_func'] && this['_func']();\r\n                }\r\n            };\r\n            this[`_num${name}`] = obj;\r\n        }\r\n        if (_func) {\r\n            this[`_num${name}`]['_func'] = _func;\r\n        }\r\n        return this[`_num${name}`];\r\n    }\r\n    LwgStorage.number = number;\r\n    function string(name, _func, initial) {\r\n        if (!this[`_str${name}`]) {\r\n            this[`_str${name}`] = {\r\n                get value() {\r\n                    if (Laya.LocalStorage.getItem(name)) {\r\n                        return Laya.LocalStorage.getItem(name);\r\n                    }\r\n                    else {\r\n                        initial = initial ? initial : null;\r\n                        Laya.LocalStorage.setItem(name, initial.toString());\r\n                        return initial;\r\n                    }\r\n                },\r\n                set value(data) {\r\n                    Laya.LocalStorage.setItem(name, data.toString());\r\n                    this['func']();\r\n                },\r\n                removeSelf() {\r\n                    Laya.LocalStorage.removeItem(name);\r\n                },\r\n                func() {\r\n                    this['_func'] && this['_func']();\r\n                }\r\n            };\r\n        }\r\n        if (_func) {\r\n            this[`_str${name}`]['_func'] = _func;\r\n        }\r\n        return this[`_str${name}`];\r\n    }\r\n    LwgStorage.string = string;\r\n    function bool(name, _func, initial) {\r\n        if (!this[`_bool${name}`]) {\r\n            this[`_bool${name}`] = {\r\n                get value() {\r\n                    if (Laya.LocalStorage.getItem(name)) {\r\n                        if (Laya.LocalStorage.getItem(name) === \"false\") {\r\n                            return false;\r\n                        }\r\n                        else if (Laya.LocalStorage.getItem(name) === \"true\") {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (initial) {\r\n                            Laya.LocalStorage.setItem(name, \"true\");\r\n                        }\r\n                        else {\r\n                            Laya.LocalStorage.setItem(name, \"false\");\r\n                        }\r\n                        this['func']();\r\n                        return initial;\r\n                    }\r\n                },\r\n                set value(bool) {\r\n                    bool = bool ? \"true\" : \"false\";\r\n                    Laya.LocalStorage.setItem(name, bool.toString());\r\n                },\r\n                removeSelf() {\r\n                    Laya.LocalStorage.removeItem(name);\r\n                },\r\n                func() {\r\n                    _func && _func();\r\n                }\r\n            };\r\n        }\r\n        if (_func) {\r\n            this[`_bool${name}`]['_func'] = _func;\r\n        }\r\n        return this[`_bool${name}`];\r\n    }\r\n    LwgStorage.bool = bool;\r\n    function array(name, _func, initial) {\r\n        if (!this[`_array${name}`]) {\r\n            this[`_array${name}`] = {\r\n                get value() {\r\n                    try {\r\n                        let data = Laya.LocalStorage.getJSON(name);\r\n                        if (data) {\r\n                            return JSON.parse(data);\r\n                        }\r\n                        else {\r\n                            initial = initial ? initial : [];\r\n                            Laya.LocalStorage.setJSON(name, JSON.stringify(initial));\r\n                            this['func']();\r\n                            return initial;\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        return [];\r\n                    }\r\n                },\r\n                set value(array) {\r\n                    Laya.LocalStorage.setJSON(name, JSON.stringify(array));\r\n                },\r\n                removeSelf() {\r\n                    Laya.LocalStorage.removeItem(name);\r\n                },\r\n                func() {\r\n                    _func && _func();\r\n                }\r\n            };\r\n        }\r\n        if (_func) {\r\n            this[`_array${name}`]['_func'] = _func;\r\n        }\r\n        return this[`_array${name}`];\r\n    }\r\n    LwgStorage.array = array;\r\n    function object(name, _func, initial) {\r\n        if (!this[`_obj${name}`]) {\r\n            this[`_obj${name}`] = {\r\n                get value() {\r\n                    try {\r\n                        let data = Laya.LocalStorage.getJSON(name);\r\n                        if (data) {\r\n                            return JSON.parse(data);\r\n                        }\r\n                        else {\r\n                            initial = initial ? initial : {};\r\n                            Laya.LocalStorage.setJSON(name, JSON.stringify(initial));\r\n                            this['func']();\r\n                            return initial;\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        return {};\r\n                    }\r\n                },\r\n                set value(array) {\r\n                    Laya.LocalStorage.setJSON(name, JSON.stringify(array));\r\n                },\r\n                removeSelf() {\r\n                    Laya.LocalStorage.removeItem(name);\r\n                },\r\n                func() {\r\n                    _func && _func();\r\n                }\r\n            };\r\n        }\r\n        if (_func) {\r\n            this[`_obj${name}`]['_func'] = _func;\r\n        }\r\n        return this[`_obj${name}`];\r\n    }\r\n    LwgStorage.object = object;\r\n    function arrayArray(name, _func, initial) {\r\n        if (!this[`arrayArr${name}`]) {\r\n            this[`arrayArr${name}`] = {\r\n                get value() {\r\n                    try {\r\n                        let data = Laya.LocalStorage.getJSON(name);\r\n                        if (data) {\r\n                            return JSON.parse(data);\r\n                            ;\r\n                        }\r\n                        else {\r\n                            initial = initial ? initial : [];\r\n                            Laya.LocalStorage.setItem(name, initial.toString());\r\n                            return initial;\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        return [];\r\n                    }\r\n                },\r\n                set value(array) {\r\n                    Laya.LocalStorage.setJSON(name, JSON.stringify(array));\r\n                    this['func']();\r\n                },\r\n                removeSelf() {\r\n                    Laya.LocalStorage.removeItem(name);\r\n                },\r\n                func() {\r\n                    _func && _func();\r\n                }\r\n            };\r\n        }\r\n        if (_func) {\r\n            this[`arrayArr${name}`]['_func'] = _func;\r\n        }\r\n        return this[`arrayArr${name}`];\r\n    }\r\n    LwgStorage.arrayArray = arrayArray;\r\n})(LwgStorage || (LwgStorage = {}));\r\nexport var LwgData;\r\n(function (LwgData) {\r\n    class BaseTable {\r\n        constructor(arr) {\r\n            this.arr = [];\r\n            this.arr = arr;\r\n        }\r\n        getObjByID(ID) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.ID == ID) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        eachDataArr(eachCb, endCb) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                eachCb && eachCb(element, index);\r\n                if (index == this.arr.length - 1) {\r\n                    endCb && endCb();\r\n                }\r\n            }\r\n        }\r\n        getObjArrByProNameAndVal(proName, val) {\r\n            const arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element[proName] !== undefined && element[proName] === val) {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        getObjFirstByProNameAndVal(proName, val) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element[proName] && element[proName] == val) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    LwgData.BaseTable = BaseTable;\r\n    class ItmeTable extends BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        getItemArrObjByID(ID) {\r\n            const obj = this.getObjByID(ID);\r\n            const itemArr = [];\r\n            const numberArr = [];\r\n            const weightArr = [];\r\n            for (let i = 1; i < 200; i++) {\r\n                const itemElement = obj['item' + i];\r\n                if (itemElement) {\r\n                    const numberElement = obj['number' + i];\r\n                    const weightElement = obj['weight' + i];\r\n                    for (let j = 0; j < itemElement.length; j++) {\r\n                        const item = itemElement[j];\r\n                        if (item) {\r\n                            const number = numberElement[j];\r\n                            const weight = weightElement[j];\r\n                            itemArr.push(item);\r\n                            numberArr.push(number);\r\n                            weightArr.push(weight);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            const objArr = {\r\n                itemArr: itemArr,\r\n                numberArr: numberArr,\r\n                weightArr: weightArr,\r\n            };\r\n            return objArr;\r\n        }\r\n        ranSuperpositionWeight(ID) {\r\n            const objArr = this.getItemArrObjByID(ID);\r\n            let sumWeight = 0;\r\n            for (let index = 0; index < objArr.weightArr.length; index++) {\r\n                sumWeight += objArr.weightArr[index];\r\n            }\r\n            let index0 = 0;\r\n            const ran = Math.floor(Math.random() * sumWeight);\r\n            let sumWeight1;\r\n            let sumWeight2;\r\n            for (let index = 0; index < objArr.weightArr.length; index++) {\r\n                if (index == 0) {\r\n                    if (0 < ran && ran < objArr.weightArr[index]) {\r\n                        index0 = index;\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    sumWeight1 = 0;\r\n                    for (let i = 0; i < index - 1; i++) {\r\n                        sumWeight1 += objArr.weightArr[i];\r\n                    }\r\n                    sumWeight2 = 0;\r\n                    for (let j = 0; j < index; j++) {\r\n                        sumWeight2 += objArr.weightArr[j];\r\n                    }\r\n                    if (ran >= sumWeight1 && ran < sumWeight2) {\r\n                        index0 = index - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            const obj = {\r\n                index: index0,\r\n                ID: objArr.itemArr[index0],\r\n                number: objArr.numberArr[index0],\r\n                weight: objArr.weightArr[index0],\r\n            };\r\n            return obj;\r\n        }\r\n        randSingleWeight() {\r\n        }\r\n        getItemGroupObjByIndex(ID, index) {\r\n            const obj = this.getItemArrObjByID(ID);\r\n            const obj0 = {\r\n                index: index,\r\n                ID: obj.itemArr[index],\r\n                number: obj.numberArr[index],\r\n                weight: obj.weightArr[index],\r\n            };\r\n            return obj0;\r\n        }\r\n        getRanItemIdArrByID(ID, index) {\r\n            const obj = this.getItemArrObjByID(ID);\r\n            const arr = [];\r\n            for (let index = 0; index < obj.weightArr.length; index++) {\r\n                const element = obj.itemArr[index];\r\n                Math.floor((Math.random() * 100));\r\n                element;\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    LwgData.ItmeTable = ItmeTable;\r\n    class TasKTable {\r\n    }\r\n    LwgData.TasKTable = TasKTable;\r\n    class ItemBase extends LwgScene.ObjectBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.itemData = null;\r\n            this.itemButtonOn = false;\r\n        }\r\n        get itemIndex() { return this['item/itemIndex']; }\r\n        set itemIndex(_dataIndex) { this['item/itemIndex'] = _dataIndex; }\r\n        get itemArrName() { return this['item/itemArrName']; }\r\n        set itemArrName(name) {\r\n            this['item/itemArrName'] = name;\r\n        }\r\n        itemRender() { }\r\n        ;\r\n        itemButton() { }\r\n        ;\r\n        itemOnStart() { }\r\n        ;\r\n        lwgOnStart() {\r\n            this.itemOnStart();\r\n            if (!this.itemButtonOn) {\r\n                this.itemButton();\r\n            }\r\n        }\r\n    }\r\n    LwgData.ItemBase = ItemBase;\r\n    class EntiretyTable {\r\n        constructor(tableName, tableArr = null, localStorage = true, addCompare = true, lastVtableName, lastProArr) {\r\n            this.tableName = 'table';\r\n            this.lastArr = [];\r\n            this.localStorage = false;\r\n            if (tableName) {\r\n                this.tableName = tableName;\r\n                if (localStorage) {\r\n                    this.localStorage = localStorage;\r\n                    if (addCompare) {\r\n                        this.arr = compareMerge(tableArr, tableName, 'name');\r\n                    }\r\n                    else {\r\n                        this.arr = compare(tableArr, tableName);\r\n                    }\r\n                    if (lastVtableName) {\r\n                        if (lastProArr) {\r\n                            this.compareLastInforByPro(lastVtableName, lastProArr);\r\n                        }\r\n                        else {\r\n                            this.compareLastDefaultPro(lastVtableName);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.arr = tableArr;\r\n                }\r\n            }\r\n        }\r\n        set list(list) {\r\n            this[`_${this.tableName}list`] = list;\r\n            list.array = this.arr;\r\n            list.selectEnable = false;\r\n            list.vScrollBarSkin = \"\";\r\n            list.renderHandler = new Laya.Handler(this, (cell, index) => {\r\n                if (this.listRenderScript) {\r\n                    let item = cell.getComponent(this.listRenderScript);\r\n                    if (!item) {\r\n                        item = cell.addComponent(this.listRenderScript);\r\n                    }\r\n                    item.itemData = this.listArray[index];\r\n                    item.itemIndex = index;\r\n                    item.itemRender();\r\n                    if (!item.itemButtonOn) {\r\n                        item.itemButton();\r\n                    }\r\n                }\r\n            });\r\n            list.selectHandler = new Laya.Handler(this, (index) => {\r\n                this.listSelect && this.listSelect(index);\r\n            });\r\n            this[`${this.tableName}_List`].refresh();\r\n        }\r\n        get listArray() {\r\n            return this.list.array;\r\n        }\r\n        set listArray(arr) {\r\n            this.list.array = arr;\r\n            this.list.scrollTo(0);\r\n            this.refreshAndStorage();\r\n        }\r\n        refreshAndStorage() {\r\n            if (this.localStorage) {\r\n                Laya.LocalStorage.setJSON(this.tableName, JSON.stringify(this.arr));\r\n            }\r\n            if (this.list) {\r\n                this.list.refresh();\r\n            }\r\n        }\r\n        compareLastInforByPro(lastVtableName, proArr) {\r\n            this.lastArr = this.getLastVersion(lastVtableName);\r\n            for (let index = 0; index < this.lastArr.length; index++) {\r\n                const elementLast = this.lastArr[index];\r\n                for (let index = 0; index < this.arr.length; index++) {\r\n                    const element = this.arr[index];\r\n                    if (elementLast.name === element.name) {\r\n                        for (let index = 0; index < proArr.length; index++) {\r\n                            const proName = proArr[index];\r\n                            element[proName] = elementLast[proName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        compareLastDefaultPro(lastVtableName) {\r\n            this.lastArr = this.getLastVersion(lastVtableName);\r\n            if (this.lastArr.length > 0) {\r\n                for (let i = 0; i < this.lastArr.length; i++) {\r\n                    const _lastelement = this.lastArr[i];\r\n                    for (let j = 0; j < this.arr.length; j++) {\r\n                        const element = this.arr[j];\r\n                        if (_lastelement.complete) {\r\n                            element.complete = true;\r\n                        }\r\n                        if (_lastelement.degreeNum > element.degreeNum) {\r\n                            element.degreeNum = _lastelement.degreeNum;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        getLastVersion(lastVtableName) {\r\n            let dataArr = [];\r\n            try {\r\n                if (Laya.LocalStorage.getJSON(lastVtableName)) {\r\n                    dataArr = JSON.parse(Laya.LocalStorage.getJSON(lastVtableName));\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.log(lastVtableName + '前版本不存在！');\r\n            }\r\n            return dataArr;\r\n        }\r\n        getProperty(name, pro) {\r\n            let value;\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.name === name) {\r\n                        value = element[pro];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n        ;\r\n        getConditionNumByName(name, pro) {\r\n            let value;\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.name === name) {\r\n                        value = element.condition;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n        ;\r\n        getPitchIndexInArr() {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.name === this.pitchName) {\r\n                    return index;\r\n                }\r\n            }\r\n        }\r\n        cumsumProByCompelet(proName) {\r\n            let sum = 0;\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.complete && element[proName]) {\r\n                    sum += element[proName];\r\n                }\r\n            }\r\n            return sum;\r\n        }\r\n        cumsumProByAll(proName) {\r\n            let sum = 0;\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element[proName]) {\r\n                    sum += element[proName];\r\n                }\r\n            }\r\n            return sum;\r\n        }\r\n        getPitchIndexInListArr() {\r\n            if (this.list) {\r\n                for (let index = 0; index < this.list.array.length; index++) {\r\n                    const element = this.list.array[index];\r\n                    if (element.name === this.pitchName) {\r\n                        return index;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        listTweenToPitch(time, func) {\r\n            const index = this.getPitchIndexInListArr();\r\n            index && this.list.tweenTo(index, time, Laya.Handler.create(this, () => {\r\n                func && func();\r\n            }));\r\n        }\r\n        listTweenToDiffIndexByPitch(diffIndex, time, func) {\r\n            const index = this.getPitchIndexInListArr();\r\n            index && this.list.tweenTo(index + diffIndex, time, Laya.Handler.create(this, () => {\r\n                func && func();\r\n            }));\r\n        }\r\n        listScrollToFirstByLast() {\r\n            const index = this.list.array.length - 1;\r\n            index && this.list.scrollTo(index);\r\n        }\r\n        setProperty(name, pro, value) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.name == name) {\r\n                        element[pro] = value;\r\n                        this.refreshAndStorage();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n        ;\r\n        setCompleteByNameArr(nameArr) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                for (let index = 0; index < nameArr.length; index++) {\r\n                    const name = nameArr[index];\r\n                    if (element.name === name) {\r\n                        element.complete = true;\r\n                    }\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        ;\r\n        getFirstObjByPro(proName, value) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element[proName] === value) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        getObjByName(name) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.name == name) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        getObjByID(ID) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.ID == ID) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setObjCompeletByID(ID) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.ID == ID) {\r\n                        element.complete = true;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        getFirstObjByLevel(level) {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.level == level) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        getObjArrByLevel(level) {\r\n            const arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.level == level) {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        setAllComplete() {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                element.complete = true;\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        setAllCompleteDelay(delay, eachFrontFunc, eachEndFunc, comFunc) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                LwgTimer.once(delay * index, this, () => {\r\n                    const element = this.arr[index];\r\n                    eachFrontFunc && eachFrontFunc(element.complete);\r\n                    element.complete = true;\r\n                    eachEndFunc && eachEndFunc();\r\n                    if (index === this.arr.length - 1) {\r\n                        comFunc && comFunc();\r\n                    }\r\n                    this.refreshAndStorage();\r\n                });\r\n            }\r\n        }\r\n        setAllOtherComplete() {\r\n            this.refreshAndStorage();\r\n        }\r\n        addProValueForAll(pro, valueFunc) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                element[pro] += valueFunc();\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        setPitchProperty(pro, value) {\r\n            const obj = this.getPitchObj();\r\n            obj[pro] = value;\r\n            this.refreshAndStorage();\r\n            return value;\r\n        }\r\n        ;\r\n        getPitchProperty(pro) {\r\n            const obj = this.getPitchObj();\r\n            return obj[pro];\r\n        }\r\n        ;\r\n        randomOneObjByPro(proName, value) {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (value) {\r\n                        if (element[proName] && element[proName] == value) {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (element[proName]) {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (arr.length == 0) {\r\n                return null;\r\n            }\r\n            else {\r\n                let any = LwgTools.Arr.randomGetOne(arr);\r\n                return any;\r\n            }\r\n        }\r\n        randomOneObj() {\r\n            const index = LwgTools.Num.randomOneBySection(0, this.arr.length - 1, true);\r\n            return this.arr[index];\r\n        }\r\n        randomCountObj(count) {\r\n            const indexArr = LwgTools.Num.randomCountBySection(0, this.arr.length - 1, count, true);\r\n            const arr = [];\r\n            for (let i = 0; i < this.arr.length; i++) {\r\n                for (let j = 0; j < indexArr.length; j++) {\r\n                    if (i === indexArr[j]) {\r\n                        arr.push(this.arr[i]);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        getArrByCompelet() {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.complete) {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        getArrByNoCompelet() {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (!element.complete) {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        getArrByUnlockWay(unlockWay) {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.unlockWay === unlockWay) {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        getArrByProperty(proName, value) {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element[proName] && element[proName] == value) {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        getArrByNoProperty(proName, value) {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element[proName] && element[proName] !== value) {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        setArrByproName(proName, value) {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element[proName]) {\r\n                        element[proName] == value;\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n            return arr;\r\n        }\r\n        checkCondition(name, number, func) {\r\n            let com = null;\r\n            number = number == undefined ? 1 : number;\r\n            let degreeNum = this.getProperty(name, 'degreeNum');\r\n            let condition = this.getProperty(name, 'condition');\r\n            let complete = this.getProperty(name, 'complete');\r\n            if (!complete) {\r\n                if (condition <= degreeNum + number) {\r\n                    this.setProperty(name, 'degreeNum', condition);\r\n                    this.setProperty(name, 'complete', true);\r\n                    com = true;\r\n                }\r\n                else {\r\n                    this.setProperty(name, 'degreeNum', degreeNum + number);\r\n                    com = false;\r\n                }\r\n            }\r\n            else {\r\n                com = -1;\r\n            }\r\n            if (func) {\r\n                func();\r\n            }\r\n            return com;\r\n        }\r\n        checkConditionUnlockWay(unlockWay, num) {\r\n            let arr = [];\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.unlockWay === unlockWay) {\r\n                        this.checkCondition(element.name, num ? num : 1);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        checkAllCompelet() {\r\n            let bool = true;\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (!element.complete) {\r\n                    bool = false;\r\n                    return bool;\r\n                }\r\n            }\r\n            return bool;\r\n        }\r\n        checkCompeletByID(ID) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.ID == ID && element.complete) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        getRanObjByNoCompelet() {\r\n            let arr0 = LwgTools.ObjArray.arrCopy(this.arr);\r\n            if (arr0.length > 0) {\r\n                const arr1 = LwgTools.Arr.randomGetOut(arr0, arr0.length);\r\n                for (let index = 0; index < arr1.length; index++) {\r\n                    const element = arr1[index];\r\n                    if (!element.complete) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        eachArr(func) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                func && func(element);\r\n            }\r\n        }\r\n        eachArrByCompelet(func) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                func && func(element);\r\n            }\r\n        }\r\n        eachArrByNoCompelet(func) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (!element.complete) {\r\n                    func && func(element);\r\n                }\r\n            }\r\n        }\r\n        get pitchClassify() {\r\n            if (!this[`${this.tableName}/pitchClassify`]) {\r\n                if (this.localStorage) {\r\n                    return Laya.LocalStorage.getItem(`${this.tableName}/pitchClassify`) ? Laya.LocalStorage.getItem(`${this.tableName}/pitchClassify`) : null;\r\n                }\r\n                else {\r\n                    return this[`${this.tableName}/pitchClassify`] = null;\r\n                }\r\n            }\r\n            else {\r\n                return this[`${this.tableName}/pitchClassify`];\r\n            }\r\n        }\r\n        ;\r\n        set pitchClassify(str) {\r\n            this.lastPitchClassify = this[`${this.tableName}/pitchClassify`] ? this[`${this.tableName}/pitchClassify`] : null;\r\n            this[`${this.tableName}/pitchClassify`] = str;\r\n            if (this.localStorage) {\r\n                Laya.LocalStorage.setItem(`${this.tableName}/pitchClassify`, str.toString());\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        ;\r\n        get pitchName() {\r\n            if (!this[`${this.tableName}/pitchName`]) {\r\n                if (this.localStorage) {\r\n                    return Laya.LocalStorage.getItem(`${this.tableName}/pitchName`) ? Laya.LocalStorage.getItem(`${this.tableName}/pitchName`) : null;\r\n                }\r\n                else {\r\n                    return this[`${this.tableName}/pitchName`] = null;\r\n                }\r\n            }\r\n            else {\r\n                return this[`${this.tableName}/pitchName`];\r\n            }\r\n        }\r\n        ;\r\n        set pitchName(str) {\r\n            this.lastPitchName = this[`${this.tableName}/pitchName`];\r\n            this[`${this.tableName}/pitchName`] = str;\r\n            if (this.localStorage) {\r\n                Laya.LocalStorage.setItem(`${this.tableName}/pitchName`, str.toString());\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        ;\r\n        get lastPitchClassify() {\r\n            if (!this[`${this.tableName}/lastPitchClassify`]) {\r\n                if (this.localStorage) {\r\n                    return Laya.LocalStorage.getItem(`${this.tableName}/lastPitchClassify`) ? Laya.LocalStorage.getItem(`${this.tableName}/lastPitchClassify`) : null;\r\n                }\r\n                else {\r\n                    return this[`${this.tableName}/lastPitchClassify`] = null;\r\n                }\r\n            }\r\n            else {\r\n                return this[`${this.tableName}/lastPitchClassify`];\r\n            }\r\n        }\r\n        ;\r\n        set lastPitchClassify(str) {\r\n            this[`${this.tableName}/lastPitchClassify`] = str;\r\n            if (this.localStorage && str) {\r\n                Laya.LocalStorage.setItem(`${this.tableName}/lastPitchClassify`, str.toString());\r\n            }\r\n        }\r\n        ;\r\n        get lastPitchName() {\r\n            if (!this[`${this.tableName}/lastPitchName`]) {\r\n                if (this.localStorage) {\r\n                    return Laya.LocalStorage.getItem(`${this.tableName}/lastPitchName`) ? Laya.LocalStorage.getItem(`${this.tableName}/lastPitchName`) : null;\r\n                }\r\n                else {\r\n                    return this[`${this.tableName}/lastPitchName`] = null;\r\n                }\r\n            }\r\n            else {\r\n                return this[`${this.tableName}/lastPitchName`];\r\n            }\r\n        }\r\n        set lastPitchName(str) {\r\n            this[`${this.tableName}/lastPitchName`] = str;\r\n            if (this.localStorage && str) {\r\n                Laya.LocalStorage.setItem(`${this.tableName}/lastPitchName`, str.toString());\r\n            }\r\n        }\r\n        ;\r\n        getPitchObj() {\r\n            for (const key in this.arr) {\r\n                if (Object.prototype.hasOwnProperty.call(this.arr, key)) {\r\n                    const element = this.arr[key];\r\n                    if (element.name === this.pitchName) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        addObj(obj) {\r\n            let _obj = LwgTools.ObjArray.objCopy(obj);\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.name === _obj.name) {\r\n                    this.arr[index] == _obj;\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        addObjArr(objArr) {\r\n            const _objArr = LwgTools.ObjArray.arrCopy(objArr);\r\n            for (let i = 0; i < _objArr.length; i++) {\r\n                const obj = _objArr[i];\r\n                for (let j = 0; j < this.arr.length; j++) {\r\n                    const element = this.arr[j];\r\n                    if (obj && obj.name === element.name) {\r\n                        this.arr[j] = obj;\r\n                        _objArr.splice(i, 1);\r\n                        i--;\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n            for (let k = 0; k < _objArr.length; k++) {\r\n                const element = _objArr[k];\r\n                this.arr.push(element);\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        deleteListObjByName(name) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.name === name) {\r\n                    this.list.deleteItem(index);\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        deleteListObjByPro(pro, value) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element[pro] && element[pro] === value) {\r\n                    this.list.deleteItem(index);\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        sortByProperty(pro, indexPro, inverted) {\r\n            LwgTools.ObjArray.sortByProperty(this.arr, pro);\r\n            if (inverted == undefined || inverted) {\r\n                for (let index = this.arr.length - 1; index >= 0; index--) {\r\n                    const element = this.arr[index];\r\n                    element[indexPro] = this.arr.length - index;\r\n                }\r\n                this.arr.reverse();\r\n            }\r\n            else {\r\n                for (let index = 0; index < this.arr.length; index++) {\r\n                    const element = this.arr[index];\r\n                    element[indexPro] = index + 1;\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n    }\r\n    LwgData.EntiretyTable = EntiretyTable;\r\n    function compare(tableArr, storageName) {\r\n        try {\r\n            Laya.LocalStorage.getJSON(storageName);\r\n        }\r\n        catch (error) {\r\n            Laya.LocalStorage.setJSON(storageName, JSON.stringify(tableArr));\r\n            return tableArr;\r\n        }\r\n        let storageArr;\r\n        if (Laya.LocalStorage.getJSON(storageName)) {\r\n            storageArr = JSON.parse(Laya.LocalStorage.getJSON(storageName));\r\n            if (!tableArr || !storageArr) {\r\n                return storageArr;\r\n            }\r\n        }\r\n        else {\r\n            storageArr = tableArr;\r\n        }\r\n        Laya.LocalStorage.setJSON(storageName, JSON.stringify(storageArr));\r\n        return storageArr;\r\n    }\r\n    function compareMerge(tableArr, storageName, proName) {\r\n        try {\r\n            Laya.LocalStorage.getJSON(storageName);\r\n        }\r\n        catch (error) {\r\n            Laya.LocalStorage.setJSON(storageName, JSON.stringify(tableArr));\r\n            return tableArr;\r\n        }\r\n        let storageArr;\r\n        if (Laya.LocalStorage.getJSON(storageName)) {\r\n            storageArr = JSON.parse(Laya.LocalStorage.getJSON(storageName));\r\n            if (!tableArr || !storageArr) {\r\n                return storageArr;\r\n            }\r\n            const diffArray = LwgTools.ObjArray.getDiffProByTwo(tableArr, storageArr, proName);\r\n            console.log(`${storageName}新添加对象：`, diffArray);\r\n            LwgTools.Arr.addToArray(storageArr, diffArray);\r\n            LwgTools.ObjArray.mergeObjArr1ToObjArr2ByPro(tableArr, diffArray);\r\n        }\r\n        else {\r\n            storageArr = tableArr;\r\n        }\r\n        Laya.LocalStorage.setJSON(storageName, JSON.stringify(storageArr));\r\n        return storageArr;\r\n    }\r\n})(LwgData || (LwgData = {}));\r\nexport var LwgColor;\r\n(function (LwgColor) {\r\n    function RGBToHexString(r, g, b) {\r\n        return '#' + (\"00000\" + (r << 16 | g << 8 | b).toString(16)).slice(-6);\r\n    }\r\n    LwgColor.RGBToHexString = RGBToHexString;\r\n    function hexStringToRGB(str) {\r\n        let r, g, b;\r\n        r = (0xff << 16 & str) >> 16;\r\n        g = (0xff << 8 & str) >> 8;\r\n        b = 0xff & str;\r\n        return [r, g, b];\r\n    }\r\n    LwgColor.hexStringToRGB = hexStringToRGB;\r\n    function colour(node, RGBA, vanishtime) {\r\n        let cf = new Laya.ColorFilter();\r\n        node.blendMode = 'null';\r\n        if (!RGBA) {\r\n            cf.color(LwgTools.Num.randomOneBySection(255, 100, true), LwgTools.Num.randomOneBySection(255, 100, true), LwgTools.Num.randomOneBySection(255, 100, true), 1);\r\n        }\r\n        else {\r\n            cf.color(RGBA[0], RGBA[1], RGBA[2], RGBA[3]);\r\n        }\r\n        node.filters = [cf];\r\n        if (vanishtime) {\r\n            Laya.timer.once(vanishtime, this, () => {\r\n                for (let index = 0; index < node.filters.length; index++) {\r\n                    if (node.filters[index] == cf) {\r\n                        node.filters = [];\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return cf;\r\n    }\r\n    LwgColor.colour = colour;\r\n    function changeOnce(node, RGBA, time, func) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        let cf = new Laya.ColorFilter();\r\n        cf.color(0, 0, 0, 0);\r\n        let speedR = RGBA[0] / time;\r\n        let speedG = RGBA[1] / time;\r\n        let speedB = RGBA[2] / time;\r\n        let speedA = 0;\r\n        if (RGBA[3]) {\r\n            speedA = RGBA[3] / time;\r\n        }\r\n        let caller = {\r\n            add: true,\r\n        };\r\n        let R = 0, G = 0, B = 0, A = 0;\r\n        LwgTimer.frameLoop(1, caller, () => {\r\n            if (R < RGBA[0] && caller.add) {\r\n                R += speedR;\r\n                G += speedG;\r\n                B += speedB;\r\n                if (speedA !== 0)\r\n                    A += speedA;\r\n                if (R >= RGBA[0]) {\r\n                    caller.add = false;\r\n                }\r\n            }\r\n            else {\r\n                R -= speedR;\r\n                G -= speedG;\r\n                B -= speedB;\r\n                if (speedA !== 0)\r\n                    A -= speedA;\r\n                if (R <= 0) {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                    Laya.timer.clearAll(caller);\r\n                }\r\n            }\r\n            cf.color(R, G, B, A);\r\n            node.filters = [cf];\r\n        });\r\n    }\r\n    LwgColor.changeOnce = changeOnce;\r\n    function changeConstant(node, RGBA1, RGBA2, frameTime) {\r\n        let cf;\r\n        let RGBA0 = [];\r\n        if (!node.filters) {\r\n            cf = new Laya.ColorFilter();\r\n            cf.color(RGBA1[0], RGBA1[1], RGBA1[2], RGBA1[3] ? RGBA1[3] : 1);\r\n            RGBA0 = [RGBA1[0], RGBA1[1], RGBA1[2], RGBA1[3] ? RGBA1[3] : 1];\r\n            node.filters = [cf];\r\n        }\r\n        else {\r\n            cf = node.filters[0];\r\n            RGBA0 = [node.filters[0]['_alpha'][0], node.filters[0]['_alpha'][1], node.filters[0]['_alpha'][2], node.filters[0]['_alpha'][3] ? node.filters[0]['_alpha'][3] : 1];\r\n        }\r\n        let RGBA = [LwgTools.Num.randomCountBySection(RGBA1[0], RGBA2[0])[0], LwgTools.Num.randomCountBySection(RGBA1[1], RGBA2[1])[0], LwgTools.Num.randomCountBySection(RGBA1[2], RGBA2[2])[0], LwgTools.Num.randomCountBySection(RGBA1[3] ? RGBA1[3] : 1, RGBA2[3] ? RGBA2[3] : 1)[0]];\r\n        let speedR = (RGBA[0] - RGBA0[0]) / frameTime;\r\n        let speedG = (RGBA[1] - RGBA0[1]) / frameTime;\r\n        let speedB = (RGBA[2] - RGBA0[2]) / frameTime;\r\n        let speedA = 0;\r\n        if (RGBA[3]) {\r\n            speedA = (RGBA[3] - RGBA0[3]) / frameTime;\r\n        }\r\n        if (node['changeCaller']) {\r\n            Laya.timer.clearAll(node['changeCaller']);\r\n        }\r\n        let changeCaller = {};\r\n        node['changeCaller'] = changeCaller;\r\n        let _time = 0;\r\n        LwgTimer.frameLoop(1, changeCaller, () => {\r\n            _time++;\r\n            if (_time <= frameTime) {\r\n                RGBA0[0] += speedR;\r\n                RGBA0[1] += speedG;\r\n                RGBA0[2] += speedB;\r\n            }\r\n            else {\r\n                Laya.timer.clearAll(changeCaller);\r\n            }\r\n            cf.color(RGBA0[0], RGBA0[1], RGBA0[2], RGBA0[3]);\r\n            node.filters = [cf];\r\n        });\r\n    }\r\n    LwgColor.changeConstant = changeConstant;\r\n})(LwgColor || (LwgColor = {}));\r\nexport var LwgEff3D;\r\n(function (LwgEff3D) {\r\n    LwgEff3D.tex2D = {\r\n        爱心2: {\r\n            url: 'Lwg/Effects/3D/img_aixin2.png',\r\n            texture2D: null,\r\n            name: '爱心2',\r\n        },\r\n        星星8: {\r\n            url: 'Lwg/Effects/3D/img_star8.png',\r\n            texture2D: null,\r\n            name: '星星8',\r\n        },\r\n        星星5: {\r\n            url: 'Lwg/Effects/3D/img_star5.png',\r\n            texture2D: null,\r\n            name: '星星5',\r\n        },\r\n        圆形发光: {\r\n            url: 'Lwg/Effects/3D/img_yuanfaguang.png',\r\n            texture2D: null,\r\n            name: '圆形发光',\r\n        }\r\n    };\r\n    let Particle;\r\n    (function (Particle) {\r\n        class Caller {\r\n            constructor(_time, _appear, _move, _vinish, _frameFuncInterval, _frameFunc, _endFunc) {\r\n                this.time = 0;\r\n                this.appear = true;\r\n                this.move = false;\r\n                this.vinish = false;\r\n                this.frame = {\r\n                    interval: 1,\r\n                    func: null,\r\n                };\r\n                this.end = false;\r\n                this.stateType = {\r\n                    appear: 'appear',\r\n                    move: 'move',\r\n                    vinish: 'vinish',\r\n                    end: 'end',\r\n                };\r\n                this._positionByARY_FA = 0;\r\n                this._positionARXY_FR = 0;\r\n                this._positionByTimeRecord = 0;\r\n                this.frame.interval = _frameFuncInterval ? _frameFuncInterval : 1;\r\n                this.frame.func = _frameFunc ? _frameFunc : null;\r\n                this.endFunc = _endFunc ? _endFunc : null;\r\n                this.time = _time ? _time : 0;\r\n                this.appear = _appear ? _appear : true;\r\n                this.move = _move ? _move : false;\r\n                this.vinish = _vinish ? _vinish : false;\r\n                LwgTimer.frameLoop(1, this, () => {\r\n                    this.time++;\r\n                    if (this.box) {\r\n                        if (!this.box.parent) {\r\n                            this.clear();\r\n                            return;\r\n                        }\r\n                    }\r\n                    this.time % this.frame.interval == 0 && this.frame.func && this.frame.func();\r\n                    this.appear && this.appearFunc && this.appearFunc();\r\n                    this.move && this.moveFunc && this.moveFunc();\r\n                    this.vinish && this.vinishFunc && this.vinishFunc();\r\n                    this.end && this.endFunc && this.endFunc();\r\n                    this.everyFrameFunc && this.everyFrameFunc();\r\n                    this.clear();\r\n                });\r\n            }\r\n            get box() {\r\n                if (!this['_box']) {\r\n                    console.log('粒子没有初始化！');\r\n                }\r\n                return this['_box'];\r\n            }\r\n            set box(_box) {\r\n                this['_box'] = _box;\r\n            }\r\n            stateSwitch(str) {\r\n                if (str == 'a' || str == 'appear') {\r\n                    this.appear = true;\r\n                    this.move = false;\r\n                    this.vinish = false;\r\n                    this.end = false;\r\n                }\r\n                if (str == 'm' || str == 'move') {\r\n                    this.appear = false;\r\n                    this.move = true;\r\n                }\r\n                else if (str == 'v' || str == 'vinish') {\r\n                    this.move = false;\r\n                    this.vinish = true;\r\n                }\r\n                else if (str == 'e' || str == 'end') {\r\n                    this.vinish = false;\r\n                    this.end = true;\r\n                }\r\n            }\r\n            clear() {\r\n                if (this.end) {\r\n                    this.mat.destroy();\r\n                    this.box.meshFilter.destroy();\r\n                    this.box.destroy();\r\n                    Laya.timer.clearAll(this);\r\n                }\r\n            }\r\n            boxInit(parent, position, sectionSize, sectionRotation, texArr, colorRGBA) {\r\n                const scaleX = sectionSize ? LwgTools.Num.randomOneBySection(sectionSize[0][0], sectionSize[1][0]) : LwgTools.Num.randomOneBySection(0.06, 0.08);\r\n                const scaleY = sectionSize ? LwgTools.Num.randomOneBySection(sectionSize[0][1], sectionSize[1][1]) : LwgTools.Num.randomOneBySection(0.06, 0.08);\r\n                const scaleZ = sectionSize ? LwgTools.Num.randomOneBySection(sectionSize[0][2], sectionSize[1][2]) : LwgTools.Num.randomOneBySection(0.06, 0.08);\r\n                this.box = parent.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(scaleX, scaleY, scaleZ)));\r\n                if (position) {\r\n                    this.box.transform.position = new Laya.Vector3(position[0], position[1], position[2]);\r\n                }\r\n                else {\r\n                    this.box.transform.position = new Laya.Vector3(0, 0, 0);\r\n                }\r\n                this.fPosition = new Laya.Vector3(this.box.transform.position.x, this.box.transform.position.y, this.box.transform.position.z);\r\n                this.box.transform.localRotationEulerX = sectionRotation ? LwgTools.Num.randomOneBySection(sectionRotation[0][0], sectionRotation[1][0]) : LwgTools.Num.randomOneBySection(0, 360);\r\n                this.box.transform.localRotationEulerX = sectionRotation ? LwgTools.Num.randomOneBySection(sectionRotation[0][1], sectionRotation[1][1]) : LwgTools.Num.randomOneBySection(0, 360);\r\n                this.box.transform.localRotationEulerX = sectionRotation ? LwgTools.Num.randomOneBySection(sectionRotation[0][2], sectionRotation[1][2]) : LwgTools.Num.randomOneBySection(0, 360);\r\n                this.fEuler = new Laya.Vector3(this.box.transform.localRotationEulerX, this.box.transform.localRotationEulerY, this.box.transform.localRotationEulerZ);\r\n                const mat = this.box.meshRenderer.material = new Laya.BlinnPhongMaterial();\r\n                mat.albedoTexture = texArr ? LwgTools.Arr.randomGetOne(texArr) : LwgEff3D.tex2D.圆形发光.texture2D;\r\n                mat.renderMode = 2;\r\n                const R = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : LwgTools.Num.randomOneBySection(10, 25);\r\n                const G = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : LwgTools.Num.randomOneBySection(5, 15);\r\n                const B = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : LwgTools.Num.randomOneBySection(5, 10);\r\n                const A = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : LwgTools.Num.randomOneBySection(1, 1);\r\n                mat.albedoColor = new Laya.Vector4(R, G, B, A);\r\n                this.mat = mat;\r\n            }\r\n            get fPosition() {\r\n                return this['_fPosition'];\r\n            }\r\n            ;\r\n            set fPosition(fP) {\r\n                this['_fPosition'] = fP;\r\n            }\r\n            get fEuler() {\r\n                return this['_fEuler'];\r\n            }\r\n            set fEuler(fE) {\r\n                this['_fEuler'] = fE;\r\n            }\r\n            get mat() {\r\n                return this.box.meshRenderer.material;\r\n            }\r\n            set mat(m) {\r\n                this.box.meshRenderer.material = m;\r\n            }\r\n            positionByARY(angleSpeed, radius, speedY, distance, stateSwitch) {\r\n                const pXZ = LwgTools.Point.getRoundPosOld(this._positionByARY_FA += angleSpeed, radius, new Laya.Point(this.fPosition.x, this.fPosition.z));\r\n                this.box.transform.position = new Laya.Vector3(pXZ.x, this.box.transform.position.y += speedY, pXZ.y);\r\n                if (this.box.transform.position.y - this.fPosition.y > distance) {\r\n                    stateSwitch && stateSwitch();\r\n                }\r\n            }\r\n            positionARXY_R(angle, speedR, distance, stateSwitch) {\r\n                this._positionARXY_FR += speedR;\r\n                const point = LwgTools.Point.getRoundPosOld(angle, this._positionARXY_FR, new Laya.Point(0, 0));\r\n                this.box.transform.position = new Laya.Vector3(this.fPosition.x + point.x, this.fPosition.y + point.y, this.fPosition.z);\r\n                if (this._positionARXY_FR >= distance) {\r\n                    stateSwitch && stateSwitch();\r\n                }\r\n            }\r\n            fadeAway(albedoColorASpeed, endNum = 0, stateSwitch) {\r\n                this.mat.albedoColorA -= albedoColorASpeed;\r\n                if (this.mat.albedoColorA <= endNum) {\r\n                    this.mat.albedoColorA = endNum;\r\n                    stateSwitch && stateSwitch();\r\n                }\r\n            }\r\n            fadeIn(albedoColorASpeed, endNum = 1, stateSwitch) {\r\n                this.mat.albedoColorA += albedoColorASpeed;\r\n                if (this.mat.albedoColorA >= endNum) {\r\n                    this.mat.albedoColorA = endNum;\r\n                    stateSwitch && stateSwitch();\r\n                }\r\n            }\r\n            positionByTime(posSpeed, time, stateSwitch) {\r\n                this._positionByTimeRecord++;\r\n                this.box.transform.position = new Laya.Vector3(this.box.transform.position.x += posSpeed[0], this.box.transform.position.y += posSpeed[1], this.box.transform.position.z += posSpeed[2]);\r\n                if (time && this._positionByTimeRecord > time) {\r\n                    stateSwitch && stateSwitch();\r\n                }\r\n            }\r\n            scaleX(scaleSpeedX, endNum, stateSwitch) {\r\n                this.box.transform.localScaleX += scaleSpeedX;\r\n                if (endNum) {\r\n                    if (scaleSpeedX >= 0) {\r\n                        if (this.box.transform.localScaleX >= endNum) {\r\n                            this.box.transform.localScaleX = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.box.transform.localScaleX <= endNum) {\r\n                            this.box.transform.localScaleX = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            scaleY(scaleSpeedY, endNum, stateSwitch) {\r\n                this.box.transform.localScaleY += scaleSpeedY;\r\n                if (endNum) {\r\n                    if (scaleSpeedY >= 0) {\r\n                        if (this.box.transform.localScaleY >= endNum) {\r\n                            this.box.transform.localScaleY = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.box.transform.localScaleY <= endNum) {\r\n                            this.box.transform.localScaleY = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            scaleZ(scaleSpeedZ, endNum, stateSwitch) {\r\n                this.box.transform.localScaleZ += scaleSpeedZ;\r\n                if (endNum) {\r\n                    if (scaleSpeedZ >= 0) {\r\n                        if (this.box.transform.localScaleZ >= endNum) {\r\n                            this.box.transform.localScaleZ = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.box.transform.localScaleZ <= endNum) {\r\n                            this.box.transform.localScaleZ = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            rotateX(rotateSpeedX, endNum, stateSwitch) {\r\n                this.box.transform.localRotationEulerX += rotateSpeedX;\r\n                if (endNum) {\r\n                    if (rotateSpeedX >= 0) {\r\n                        if (this.box.transform.localRotationEulerX >= endNum) {\r\n                            this.box.transform.localRotationEulerX = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.box.transform.localRotationEulerX <= endNum) {\r\n                            this.box.transform.localRotationEulerX = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            rotateY(rotateSpeedY, endNum, stateSwitch) {\r\n                this.box.transform.localRotationEulerY += rotateSpeedY;\r\n                if (endNum) {\r\n                    if (rotateSpeedY >= 0) {\r\n                        if (this.box.transform.localRotationEulerY >= endNum) {\r\n                            this.box.transform.localRotationEulerY = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.box.transform.localRotationEulerY <= endNum) {\r\n                            this.box.transform.localRotationEulerY = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            rotateZ(rotateSpeedZ, endNum, stateSwitch) {\r\n                this.box.transform.localRotationEulerZ += rotateSpeedZ;\r\n                if (endNum) {\r\n                    if (rotateSpeedZ >= 0) {\r\n                        if (this.box.transform.localRotationEulerZ >= endNum) {\r\n                            this.box.transform.localRotationEulerZ = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.box.transform.localRotationEulerZ <= endNum) {\r\n                            this.box.transform.localRotationEulerZ = endNum;\r\n                            stateSwitch && stateSwitch();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            randomScopeByPosition(scopeSize) {\r\n                scopeSize = scopeSize ? scopeSize : [[0.1, 0.1, 0.1], [0.3, 0.3, 0.3]];\r\n                LwgTools.D3.randomScopeByPosition(this.box, scopeSize);\r\n            }\r\n            excludeZ() {\r\n                this.box.transform.localScaleZ = 0;\r\n            }\r\n            rotateTheZero() {\r\n                this.box.transform.localRotationEulerZ = 0;\r\n                this.box.transform.localRotationEulerX = 0;\r\n                this.box.transform.localRotationEulerY = 0;\r\n            }\r\n            scaleTheZero() {\r\n                this.box.transform.localRotationEulerZ = 0;\r\n                this.box.transform.localRotationEulerX = 0;\r\n                this.box.transform.localRotationEulerY = 0;\r\n            }\r\n        }\r\n        Particle.Caller = Caller;\r\n        function spiral(parent, position, sectionSize, sectionRotation, texArr, colorRGBA, distance, speedY, angleSpeed, radius) {\r\n            const caller = new Caller();\r\n            caller.boxInit(parent, position, sectionSize, sectionRotation, texArr, colorRGBA);\r\n            caller.excludeZ();\r\n            caller.rotateTheZero();\r\n            const _distance = LwgTools.Num.randomNumerical(distance, [1.5, 1.5]);\r\n            const _speedY = LwgTools.Num.randomNumerical(speedY, [0.02, 0.02]);\r\n            const _angleSpeed = LwgTools.Num.randomNumerical(angleSpeed, [6, 6]);\r\n            const _radius = LwgTools.Num.randomNumerical(radius, [0.5, 0.5]);\r\n            caller.mat.albedoColorA = 0;\r\n            caller.stateSwitch('m');\r\n            caller.moveFunc = () => {\r\n                caller.fadeIn(0.2);\r\n                caller.positionByARY(_angleSpeed, _radius, _speedY, _distance, () => {\r\n                    caller.stateSwitch('v');\r\n                });\r\n            };\r\n            caller.vinishFunc = () => {\r\n                caller.fadeAway(0.15, 0, () => {\r\n                    caller.stateSwitch('e');\r\n                });\r\n                caller.positionByTime([0, 0.002, 0]);\r\n            };\r\n            return caller;\r\n        }\r\n        Particle.spiral = spiral;\r\n        function explode(parent, position, sectionSize, sectionRotation, texArr, colorRGBA, distance, speedR) {\r\n            const caller = new Caller();\r\n            caller.boxInit(parent, position, sectionSize, sectionRotation, texArr, colorRGBA);\r\n            caller.excludeZ();\r\n            caller.rotateTheZero();\r\n            const _distance = LwgTools.Num.randomNumerical(distance, [0.3, 0.6]);\r\n            const _speedR = LwgTools.Num.randomNumerical(speedR, [0.008, 0.012]);\r\n            const _angle = LwgTools.Num.randomNumerical([0, 360]);\r\n            caller.mat.albedoColorA = 0;\r\n            caller.stateSwitch('m');\r\n            caller.moveFunc = () => {\r\n                caller.fadeIn(0.15);\r\n                caller.positionARXY_R(_angle, _speedR, _distance, () => {\r\n                    caller.stateSwitch('v');\r\n                });\r\n            };\r\n            caller.vinishFunc = () => {\r\n                caller.fadeAway(0.15, 0, () => {\r\n                    caller.stateSwitch('e');\r\n                });\r\n            };\r\n            return;\r\n        }\r\n        Particle.explode = explode;\r\n        function fade(parent, position, sectionSize, staytime, vainshASpeed, vainshSSpeed, sectionRotation, texArr, colorRGBA) {\r\n            const caller = new Caller();\r\n            caller.boxInit(parent, position, sectionSize ? sectionSize : [[0.04, 0.04, 0], [0.04, 0.04, 0]], sectionRotation, texArr, colorRGBA);\r\n            caller.excludeZ();\r\n            const _staytime = staytime ? staytime : 20;\r\n            const _vainshASpeed = vainshASpeed ? vainshASpeed : 0.02;\r\n            const _vainshSSpeed = vainshSSpeed ? vainshSSpeed : 0.02;\r\n            caller.rotateTheZero();\r\n            caller.stateSwitch('m');\r\n            caller.moveFunc = () => {\r\n                if (caller.time > _staytime) {\r\n                    caller.stateSwitch('v');\r\n                }\r\n            };\r\n            caller.vinishFunc = () => {\r\n                caller.scaleX(_vainshSSpeed);\r\n                caller.fadeAway(_vainshASpeed, 0, () => {\r\n                    caller.stateSwitch('e');\r\n                });\r\n            };\r\n            caller.everyFrameFunc = () => {\r\n                caller.box.transform.localScaleY = caller.box.transform.localScaleX;\r\n            };\r\n            return caller;\r\n        }\r\n        Particle.fade = fade;\r\n        function starsShine(parent, position, scopeSize, scaleSpeed, maxScale, angelspeed, ASpeed, texArr, colorRGBA) {\r\n            const caller = new Caller();\r\n            caller.boxInit(parent, position, null, null, texArr ? texArr : [LwgEff3D.tex2D.星星5.texture2D], colorRGBA ? colorRGBA : [[15, 15, 15, 1], [30, 30, 30, 1]]);\r\n            caller.excludeZ();\r\n            caller.rotateTheZero();\r\n            caller.scaleTheZero();\r\n            caller.randomScopeByPosition(scopeSize);\r\n            caller.mat.albedoColorA = 0;\r\n            const _maxScale = LwgTools.Num.randomNumerical(maxScale, [1, 2]);\r\n            const _scaleSpeed = LwgTools.Num.randomNumerical(scaleSpeed, [0.01, 0.05]);\r\n            const _angelspeed = LwgTools.Num.randomNumerical(angelspeed, [2, 6], true);\r\n            const _ASpeed = LwgTools.Num.randomNumerical(ASpeed, [0.01, 0.05]);\r\n            caller.appearFunc = () => {\r\n                caller.fadeIn(_ASpeed, 1, () => {\r\n                    caller.stateSwitch('m');\r\n                });\r\n                caller.scaleX(_scaleSpeed, 1);\r\n                caller.rotateZ(_angelspeed);\r\n            };\r\n            caller.moveFunc = () => {\r\n                caller.scaleX(_scaleSpeed, _maxScale, () => {\r\n                    caller.stateSwitch('v');\r\n                });\r\n                caller.rotateZ(_angelspeed);\r\n            };\r\n            caller.vinishFunc = () => {\r\n                caller.fadeAway(_ASpeed, 0, () => {\r\n                    caller.stateSwitch('e');\r\n                });\r\n                caller.scaleX(-_scaleSpeed);\r\n                caller.rotateZ(-_angelspeed);\r\n            };\r\n            caller.everyFrameFunc = () => {\r\n                caller.box.transform.localScaleY = caller.box.transform.localScaleX;\r\n            };\r\n            return caller;\r\n        }\r\n        Particle.starsShine = starsShine;\r\n    })(Particle = LwgEff3D.Particle || (LwgEff3D.Particle = {}));\r\n})(LwgEff3D || (LwgEff3D = {}));\r\nexport var LwgEff2D;\r\n(function (LwgEff2D) {\r\n    let SkinUrl;\r\n    (function (SkinUrl) {\r\n        SkinUrl[\"\\u7231\\u5FC31\"] = \"Lwg/Effects/img_aixin1.png\";\r\n        SkinUrl[\"\\u7231\\u5FC32\"] = \"Lwg/Effects/img_aixin2.png\";\r\n        SkinUrl[\"\\u7231\\u5FC33\"] = \"Lwg/Effects/img_aixin3.png\";\r\n        SkinUrl[\"\\u82B11\"] = \"Lwg/Effects/img_hua1.png\";\r\n        SkinUrl[\"\\u82B12\"] = \"Lwg/Effects/img_hua2.png\";\r\n        SkinUrl[\"\\u82B13\"] = \"Lwg/Effects/img_hua3.png\";\r\n        SkinUrl[\"\\u82B14\"] = \"Lwg/Effects/img_hua4.png\";\r\n        SkinUrl[\"\\u661F\\u661F1\"] = \"Lwg/Effects/img_star1.png\";\r\n        SkinUrl[\"\\u661F\\u661F2\"] = \"Lwg/Effects/img_star2.png\";\r\n        SkinUrl[\"\\u661F\\u661F3\"] = \"Lwg/Effects/img_star3.png\";\r\n        SkinUrl[\"\\u661F\\u661F4\"] = \"Lwg/Effects/img_star4.png\";\r\n        SkinUrl[\"\\u661F\\u661F5\"] = \"Lwg/Effects/img_star5.png\";\r\n        SkinUrl[\"\\u661F\\u661F6\"] = \"Lwg/Effects/img_star6.png\";\r\n        SkinUrl[\"\\u661F\\u661F7\"] = \"Lwg/Effects/img_star7.png\";\r\n        SkinUrl[\"\\u661F\\u661F8\"] = \"Lwg/Effects/img_star8.png\";\r\n        SkinUrl[\"\\u83F1\\u5F621\"] = \"Lwg/Effects/img_rhombus1.png\";\r\n        SkinUrl[\"\\u83F1\\u5F622\"] = \"Lwg/Effects/img_rhombus1.png\";\r\n        SkinUrl[\"\\u83F1\\u5F623\"] = \"Lwg/Effects/img_rhombus1.png\";\r\n        SkinUrl[\"\\u77E9\\u5F621\"] = \"Lwg/Effects/img_rectangle1.png\";\r\n        SkinUrl[\"\\u77E9\\u5F622\"] = \"Lwg/Effects/img_rectangle2.png\";\r\n        SkinUrl[\"\\u77E9\\u5F623\"] = \"Lwg/Effects/img_rectangle3.png\";\r\n        SkinUrl[\"\\u96EA\\u82B11\"] = \"Lwg/Effects/img_xuehua1.png\";\r\n        SkinUrl[\"\\u53F6\\u5B501\"] = \"Lwg/Effects/img_yezi1.png\";\r\n        SkinUrl[\"\\u5706\\u5F62\\u53D1\\u51491\"] = \"Lwg/Effects/img_yuanfaguang.png\";\r\n        SkinUrl[\"\\u5706\\u5F621\"] = \"Lwg/Effects/img_yuan1.png\";\r\n        SkinUrl[\"\\u65B9\\u5F62\\u5149\\u57081\"] = \"Lwg/Effects/img_ui_square_guang1.png\";\r\n        SkinUrl[\"\\u65B9\\u5F62\\u5706\\u89D2\\u5149\\u57081\"] = \"Lwg/Effects/img_ui_square_guang2.png\";\r\n        SkinUrl[\"\\u5706\\u5F62\\u5C0F\\u5149\\u73AF\"] = \"Lwg/Effects/img_xiaoguanghuan.png\";\r\n        SkinUrl[\"\\u5149\\u57082\"] = \"Lwg/Effects/img_guangquan2.png\";\r\n        SkinUrl[\"\\u4E09\\u89D2\\u5F621\"] = \"Lwg/Effects/img_triangle1.png\";\r\n        SkinUrl[\"\\u4E09\\u89D2\\u5F622\"] = \"Lwg/Effects/img_triangle2.png\";\r\n    })(SkinUrl = LwgEff2D.SkinUrl || (LwgEff2D.SkinUrl = {}));\r\n    let Aperture;\r\n    (function (Aperture) {\r\n        class ApertureImage extends Laya.Image {\r\n            constructor(parent, centerPoint, size, rotation, urlArr, colorRGBA, zOrder) {\r\n                super();\r\n                if (!parent.parent) {\r\n                    return;\r\n                }\r\n                parent.addChild(this);\r\n                centerPoint ? this.pos(centerPoint[0], centerPoint[1]) : this.pos(0, 0);\r\n                this.width = size ? size[0] : 100;\r\n                this.height = size ? size[1] : 100;\r\n                this.pivotX = this.width / 2;\r\n                this.pivotY = this.height / 2;\r\n                this.rotation = rotation ? LwgTools.Num.randomOneBySection(rotation[0], rotation[1]) : LwgTools.Num.randomOneBySection(360);\r\n                this.skin = urlArr ? LwgTools.Arr.randomGetOne(urlArr) : SkinUrl.花3;\r\n                this.zOrder = zOrder ? zOrder : 0;\r\n                this.alpha = 0;\r\n                let RGBA = [null, null, null, null];\r\n                RGBA[0] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : LwgTools.Num.randomOneBySection(180, 255);\r\n                RGBA[1] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : LwgTools.Num.randomOneBySection(10, 180);\r\n                RGBA[2] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : LwgTools.Num.randomOneBySection(10, 180);\r\n                RGBA[3] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : LwgTools.Num.randomOneBySection(1, 1);\r\n                LwgColor.colour(this, RGBA);\r\n            }\r\n        }\r\n        Aperture.ApertureImage = ApertureImage;\r\n        function continuous(parent, centerPoint, size, minScale, rotation, urlArr, colorRGBA, zOrder, maxScale, speed, accelerated) {\r\n            const Img = new ApertureImage(parent, centerPoint, size, rotation, urlArr, colorRGBA, zOrder);\r\n            let _speed = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : 0.025;\r\n            let _accelerated = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : 0.0005;\r\n            if (minScale) {\r\n                Img.scale(minScale[0], minScale[1]);\r\n            }\r\n            else {\r\n                Img.scale(0, 0);\r\n            }\r\n            const _maxScale = maxScale ? LwgTools.Num.randomOneBySection(maxScale[0], maxScale[1]) : 2;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                scale: false,\r\n                vanish: false\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let acc = 0;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                if (moveCaller.alpha) {\r\n                    Img.alpha += 0.05;\r\n                    acc = 0;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.scale = true;\r\n                    }\r\n                }\r\n                if (moveCaller.scale) {\r\n                    acc += _accelerated;\r\n                    if (Img.scaleX >= _maxScale) {\r\n                        moveCaller.scale = false;\r\n                        moveCaller.vanish = true;\r\n                    }\r\n                }\r\n                if (moveCaller.vanish) {\r\n                    Img.alpha -= 0.015;\r\n                    if (Img.alpha <= 0) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n                Img.scaleX = Img.scaleY += (_speed + acc);\r\n            });\r\n        }\r\n        Aperture.continuous = continuous;\r\n        function _continuousByDs(parent, centerPoint, size, minScale, rotation, urlArr, colorRGBA, zOrder, maxScale, speed, accelerated) {\r\n            const Img = new ApertureImage(parent, centerPoint, size, rotation, urlArr, colorRGBA, zOrder);\r\n            let _speed = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : 0.025;\r\n            let _accelerated = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : 0.0005;\r\n            if (minScale) {\r\n                Img.scale(minScale[0], minScale[1]);\r\n            }\r\n            else {\r\n                Img.scale(0, 0);\r\n            }\r\n            const _maxScale = maxScale ? LwgTools.Num.randomOneBySection(maxScale[0], maxScale[1]) : 2;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                scale: false,\r\n                vanish: false\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let acc = 0;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                if (moveCaller.alpha) {\r\n                    Img.alpha += 0.05;\r\n                    acc = 0;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.scale = true;\r\n                    }\r\n                }\r\n                if (moveCaller.scale) {\r\n                    acc += _accelerated;\r\n                    if (Img.scaleX > _maxScale) {\r\n                        moveCaller.scale = false;\r\n                        moveCaller.vanish = true;\r\n                    }\r\n                }\r\n                if (moveCaller.vanish) {\r\n                    acc -= _accelerated;\r\n                    if (acc <= 0) {\r\n                        acc = 0;\r\n                        Img.alpha -= 0.015;\r\n                        if (Img.alpha <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                }\r\n                Img.scaleX = Img.scaleY += (_speed + acc);\r\n            });\r\n        }\r\n        Aperture._continuousByDs = _continuousByDs;\r\n    })(Aperture = LwgEff2D.Aperture || (LwgEff2D.Aperture = {}));\r\n    let Particle;\r\n    (function (Particle) {\r\n        class ImgBase extends Laya.Image {\r\n            constructor(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder) {\r\n                super();\r\n                parent.addChild(this);\r\n                let sectionWidth = sectionWH ? LwgTools.Num.randomOneBySection(sectionWH[0]) : LwgTools.Num.randomOneBySection(200);\r\n                let sectionHeight = sectionWH ? LwgTools.Num.randomOneBySection(sectionWH[1]) : LwgTools.Num.randomOneBySection(50);\r\n                sectionWidth = LwgTools.Num.randomOneHalf() == 0 ? sectionWidth : -sectionWidth;\r\n                sectionHeight = LwgTools.Num.randomOneHalf() == 0 ? sectionHeight : -sectionHeight;\r\n                this.x = centerPoint ? centerPoint.x + sectionWidth : sectionWidth;\r\n                this.y = centerPoint ? centerPoint.y + sectionHeight : sectionHeight;\r\n                this.width = width ? LwgTools.Num.randomOneBySection(width[0], width[1]) : LwgTools.Num.randomOneBySection(20, 50);\r\n                this.height = height ? LwgTools.Num.randomOneBySection(height[0], height[1]) : this.width;\r\n                this.pivotX = this.width / 2;\r\n                this.pivotY = this.height / 2;\r\n                this.skin = urlArr ? LwgTools.Arr.randomGetOne(urlArr) : SkinUrl.圆形1;\r\n                this.rotation = rotation ? LwgTools.Num.randomOneBySection(rotation[0], rotation[1]) : 0;\r\n                this.alpha = 0;\r\n                this.zOrder = zOrder ? zOrder : 1000;\r\n                let RGBA = [null, null, null, null];\r\n                RGBA[0] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : LwgTools.Num.randomOneBySection(180, 255);\r\n                RGBA[1] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : LwgTools.Num.randomOneBySection(10, 180);\r\n                RGBA[2] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : LwgTools.Num.randomOneBySection(10, 180);\r\n                RGBA[3] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : LwgTools.Num.randomOneBySection(1, 1);\r\n                LwgColor.colour(this, RGBA);\r\n            }\r\n        }\r\n        Particle.ImgBase = ImgBase;\r\n        function snow(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, rotationSpeed, speed, windX) {\r\n            let Img = new ImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let _rotationSpeed = rotationSpeed ? LwgTools.Num.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : LwgTools.Num.randomOneBySection(0, 1);\r\n            _rotationSpeed = LwgTools.Num.randomOneHalf() == 0 ? _rotationSpeed : -_rotationSpeed;\r\n            let speed0 = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(1, 2.5);\r\n            let _windX = windX ? LwgTools.Num.randomOneBySection(windX[0], windX[1]) : 0;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let distance0 = 0;\r\n            let distance1 = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(100, 300);\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                Img.x += _windX;\r\n                Img.rotation += _rotationSpeed;\r\n                if (Img.alpha < 1 && moveCaller.alpha) {\r\n                    Img.alpha += 0.05;\r\n                    distance0 = Img.y++;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                if (distance0 < distance1 && moveCaller.move) {\r\n                    distance0 = Img.y += speed0;\r\n                    if (distance0 >= distance1) {\r\n                        moveCaller.move = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                }\r\n                if (moveCaller.vinish) {\r\n                    Img.alpha -= 0.03;\r\n                    Img.y += speed0;\r\n                    if (Img.alpha <= 0 || speed0 <= 0) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.snow = snow;\r\n        function downwardSpray(parent, point, width, height, angle, urlArr, colorRGBA, vanishDistance, moveSpeed, gravity, accelerated, rotationSpeed, scaleRotationSpeed, skewSpeed, zOrder) {\r\n            const Img = new ImgBase(parent, point, [0, 0], width, height, null, urlArr, colorRGBA, zOrder);\r\n            const _angle = angle ? LwgTools.Num.randomOneBySection(angle[0], angle[1]) : LwgTools.Num.randomOneBySection(0, 90);\r\n            const p = LwgTools.Point.angleByPoint(_angle);\r\n            const _vanishDistance = vanishDistance ? LwgTools.Num.randomOneBySection(vanishDistance[0], vanishDistance[1]) : LwgTools.Num.randomOneBySection(200, 800);\r\n            let _speed = moveSpeed ? LwgTools.Num.randomOneBySection(moveSpeed[0], moveSpeed[1]) : LwgTools.Num.randomOneBySection(10, 30);\r\n            let accelerated0 = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : LwgTools.Num.randomOneBySection(0.3, 1.5);\r\n            const _gravity = gravity ? LwgTools.Num.randomOneBySection(gravity[0], gravity[1]) : LwgTools.Num.randomOneBySection(1, 5);\r\n            let acc = 0;\r\n            const moveCaller = {\r\n                appear: true,\r\n                move: false,\r\n                dropFp: null,\r\n                drop: false,\r\n                vinish: false,\r\n                scaleSub: true,\r\n                scaleAdd: false,\r\n                rotateFunc: null,\r\n            };\r\n            moveCaller.rotateFunc = rotatingWay(Img, rotationSpeed, scaleRotationSpeed, skewSpeed);\r\n            Img['moveCaller'] = moveCaller;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                moveCaller.rotateFunc();\r\n                if (moveCaller.appear) {\r\n                    Img.alpha += 0.5;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.appear = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                    Img.x += p.x * _speed;\r\n                    Img.y += p.y * _speed;\r\n                }\r\n                if (moveCaller.move) {\r\n                    acc -= accelerated0;\r\n                    const speed0 = _speed + acc;\r\n                    Img.x += p.x * speed0;\r\n                    Img.y += p.y * speed0;\r\n                    if (speed0 <= 1) {\r\n                        _speed = 1;\r\n                        moveCaller.dropFp = new Laya.Point(Img.x, Img.y);\r\n                        moveCaller.move = false;\r\n                        moveCaller.drop = true;\r\n                    }\r\n                }\r\n                if (moveCaller.drop) {\r\n                    Img.x += p.x * _speed;\r\n                    Img.y += p.y * _speed;\r\n                    if (moveCaller.dropFp.distance(Img.x, Img.y) > _vanishDistance) {\r\n                        moveCaller.drop = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                }\r\n                if (moveCaller.vinish) {\r\n                    Img.alpha -= 0.05;\r\n                    if (Img.alpha <= 0.3) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n                Img.y += _gravity;\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.downwardSpray = downwardSpray;\r\n        function rotatingWay(Img, rotationSpeed, scaleRotationSpeed, skewSpeed) {\r\n            let _rotationSpeed = rotationSpeed ? LwgTools.Num.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : LwgTools.Num.randomOneBySection(0, 1);\r\n            _rotationSpeed = LwgTools.Num.randomOneHalf() == 0 ? _rotationSpeed : -_rotationSpeed;\r\n            const _scaleSpeed = scaleRotationSpeed ? LwgTools.Num.randomOneBySection(scaleRotationSpeed[0], scaleRotationSpeed[1]) : LwgTools.Num.randomOneBySection(0, 0.25);\r\n            const _scaleDir = LwgTools.Num.randomOneHalf();\r\n            let _skewSpeed = skewSpeed ? LwgTools.Num.randomOneBySection(skewSpeed[0], skewSpeed[1]) : LwgTools.Num.randomOneBySection(1, 10);\r\n            _skewSpeed = LwgTools.Num.randomOneHalf() === 1 ? _skewSpeed : -_skewSpeed;\r\n            const _skewDir = LwgTools.Num.randomOneHalf();\r\n            const _scaleOrSkew = LwgTools.Num.randomOneHalf();\r\n            var rotateFunc = () => {\r\n                Img.rotation += _rotationSpeed;\r\n                if (_scaleOrSkew === 1) {\r\n                    if (_skewDir === 1) {\r\n                        Img.skewX += _skewSpeed;\r\n                    }\r\n                    else {\r\n                        Img.skewY += _skewSpeed;\r\n                    }\r\n                }\r\n                else {\r\n                    if (_scaleDir === 1) {\r\n                        if (Img['moveCaller']['scaleSub']) {\r\n                            Img.scaleX -= _scaleSpeed;\r\n                            if (Img.scaleX <= 0) {\r\n                                Img['moveCaller']['scaleSub'] = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            Img.scaleX += _scaleSpeed;\r\n                            if (Img.scaleX >= 1) {\r\n                                Img['moveCaller']['scaleSub'] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (Img['moveCaller']['scaleSub']) {\r\n                            Img.scaleY -= _scaleSpeed;\r\n                            if (Img.scaleY <= 0) {\r\n                                Img['moveCaller']['scaleSub'] = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            Img.scaleY += _scaleSpeed;\r\n                            if (Img.scaleY >= 1) {\r\n                                Img['moveCaller']['scaleSub'] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            return rotateFunc;\r\n        }\r\n        function fallingRotate(parent, centerPoint, sectionWH, width, height, urlArr, colorRGBA, distance, moveSpeed, scaleRotationSpeed, skewSpeed, rotationSpeed, zOrder) {\r\n            const Img = new ImgBase(parent, centerPoint, sectionWH, width, height, null, urlArr, colorRGBA, zOrder);\r\n            const _moveSpeed = moveSpeed ? LwgTools.Num.randomOneBySection(moveSpeed[0], moveSpeed[1]) : LwgTools.Num.randomOneBySection(1, 2.5);\r\n            let _distance0 = 0;\r\n            const _distance = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(100, 300);\r\n            const moveCaller = {\r\n                appear: true,\r\n                move: false,\r\n                vinish: false,\r\n                scaleSub: true,\r\n                scaleAdd: false,\r\n                rotateFunc: null,\r\n            };\r\n            moveCaller.rotateFunc = rotatingWay(Img, rotationSpeed, scaleRotationSpeed, skewSpeed);\r\n            Img['moveCaller'] = moveCaller;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                moveCaller.rotateFunc();\r\n                if (moveCaller.appear) {\r\n                    Img.alpha += 0.05;\r\n                    Img.y += _moveSpeed / 2;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.appear = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                if (moveCaller.move) {\r\n                    Img.y += _moveSpeed;\r\n                    _distance0 += _moveSpeed;\r\n                    if (_distance0 >= _distance) {\r\n                        moveCaller.move = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                }\r\n                if (moveCaller.vinish) {\r\n                    Img.alpha -= 0.01;\r\n                    Img.y += _moveSpeed;\r\n                    if (Img.alpha <= 0) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.fallingRotate = fallingRotate;\r\n        function fallingVertical(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, speed, accelerated) {\r\n            let Img = new ImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let speed0 = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(4, 8);\r\n            let accelerated0 = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : LwgTools.Num.randomOneBySection(0.25, 0.45);\r\n            let acc = 0;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let distance1 = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(100, 300);\r\n            let fY = Img.y;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                if (Img.alpha < 1 && moveCaller.alpha) {\r\n                    Img.alpha += 0.04;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                if (!moveCaller.alpha) {\r\n                    acc += accelerated0;\r\n                    Img.y += (speed0 + acc);\r\n                }\r\n                if (!moveCaller.alpha && moveCaller.move) {\r\n                    if (Img.y - fY >= distance1) {\r\n                        moveCaller.move = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                }\r\n                if (moveCaller.vinish) {\r\n                    Img.alpha -= 0.03;\r\n                    if (Img.alpha <= 0) {\r\n                        Laya.timer.clearAll(moveCaller);\r\n                        Img.removeSelf();\r\n                    }\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.fallingVertical = fallingVertical;\r\n        function fallingVertical_Reverse(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, speed, accelerated) {\r\n            let Img = new ImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let speed0 = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(4, 8);\r\n            let accelerated0 = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : LwgTools.Num.randomOneBySection(0.25, 0.45);\r\n            let acc = 0;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let distance1 = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(100, 300);\r\n            let fY = Img.y;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                if (Img.alpha < 1 && moveCaller.alpha) {\r\n                    Img.alpha += 0.04;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                if (!moveCaller.alpha) {\r\n                    acc += accelerated0;\r\n                    Img.y += (speed0 + acc);\r\n                }\r\n                if (!moveCaller.alpha && moveCaller.move) {\r\n                    if (Img.y - fY <= distance1) {\r\n                        moveCaller.move = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                }\r\n                if (moveCaller.vinish) {\r\n                    Img.alpha -= 0.03;\r\n                    if (Img.alpha <= 0) {\r\n                        Laya.timer.clearAll(moveCaller);\r\n                        Img.removeSelf();\r\n                    }\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.fallingVertical_Reverse = fallingVertical_Reverse;\r\n        function slowlyUp(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, speed, accelerated) {\r\n            let Img = new ImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let speed0 = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(1.5, 2);\r\n            let accelerated0 = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : LwgTools.Num.randomOneBySection(0.001, 0.005);\r\n            let acc = 0;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let fy = Img.y;\r\n            let distance0 = 0;\r\n            let distance1 = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(-250, -600);\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                if (Img.alpha < 1 && moveCaller.alpha) {\r\n                    Img.alpha += 0.03;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                if (distance0 > distance1 && moveCaller.move) {\r\n                }\r\n                else {\r\n                    moveCaller.move = false;\r\n                    moveCaller.vinish = true;\r\n                }\r\n                if (moveCaller.vinish) {\r\n                    Img.alpha -= 0.02;\r\n                    Img.scaleX -= 0.005;\r\n                    Img.scaleY -= 0.005;\r\n                    if (Img.alpha <= 0) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n                acc += accelerated0;\r\n                Img.y -= (speed0 + acc);\r\n                distance0 = fy - Img.y;\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.slowlyUp = slowlyUp;\r\n        function sprayRound(parent, centerPoint, width, height, rotation, urlArr, colorRGBA, distance, time, moveAngle, rotationSpeed, zOrder) {\r\n            let Img = new ImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let centerPoint0 = centerPoint ? centerPoint : new Laya.Point(0, 0);\r\n            let radius = 0;\r\n            const _time = time ? LwgTools.Num.randomOneBySection(time[0], time[1]) : LwgTools.Num.randomOneBySection(30, 50);\r\n            const _distance = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(100, 200);\r\n            const _speed = _distance / _time;\r\n            const _angle = moveAngle ? LwgTools.Num.randomOneBySection(moveAngle[0], moveAngle[1]) : LwgTools.Num.randomOneBySection(0, 360);\r\n            let rotationSpeed0 = rotationSpeed ? LwgTools.Num.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : LwgTools.Num.randomOneBySection(0, 20);\r\n            rotationSpeed0 = LwgTools.Num.randomOneHalf() == 0 ? rotationSpeed0 : -rotationSpeed0;\r\n            const vinishTime = LwgTools.Num.randomOneInt(60);\r\n            const subAlpha = 1 / vinishTime;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                Img.rotation += rotationSpeed0;\r\n                if (Img.alpha < 1 && moveCaller.alpha) {\r\n                    Img.alpha += 0.5;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (!moveCaller.vinish) {\r\n                        radius += _speed;\r\n                        let point = LwgTools.Point.getRoundPosOld(_angle, radius, centerPoint0);\r\n                        Img.pos(point.x, point.y);\r\n                        if (radius > _distance) {\r\n                            moveCaller.move = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        Img.alpha -= subAlpha;\r\n                        if (Img.alpha <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                        radius += _speed / 2;\r\n                        let point = LwgTools.Point.getRoundPosOld(_angle, radius, centerPoint0);\r\n                        Img.pos(point.x, point.y);\r\n                    }\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.sprayRound = sprayRound;\r\n        function spray(parent, centerPoint, width, height, rotation, urlArr, colorRGBA, distance, moveAngle, rotationSpeed, speed, accelerated, zOrder) {\r\n            let Img = new ImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let centerPoint0 = centerPoint ? centerPoint : new Laya.Point(0, 0);\r\n            let speed0 = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(3, 10);\r\n            let accelerated0 = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : LwgTools.Num.randomOneBySection(0.25, 0.45);\r\n            let acc = 0;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let radius = 0;\r\n            let distance1 = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(100, 200);\r\n            let angle0 = moveAngle ? LwgTools.Num.randomOneBySection(moveAngle[0], moveAngle[1]) : LwgTools.Num.randomOneBySection(0, 360);\r\n            let rotationSpeed0 = rotationSpeed ? LwgTools.Num.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : LwgTools.Num.randomOneBySection(0, 20);\r\n            rotationSpeed0 = LwgTools.Num.randomOneHalf() == 0 ? rotationSpeed0 : -rotationSpeed0;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                Img.rotation += rotationSpeed0;\r\n                if (Img.alpha < 1 && moveCaller.alpha) {\r\n                    Img.alpha += 0.5;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (radius < distance1 && moveCaller.move) {\r\n                    }\r\n                    else {\r\n                        moveCaller.move = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                    if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.05;\r\n                        if (Img.alpha <= 0.3) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                    acc += accelerated0;\r\n                    radius += speed0 + acc;\r\n                    let point = LwgTools.Point.getRoundPosOld(angle0, radius, centerPoint0);\r\n                    Img.pos(point.x, point.y);\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.spray = spray;\r\n        function outsideBox(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, curtailAngle, distance, rotateSpeed, speed, accelerated) {\r\n            let Img = new ImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let _angle = 0;\r\n            sectionWH = sectionWH ? sectionWH : [100, 100];\r\n            let fixedXY = LwgTools.Num.randomOneHalf() == 0 ? 'x' : 'y';\r\n            curtailAngle = curtailAngle ? curtailAngle : 60;\r\n            if (fixedXY == 'x') {\r\n                if (LwgTools.Num.randomOneHalf() == 0) {\r\n                    Img.x += sectionWH[0];\r\n                    _angle = LwgTools.Num.randomOneHalf() == 0 ? LwgTools.Num.randomOneBySection(0, 90 - curtailAngle) : LwgTools.Num.randomOneBySection(0, -90 + curtailAngle);\r\n                }\r\n                else {\r\n                    Img.x -= sectionWH[0];\r\n                    _angle = LwgTools.Num.randomOneBySection(90 + curtailAngle, 270 - curtailAngle);\r\n                }\r\n                Img.y += LwgTools.Num.randomOneBySection(-sectionWH[1], sectionWH[1]);\r\n            }\r\n            else {\r\n                if (LwgTools.Num.randomOneHalf() == 0) {\r\n                    Img.y -= sectionWH[1];\r\n                    _angle = LwgTools.Num.randomOneBySection(180 + curtailAngle, 360 - curtailAngle);\r\n                }\r\n                else {\r\n                    Img.y += sectionWH[1];\r\n                    _angle = LwgTools.Num.randomOneBySection(0 + curtailAngle, 180 - curtailAngle);\r\n                }\r\n                Img.x += LwgTools.Num.randomOneBySection(-sectionWH[0], sectionWH[0]);\r\n            }\r\n            let p = LwgTools.Point.angleByPoint(_angle);\r\n            let _distance = distance ? LwgTools.Num.randomOneBySection(distance[0], distance[1]) : LwgTools.Num.randomOneBySection(20, 50);\r\n            let speed0 = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(0.5, 1);\r\n            let accelerated0 = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : LwgTools.Num.randomOneBySection(0.25, 0.45);\r\n            let acc = 0;\r\n            let rotationSpeed0 = rotateSpeed ? LwgTools.Num.randomOneBySection(rotateSpeed[0], rotateSpeed[1]) : LwgTools.Num.randomOneBySection(0, 20);\r\n            let firstP = new Laya.Point(Img.x, Img.y);\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                Img.rotation += rotationSpeed0;\r\n                if (moveCaller.alpha) {\r\n                    Img.alpha += 0.5;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.move) {\r\n                    if (firstP.distance(Img.x, Img.y) >= _distance) {\r\n                        moveCaller.move = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.vinish) {\r\n                    Img.alpha -= 0.05;\r\n                    if (Img.alpha <= 0.3) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n                if (!moveCaller.alpha) {\r\n                    acc += accelerated0;\r\n                    Img.x += p.x * (speed0 + acc);\r\n                    Img.y += p.y * (speed0 + acc);\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.outsideBox = outsideBox;\r\n        function moveToTargetToMove(parent, centerPoint, width, height, rotation, angle, urlArr, colorRGBA, zOrder, distance1, distance2, rotationSpeed, speed, accelerated) {\r\n            let Img = new ImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n            let centerPoint0 = centerPoint ? centerPoint : new Laya.Point(0, 0);\r\n            let speed0 = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(5, 6);\r\n            let accelerated0 = accelerated ? LwgTools.Num.randomOneBySection(accelerated[0], accelerated[1]) : LwgTools.Num.randomOneBySection(0.25, 0.45);\r\n            let acc = 0;\r\n            let moveCaller = {\r\n                alpha: true,\r\n                move1: false,\r\n                stop: false,\r\n                move2: false,\r\n                vinish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let radius = 0;\r\n            let dis1 = distance1 ? LwgTools.Num.randomOneBySection(distance1[0], distance1[1]) : LwgTools.Num.randomOneBySection(100, 200);\r\n            let dis2 = distance2 ? LwgTools.Num.randomOneBySection(distance2[0], distance2[1]) : LwgTools.Num.randomOneBySection(100, 200);\r\n            let angle0 = angle ? LwgTools.Num.randomOneBySection(angle[0], angle[1]) : LwgTools.Num.randomOneBySection(0, 360);\r\n            Img.rotation = angle0 - 90;\r\n            let rotationSpeed0 = rotationSpeed ? LwgTools.Num.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : LwgTools.Num.randomOneBySection(0, 20);\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                if (moveCaller.alpha) {\r\n                    acc += accelerated0;\r\n                    radius += speed0 + acc;\r\n                    Img.alpha += 0.5;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.alpha = false;\r\n                        moveCaller.move1 = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.move1) {\r\n                    acc += accelerated0;\r\n                    radius += speed0 + acc;\r\n                    if (radius >= dis1) {\r\n                        moveCaller.move1 = false;\r\n                        moveCaller.stop = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.stop) {\r\n                    acc -= 0.3;\r\n                    radius += 0.1;\r\n                    if (acc <= 0) {\r\n                        moveCaller.stop = false;\r\n                        moveCaller.move2 = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.move2) {\r\n                    acc += accelerated0 / 2;\r\n                    radius += speed0 + acc;\r\n                    if (radius >= dis1 + dis2) {\r\n                        moveCaller.move2 = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.vinish) {\r\n                    radius += 0.5;\r\n                    Img.alpha -= 0.05;\r\n                    if (Img.alpha <= 0) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n                let point = LwgTools.Point.getRoundPosOld(angle0, radius, centerPoint0);\r\n                Img.pos(point.x, point.y);\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.moveToTargetToMove = moveToTargetToMove;\r\n        function annularInhalation(parent, centerPoint, radius, rotation, width, height, urlArr, speed, accelerated, zOrder) {\r\n            let Img = new Laya.Image();\r\n            parent.addChild(Img);\r\n            width = width ? width : [25, 50];\r\n            Img.width = LwgTools.Num.randomCountBySection(width[0], width[1])[0];\r\n            Img.height = height ? LwgTools.Num.randomCountBySection(height[0], height[1])[0] : Img.width;\r\n            Img.pivotX = Img.width / 2;\r\n            Img.pivotY = Img.height / 2;\r\n            Img.skin = urlArr ? LwgTools.Arr.randomGetOut(urlArr)[0] : SkinUrl[LwgTools.Num.randomCountBySection(0, 12)[0]];\r\n            let radius0 = LwgTools.Num.randomCountBySection(radius[0], radius[1])[0];\r\n            Img.alpha = 0;\r\n            let speed0 = speed ? LwgTools.Num.randomCountBySection(speed[0], speed[1])[0] : LwgTools.Num.randomCountBySection(5, 10)[0];\r\n            let angle = rotation ? LwgTools.Num.randomCountBySection(rotation[0], rotation[1])[0] : LwgTools.Num.randomCountBySection(0, 360)[0];\r\n            let caller = {};\r\n            let acc = 0;\r\n            accelerated = accelerated ? accelerated : 0.35;\r\n            LwgTimer.frameLoop(1, caller, () => {\r\n                if (Img.alpha < 1) {\r\n                    Img.alpha += 0.05;\r\n                    acc += (accelerated / 5);\r\n                    radius0 -= (speed0 / 2 + acc);\r\n                }\r\n                else {\r\n                    acc += accelerated;\r\n                    radius0 -= (speed0 + acc);\r\n                }\r\n                let point = LwgTools.Point.getRoundPosOld(angle, radius0, centerPoint);\r\n                Img.pos(point.x, point.y);\r\n                if (point.distance(centerPoint.x, centerPoint.y) <= 20 || point.distance(centerPoint.x, centerPoint.y) >= 1000) {\r\n                    Img.removeSelf();\r\n                    Laya.timer.clearAll(caller);\r\n                }\r\n            });\r\n            return Img;\r\n        }\r\n        Particle.annularInhalation = annularInhalation;\r\n    })(Particle = LwgEff2D.Particle || (LwgEff2D.Particle = {}));\r\n    let Glitter;\r\n    (function (Glitter) {\r\n        class GlitterImage extends Laya.Image {\r\n            constructor(parent, centerPos, radiusXY, urlArr, colorRGBA, width, height, zOder) {\r\n                super();\r\n                if (!parent.parent) {\r\n                    return;\r\n                }\r\n                parent.addChild(this);\r\n                this.skin = urlArr ? LwgTools.Arr.randomGetOne(urlArr) : SkinUrl.星星1;\r\n                this.width = width ? LwgTools.Num.randomOneBySection(width[0], width[1]) : 80;\r\n                this.height = height ? LwgTools.Num.randomOneBySection(height[0], height[1]) : this.width;\r\n                this.pivotX = this.width / 2;\r\n                this.pivotY = this.height / 2;\r\n                let p = radiusXY ? LwgTools.Point.randomPointByCenter(centerPos, radiusXY[0], radiusXY[1], 1) : LwgTools.Point.randomPointByCenter(centerPos, 100, 100, 1);\r\n                this.pos(p[0].x, p[0].y);\r\n                const RGBA = [null, null, null, null];\r\n                RGBA[0] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : LwgTools.Num.randomOneBySection(10, 255);\r\n                RGBA[1] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : LwgTools.Num.randomOneBySection(200, 255);\r\n                RGBA[2] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : LwgTools.Num.randomOneBySection(10, 255);\r\n                RGBA[3] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : LwgTools.Num.randomOneBySection(1, 1);\r\n                LwgColor.colour(this, RGBA);\r\n                this.alpha = 0;\r\n                this.zOrder = zOder ? zOder : 1000;\r\n            }\r\n        }\r\n        Glitter.GlitterImage = GlitterImage;\r\n        function blinkStar(parent, centerPos, radiusXY, urlArr, colorRGBA, width, height, scale, speed, rotateSpeed, zOder) {\r\n            let Img = new GlitterImage(parent, centerPos, radiusXY, urlArr, colorRGBA, width, height, zOder);\r\n            Img.scaleX = 0;\r\n            Img.scaleY = 0;\r\n            let _scale = scale ? LwgTools.Num.randomOneBySection(scale[0], scale[1]) : LwgTools.Num.randomOneBySection(0.8, 1.2);\r\n            let _speed = speed ? LwgTools.Num.randomOneBySection(speed[0], speed[1]) : LwgTools.Num.randomOneBySection(0.01, 0.02);\r\n            let _rotateSpeed = rotateSpeed ? LwgTools.Num.randomOneInt(rotateSpeed[0], rotateSpeed[1]) : LwgTools.Num.randomOneInt(0, 5);\r\n            _rotateSpeed = LwgTools.Num.randomOneHalf() == 0 ? -_rotateSpeed : _rotateSpeed;\r\n            let moveCaller = {\r\n                appear: true,\r\n                scale: false,\r\n                vanish: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            var ani = () => {\r\n                if (moveCaller.appear) {\r\n                    Img.alpha += 0.1;\r\n                    Img.rotation += _rotateSpeed;\r\n                    Img.scaleX = Img.scaleY += _speed;\r\n                    if (Img.alpha >= 1) {\r\n                        moveCaller.appear = false;\r\n                        moveCaller.scale = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.scale) {\r\n                    Img.rotation += _rotateSpeed;\r\n                    Img.scaleX = Img.scaleY += _speed;\r\n                    if (Img.scaleX > _scale) {\r\n                        moveCaller.scale = false;\r\n                        moveCaller.vanish = true;\r\n                    }\r\n                }\r\n                else if (moveCaller.vanish) {\r\n                    Img.rotation -= _rotateSpeed;\r\n                    Img.alpha -= 0.015;\r\n                    Img.scaleX -= 0.01;\r\n                    Img.scaleY -= 0.01;\r\n                    if (Img.scaleX <= 0) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                }\r\n            };\r\n            Laya.timer.frameLoop(1, moveCaller, ani);\r\n            return Img;\r\n        }\r\n        Glitter.blinkStar = blinkStar;\r\n        function simpleInfinite(parent, x, y, width, height, zOrder, url, speed) {\r\n            let Img = new Laya.Image();\r\n            parent.addChild(Img);\r\n            Img.width = width;\r\n            Img.height = height;\r\n            Img.pos(x, y);\r\n            Img.skin = url ? url : SkinUrl.方形光圈1;\r\n            Img.alpha = 0;\r\n            Img.zOrder = zOrder ? zOrder : 0;\r\n            let add = true;\r\n            let caller = {};\r\n            let func = () => {\r\n                if (!add) {\r\n                    Img.alpha -= speed ? speed : 0.01;\r\n                    if (Img.alpha <= 0) {\r\n                        if (caller['end']) {\r\n                            Laya.timer.clearAll(caller);\r\n                            Img.removeSelf();\r\n                        }\r\n                        else {\r\n                            add = true;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Img.alpha += speed ? speed * 2 : 0.01 * 2;\r\n                    if (Img.alpha >= 1) {\r\n                        add = false;\r\n                        caller['end'] = true;\r\n                    }\r\n                }\r\n            };\r\n            Laya.timer.frameLoop(1, caller, func);\r\n            return Img;\r\n        }\r\n        Glitter.simpleInfinite = simpleInfinite;\r\n    })(Glitter = LwgEff2D.Glitter || (LwgEff2D.Glitter = {}));\r\n    let Circulation;\r\n    (function (Circulation) {\r\n        class ImageBase extends Laya.Image {\r\n            constructor(parent, urlArr, colorRGBA, width, height, zOrder) {\r\n                super();\r\n                parent.addChild(this);\r\n                this.skin = urlArr ? LwgTools.Arr.randomGetOne(urlArr) : SkinUrl.圆形发光1;\r\n                this.width = width ? LwgTools.Num.randomOneBySection(width[0], width[1]) : 80;\r\n                this.height = height ? LwgTools.Num.randomOneBySection(height[0], height[1]) : this.width;\r\n                this.pivotX = this.width / 2;\r\n                this.pivotY = this.height / 2;\r\n                const RGBA = [null, null, null, null];\r\n                RGBA[0] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : LwgTools.Num.randomOneBySection(0, 255);\r\n                RGBA[1] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : LwgTools.Num.randomOneBySection(0, 255);\r\n                RGBA[2] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : LwgTools.Num.randomOneBySection(0, 255);\r\n                RGBA[3] = colorRGBA ? LwgTools.Num.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : LwgTools.Num.randomOneBySection(0, 255);\r\n                LwgColor.colour(this, RGBA);\r\n                this.zOrder = zOrder ? zOrder : 0;\r\n                this.alpha = 0;\r\n                this.scaleX = 0;\r\n                this.scaleY = 0;\r\n            }\r\n        }\r\n        Circulation.ImageBase = ImageBase;\r\n        function corner(parent, posArray, urlArr, colorRGBA, width, height, zOrder, parallel, speed) {\r\n            if (posArray.length <= 1) {\r\n                return;\r\n            }\r\n            let Img = new ImageBase(parent, urlArr, colorRGBA, width, height, zOrder);\r\n            let Imgfootprint = new ImageBase(parent, urlArr, colorRGBA, width, height, zOrder);\r\n            Imgfootprint.filters = Img.filters;\r\n            Img.pos(posArray[0][0], posArray[0][1]);\r\n            Img.alpha = 1;\r\n            let moveCaller = {\r\n                num: 0,\r\n                alpha: true,\r\n                move: false,\r\n            };\r\n            Img['moveCaller'] = moveCaller;\r\n            let _speed = speed ? speed : 3;\r\n            let index = 0;\r\n            Img.scale(1, 1);\r\n            LwgTimer.frameLoop(1, moveCaller, () => {\r\n                let Imgfootprint = new ImageBase(parent, urlArr, colorRGBA, width, height, zOrder);\r\n                Imgfootprint.filters = Img.filters;\r\n                Imgfootprint.x = Img.x;\r\n                Imgfootprint.y = Img.y;\r\n                Imgfootprint.rotation = Img.rotation;\r\n                Imgfootprint.alpha = 1;\r\n                Imgfootprint.zOrder = -1;\r\n                Imgfootprint.scaleX = Img.scaleX;\r\n                Imgfootprint.scaleY = Img.scaleY;\r\n                LwgAni2D.fadeOut(Imgfootprint, 1, 0, 200, 0, () => {\r\n                    Imgfootprint.removeSelf();\r\n                });\r\n                if (Img.parent == null) {\r\n                    Laya.timer.clearAll(moveCaller);\r\n                }\r\n                moveCaller.num++;\r\n                if (urlArr) {\r\n                    if (moveCaller.num > urlArr.length) {\r\n                        moveCaller.num = 0;\r\n                    }\r\n                    else {\r\n                        Img.skin = urlArr[moveCaller.num];\r\n                    }\r\n                }\r\n            });\r\n            var func = () => {\r\n                let targetXY = [posArray[index][0], posArray[index][1]];\r\n                let distance = (new Laya.Point(Img.x, Img.y)).distance(targetXY[0], targetXY[1]);\r\n                if (parallel) {\r\n                    Img.rotation = LwgTools.Point.pointByAngleOld(Img.x - targetXY[0], Img.y - targetXY[1]) + 180;\r\n                }\r\n                let time = speed * 100 + distance / 5;\r\n                if (index == posArray.length + 1) {\r\n                    targetXY = [posArray[0][0], posArray[0][1]];\r\n                }\r\n                LwgAni2D.move(Img, targetXY[0], targetXY[1], time, () => {\r\n                    index++;\r\n                    if (index == posArray.length) {\r\n                        index = 0;\r\n                    }\r\n                    func();\r\n                });\r\n            };\r\n            func();\r\n            return Img;\r\n        }\r\n        Circulation.corner = corner;\r\n    })(Circulation = LwgEff2D.Circulation || (LwgEff2D.Circulation = {}));\r\n})(LwgEff2D || (LwgEff2D = {}));\r\nexport var LwgClick;\r\n(function (LwgClick) {\r\n    class Init {\r\n        constructor(_effectType) {\r\n            LwgClick.effectType = _effectType;\r\n        }\r\n        get name() {\r\n            return 'LwgClick';\r\n        }\r\n    }\r\n    LwgClick.Init = Init;\r\n    LwgClick.absolute = true;\r\n    let EmfilterType;\r\n    (function (EmfilterType) {\r\n        EmfilterType[EmfilterType[\"all\"] = 0] = \"all\";\r\n        EmfilterType[EmfilterType[\"none\"] = 1] = \"none\";\r\n        EmfilterType[EmfilterType[\"stage\"] = 2] = \"stage\";\r\n        EmfilterType[EmfilterType[\"button\"] = 3] = \"button\";\r\n        EmfilterType[EmfilterType[\"someBtnIncludeStage\"] = 4] = \"someBtnIncludeStage\";\r\n        EmfilterType[EmfilterType[\"someBtnExcludeStage\"] = 5] = \"someBtnExcludeStage\";\r\n    })(EmfilterType = LwgClick.EmfilterType || (LwgClick.EmfilterType = {}));\r\n    class Filter {\r\n        static get value() {\r\n            return this._value;\r\n        }\r\n        static setValue(filterType, someBtnArr) {\r\n            this._value = filterType;\r\n            if (filterType === EmfilterType.someBtnIncludeStage || filterType === EmfilterType.someBtnExcludeStage) {\r\n                if (someBtnArr.length <= 0) {\r\n                    console.log('如果为筛选值为某些按钮，则必须输入按钮名称数组');\r\n                }\r\n                else {\r\n                    this.someBtnArr = someBtnArr;\r\n                }\r\n            }\r\n            else {\r\n                this.someBtnArr = [];\r\n            }\r\n        }\r\n    }\r\n    Filter._value = EmfilterType.all;\r\n    Filter.someBtnArr = [];\r\n    LwgClick.Filter = Filter;\r\n    function checkBtn(nameTarget) {\r\n        if (LwgClick.absolute) {\r\n            if (Filter.value === EmfilterType.button || Filter.value === EmfilterType.all) {\r\n                return true;\r\n            }\r\n            else if (Filter.value === EmfilterType.someBtnExcludeStage || Filter.value === EmfilterType.someBtnIncludeStage) {\r\n                if (Filter.someBtnArr.length > 0) {\r\n                    for (let index = 0; index < Filter.someBtnArr.length; index++) {\r\n                        const nameBtn = Filter.someBtnArr[index];\r\n                        if (nameBtn === nameTarget) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    LwgClick.checkBtn = checkBtn;\r\n    function checkStage() {\r\n        let stageClick = false;\r\n        if (LwgClick.absolute) {\r\n            if (Filter.value === EmfilterType.all || Filter.value === EmfilterType.stage || Filter.value === EmfilterType.someBtnIncludeStage) {\r\n                stageClick = true;\r\n            }\r\n        }\r\n        return stageClick;\r\n    }\r\n    LwgClick.checkStage = checkStage;\r\n    let EmEffectType;\r\n    (function (EmEffectType) {\r\n        EmEffectType[EmEffectType[\"noEffect\"] = 1] = \"noEffect\";\r\n        EmEffectType[EmEffectType[\"largen\"] = 2] = \"largen\";\r\n        EmEffectType[EmEffectType[\"reduce\"] = 3] = \"reduce\";\r\n    })(EmEffectType = LwgClick.EmEffectType || (LwgClick.EmEffectType = {}));\r\n    LwgClick.effectType = EmEffectType.largen;\r\n    function effectSet(effectType, target) {\r\n        let btnEffect;\r\n        switch (effectType) {\r\n            case EmEffectType.noEffect:\r\n                btnEffect = NoEffect.ins;\r\n                break;\r\n            case EmEffectType.largen:\r\n                btnEffect = Largen.ins;\r\n                if (target['anchorX']) {\r\n                    target.anchorX = 0.5;\r\n                    target.anchorX = 0.5;\r\n                }\r\n                break;\r\n            case EmEffectType.reduce:\r\n                btnEffect = Reduce.ins;\r\n                if (target['anchorX']) {\r\n                    target.anchorX = 0.5;\r\n                    target.anchorX = 0.5;\r\n                }\r\n                break;\r\n            case undefined:\r\n                btnEffect = Largen.ins;\r\n                if (target['anchorX']) {\r\n                    target.anchorX = 0.5;\r\n                    target.anchorX = 0.5;\r\n                }\r\n                break;\r\n            default:\r\n                btnEffect = NoEffect.ins;\r\n                if (target['anchorX']) {\r\n                    target.anchorX = 0.5;\r\n                    target.anchorX = 0.5;\r\n                }\r\n                break;\r\n        }\r\n        return btnEffect;\r\n    }\r\n    function btnOnDown(target, caller, down, effect) {\r\n        on(effect, target, caller, (e) => {\r\n            checkBtn(target.name) && down && down(e);\r\n        }, null, null, null);\r\n    }\r\n    LwgClick.btnOnDown = btnOnDown;\r\n    function btnOnMove(target, caller, move, effect) {\r\n        on(effect, target, caller, null, (e) => {\r\n            checkBtn(target.name) && move && move(e);\r\n        }, null, null);\r\n    }\r\n    LwgClick.btnOnMove = btnOnMove;\r\n    function btnOnUp(target, caller, up, effect) {\r\n        on(effect, target, caller, null, null, (e) => {\r\n            checkBtn(target.name) && up && up(e);\r\n        }, null);\r\n    }\r\n    LwgClick.btnOnUp = btnOnUp;\r\n    function btnOnOut(target, caller, out, effect) {\r\n        on(effect, target, caller, null, null, null, (e) => {\r\n            checkBtn(target.name) && out && out(e);\r\n        });\r\n    }\r\n    LwgClick.btnOnOut = btnOnOut;\r\n    function btnOff(target, caller, cb, effect) {\r\n        off(effect, target, caller, cb, cb, cb, cb);\r\n    }\r\n    LwgClick.btnOff = btnOff;\r\n    function btnOnFour(target, caller, down, move, up, out, effect) {\r\n        on(effect, target, caller, (e) => {\r\n            LwgClick.checkBtn(target.name) && down && down(e);\r\n        }, (e) => {\r\n            LwgClick.checkBtn(target.name) && move && move(e);\r\n        }, (e) => {\r\n            LwgClick.checkBtn(target.name) && up && up(e);\r\n        }, (e) => {\r\n            LwgClick.checkBtn(target.name) && out && out(e);\r\n        });\r\n    }\r\n    LwgClick.btnOnFour = btnOnFour;\r\n    function btnOnceDown(target, caller, down, effect) {\r\n        once(effect, target, caller, (e) => {\r\n            checkBtn(target.name) && down && down(e);\r\n        }, null, null, null);\r\n    }\r\n    LwgClick.btnOnceDown = btnOnceDown;\r\n    function btnOnceMove(target, caller, move, effect) {\r\n        once(effect, target, caller, null, (e) => {\r\n            checkBtn(target.name) && move && move(e);\r\n        }, null, null);\r\n    }\r\n    LwgClick.btnOnceMove = btnOnceMove;\r\n    function btnOnceUp(target, caller, up, effect) {\r\n        once(effect, target, caller, null, null, (e) => {\r\n            checkBtn(target.name) && up && up(e);\r\n        }, null);\r\n    }\r\n    LwgClick.btnOnceUp = btnOnceUp;\r\n    function btnOnceOut(target, caller, out, args, effect) {\r\n        once(effect, target, caller, null, null, null, (e) => {\r\n            checkBtn(target.name) && out && out(e, args);\r\n        });\r\n    }\r\n    LwgClick.btnOnceOut = btnOnceOut;\r\n    function btnOnceFour(target, caller, down, move, up, out, allArgs, effect) {\r\n        once(effect, target, caller, (e) => {\r\n            checkBtn(target.name) && down && down(e, allArgs[0]);\r\n        }, (e) => {\r\n            checkBtn(target.name) && move && move(e, allArgs[1]);\r\n        }, (e) => {\r\n            checkBtn(target.name) && up && up(e, allArgs[2]);\r\n        }, (e) => {\r\n            checkBtn(target.name) && out && out(e, allArgs[3]);\r\n        });\r\n    }\r\n    LwgClick.btnOnceFour = btnOnceFour;\r\n    function on(effect, target, caller, down, move, up, out, args = [[], [], [], []]) {\r\n        if (!effect) {\r\n            effect = LwgClick.effectType;\r\n        }\r\n        const btnEffect = effectSet(effect, target);\r\n        target.on(Laya.Event.MOUSE_DOWN, caller, down, args[0]);\r\n        target.on(Laya.Event.MOUSE_MOVE, caller, move, args[1]);\r\n        target.on(Laya.Event.MOUSE_UP, caller, up, args[2]);\r\n        target.on(Laya.Event.MOUSE_OUT, caller, out, args[3]);\r\n        target.on(Laya.Event.MOUSE_DOWN, caller, btnEffect.down);\r\n        target.on(Laya.Event.MOUSE_MOVE, caller, btnEffect.move);\r\n        target.on(Laya.Event.MOUSE_UP, caller, btnEffect.up);\r\n        target.on(Laya.Event.MOUSE_OUT, caller, btnEffect.out);\r\n    }\r\n    LwgClick.on = on;\r\n    function once(effect, target, caller, down, move, up, out, args = [[], [], [], []]) {\r\n        if (!effect) {\r\n            effect = LwgClick.effectType;\r\n        }\r\n        const btnEffect = effectSet(effect, target);\r\n        target.once(Laya.Event.MOUSE_DOWN, caller, down, args[0]);\r\n        target.once(Laya.Event.MOUSE_MOVE, caller, move, args[1]);\r\n        target.once(Laya.Event.MOUSE_UP, caller, up, args[2]);\r\n        target.once(Laya.Event.MOUSE_OUT, caller, out, args[3]);\r\n        target.once(Laya.Event.MOUSE_DOWN, caller, btnEffect.down);\r\n        target.once(Laya.Event.MOUSE_MOVE, caller, btnEffect.move);\r\n        target.once(Laya.Event.MOUSE_UP, caller, btnEffect.up);\r\n        target.once(Laya.Event.MOUSE_OUT, caller, btnEffect.out);\r\n    }\r\n    LwgClick.once = once;\r\n    function off(effect, target, caller, down, move, up, out) {\r\n        if (!effect) {\r\n            effect = LwgClick.effectType;\r\n        }\r\n        const btnEffect = effectSet(effect ? LwgClick.effectType : effect, target);\r\n        target.off(Laya.Event.MOUSE_DOWN, caller, down);\r\n        target.off(Laya.Event.MOUSE_MOVE, caller, move);\r\n        target.off(Laya.Event.MOUSE_UP, caller, up);\r\n        target.off(Laya.Event.MOUSE_OUT, caller, out);\r\n        target.off(Laya.Event.MOUSE_DOWN, caller, btnEffect.down);\r\n        target.off(Laya.Event.MOUSE_MOVE, caller, btnEffect.move);\r\n        target.off(Laya.Event.MOUSE_UP, caller, btnEffect.up);\r\n        target.off(Laya.Event.MOUSE_OUT, caller, btnEffect.out);\r\n    }\r\n    LwgClick.off = off;\r\n    class NoEffect {\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new NoEffect();\r\n            }\r\n            return this._ins;\r\n        }\r\n        down() { }\r\n        ;\r\n        move() { }\r\n        ;\r\n        up() { }\r\n        ;\r\n        out() { }\r\n        ;\r\n    }\r\n    class Largen {\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new Largen();\r\n            }\r\n            return this._ins;\r\n        }\r\n        down(event) {\r\n            event.currentTarget.scale(1.1, 1.1);\r\n            LwgSound.playBtnSound();\r\n        }\r\n        move() { }\r\n        ;\r\n        up(event) {\r\n            event.currentTarget.scale(1, 1);\r\n        }\r\n        out(event) {\r\n            event.currentTarget.scale(1, 1);\r\n        }\r\n    }\r\n    class Reduce {\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new Reduce();\r\n            }\r\n            return this._ins;\r\n        }\r\n        down(event) {\r\n            event.currentTarget.scale(0.9, 0.9);\r\n            LwgSound.playBtnSound();\r\n        }\r\n        move() { }\r\n        ;\r\n        up(event) {\r\n            event.currentTarget.scale(1, 1);\r\n        }\r\n        out(event) {\r\n            event.currentTarget.scale(1, 1);\r\n        }\r\n    }\r\n    class Brighten {\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new Brighten();\r\n            }\r\n            return this._ins;\r\n        }\r\n        down(event) { }\r\n        ;\r\n        move(event) { }\r\n        ;\r\n        up(event) { }\r\n        ;\r\n        out(event) { }\r\n        ;\r\n    }\r\n    class LuminousRing {\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new LuminousRing();\r\n            }\r\n            return this._ins;\r\n        }\r\n        down(event) { }\r\n        ;\r\n        move(event) { }\r\n        ;\r\n        up(event) { }\r\n        ;\r\n        out(event) { }\r\n        ;\r\n    }\r\n})(LwgClick || (LwgClick = {}));\r\nexport var LwgAni3D;\r\n(function (LwgAni3D) {\r\n    LwgAni3D.tweenMap = {};\r\n    LwgAni3D.frameRate = 1;\r\n    function moveTo(target, toPos, duration, caller, ease, complete, delay = 0, coverBefore = true, update, frame) {\r\n        let position = target.transform.position.clone();\r\n        if (duration == 0 || duration === undefined || duration === null) {\r\n            target.transform.position = toPos.clone();\r\n            complete && complete.apply(caller);\r\n            return;\r\n        }\r\n        if (frame <= 0 || frame === undefined || frame === null) {\r\n            frame = LwgAni3D.frameRate;\r\n        }\r\n        let updateRenderPos = function () {\r\n            if (target.transform) {\r\n                target.transform.position = position;\r\n            }\r\n            update && update();\r\n        };\r\n        Laya.timer.once(delay, target, function () {\r\n            Laya.timer.loop(16, target, updateRenderPos);\r\n        });\r\n        let endTween = function () {\r\n            if (target.transform) {\r\n                target.transform.position = toPos.clone();\r\n                Laya.timer.clear(target, updateRenderPos);\r\n            }\r\n            complete && complete.apply(caller);\r\n        };\r\n        let tween = Laya.Tween.to(position, { x: toPos.x, y: toPos.y, z: toPos.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n        if (!LwgAni3D.tweenMap[target.id]) {\r\n            LwgAni3D.tweenMap[target.id] = [];\r\n        }\r\n        LwgAni3D.tweenMap[target.id].push(tween);\r\n    }\r\n    LwgAni3D.moveTo = moveTo;\r\n    function moveToX(target, XPos, duration, caller, ease, complete, delay = 0, coverBefore = false, update, frame) {\r\n        let position = target.transform.position.clone();\r\n        let toPos = new Laya.Vector3(XPos, position.y, position.z);\r\n        if (duration == 0 || duration === undefined || duration === null) {\r\n            target.transform.position = toPos.clone();\r\n            complete && complete.apply(caller);\r\n            return;\r\n        }\r\n        if (frame <= 0 || frame === undefined || frame === null) {\r\n            frame = LwgAni3D.frameRate;\r\n        }\r\n        let updateRenderPos = function () {\r\n            if (target.transform) {\r\n                target.transform.position = new Laya.Vector3(position.x, target.transform.position.y, target.transform.position.z);\r\n            }\r\n            update && update();\r\n        };\r\n        Laya.timer.once(delay, target, function () {\r\n            Laya.timer.loop(16, target, updateRenderPos);\r\n        });\r\n        let endTween = function () {\r\n            if (target.transform) {\r\n                target.transform.position = new Laya.Vector3(toPos.clone().x, target.transform.position.y, target.transform.position.z);\r\n                Laya.timer.clear(target, updateRenderPos);\r\n            }\r\n            complete && complete.apply(caller);\r\n        };\r\n        let tween = Laya.Tween.to(position, { x: toPos.x }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n        if (!LwgAni3D.tweenMap[target.id]) {\r\n            LwgAni3D.tweenMap[target.id] = [];\r\n        }\r\n        LwgAni3D.tweenMap[target.id].push(tween);\r\n    }\r\n    LwgAni3D.moveToX = moveToX;\r\n    function moveX(target, disX, duration, caller, ease, complete, delay = 0, coverBefore = false, update, frame) {\r\n        const v3Pos = target.transform.position.clone();\r\n        LwgAni3D.moveToX(target, v3Pos.x + disX, duration, caller, ease, complete, delay, coverBefore, update, frame);\r\n    }\r\n    LwgAni3D.moveX = moveX;\r\n    function moveToY(target, posY, duration, caller, ease, complete, delay = 0, coverBefore = false, update, frame) {\r\n        let position = target.transform.position.clone();\r\n        let toPos = new Laya.Vector3(target.transform.position.x, posY, target.transform.position.z);\r\n        if (duration == 0 || duration === undefined || duration === null) {\r\n            target.transform.position = toPos.clone();\r\n            complete && complete.apply(caller);\r\n            return;\r\n        }\r\n        if (frame <= 0 || frame === undefined || frame === null) {\r\n            frame = LwgAni3D.frameRate;\r\n        }\r\n        let updateRenderPos = function () {\r\n            if (target.transform) {\r\n                target.transform.position = new Laya.Vector3(target.transform.position.x, position.y, target.transform.position.z);\r\n            }\r\n            update && update();\r\n        };\r\n        Laya.timer.once(delay, target, function () {\r\n            Laya.timer.loop(16, target, updateRenderPos);\r\n        });\r\n        let endTween = function () {\r\n            if (target.transform) {\r\n                target.transform.position = new Laya.Vector3(target.transform.position.x, toPos.clone().y, target.transform.position.z);\r\n                Laya.timer.clear(target, updateRenderPos);\r\n            }\r\n            complete && complete.apply(caller);\r\n        };\r\n        let tween = Laya.Tween.to(position, { y: toPos.y }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n        if (!LwgAni3D.tweenMap[target.id]) {\r\n            LwgAni3D.tweenMap[target.id] = [];\r\n        }\r\n        LwgAni3D.tweenMap[target.id].push(tween);\r\n    }\r\n    LwgAni3D.moveToY = moveToY;\r\n    function moveY(target, disY, duration, caller, ease, complete, delay = 0, coverBefore = false, update, frame) {\r\n        const v3Pos = target.transform.position.clone();\r\n        LwgAni3D.moveToY(target, v3Pos.y + disY, duration, caller, ease, complete, delay, coverBefore, update, frame);\r\n    }\r\n    LwgAni3D.moveY = moveY;\r\n    function moveToZ(target, ZPos, duration, caller, ease, complete, delay = 0, coverBefore = false, update, frame) {\r\n        let position = target.transform.position.clone();\r\n        let toPos = new Laya.Vector3(target.transform.position.x, target.transform.position.y, ZPos);\r\n        if (duration == 0 || duration === undefined || duration === null) {\r\n            target.transform.position = toPos;\r\n            complete && complete.apply(caller);\r\n            return;\r\n        }\r\n        if (frame <= 0 || frame === undefined || frame === null) {\r\n            frame = LwgAni3D.frameRate;\r\n        }\r\n        let updateRenderPos = function () {\r\n            if (target.transform) {\r\n                target.transform.position = new Laya.Vector3(target.transform.position.x, target.transform.position.y, position.z);\r\n            }\r\n            update && update();\r\n        };\r\n        Laya.timer.once(delay, target, function () {\r\n            Laya.timer.loop(16, target, updateRenderPos);\r\n        });\r\n        let endTween = function () {\r\n            if (target.transform) {\r\n                target.transform.position = new Laya.Vector3(target.transform.position.x, target.transform.position.y, toPos.clone().z);\r\n                Laya.timer.clear(target, updateRenderPos);\r\n            }\r\n            complete && complete.apply(caller);\r\n        };\r\n        let tween = Laya.Tween.to(position, { z: toPos.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n        if (!LwgAni3D.tweenMap[target.id]) {\r\n            LwgAni3D.tweenMap[target.id] = [];\r\n        }\r\n        LwgAni3D.tweenMap[target.id].push(tween);\r\n    }\r\n    LwgAni3D.moveToZ = moveToZ;\r\n    function moveZ(target, disZ, duration, caller, ease, complete, delay = 0, coverBefore = false, update, frame) {\r\n        const v3Pos = target.transform.position.clone();\r\n        LwgAni3D.moveToZ(target, v3Pos.z + disZ, duration, caller, ease, complete, delay, coverBefore, update, frame);\r\n    }\r\n    LwgAni3D.moveZ = moveZ;\r\n    function rotateTo(target, toRotation, duration, caller, ease, complete, delay, coverBefore, update, frame) {\r\n        let rotation = target.transform.localRotationEuler.clone();\r\n        if (duration == 0 || duration === undefined || duration === null) {\r\n            target.transform.localRotationEuler = toRotation.clone();\r\n            complete && complete.apply(caller);\r\n            return;\r\n        }\r\n        if (frame <= 0 || frame === undefined || frame === null) {\r\n            frame = LwgAni3D.frameRate;\r\n        }\r\n        let updateRenderRotation = function () {\r\n            if (target.transform) {\r\n                target.transform.localRotationEuler = rotation;\r\n            }\r\n            update && update();\r\n        };\r\n        Laya.timer.once(delay, target, function () {\r\n            Laya.timer.frameLoop(frame, target, updateRenderRotation);\r\n        });\r\n        let endTween = function () {\r\n            if (target.transform) {\r\n                target.transform.localRotationEuler = toRotation.clone();\r\n                Laya.timer.clear(target, updateRenderRotation);\r\n            }\r\n            complete && complete.apply(caller);\r\n        };\r\n        let tween = Laya.Tween.to(rotation, { x: toRotation.x, y: toRotation.y, z: toRotation.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n        if (!LwgAni3D.tweenMap[target.id]) {\r\n            LwgAni3D.tweenMap[target.id] = [];\r\n        }\r\n        LwgAni3D.tweenMap[target.id].push(tween);\r\n    }\r\n    LwgAni3D.rotateTo = rotateTo;\r\n    function rotateToX(target, toRotation, duration, caller, ease, complete, delay, coverBefore, update, frame) {\r\n        let rotation = target.transform.localRotationEuler.clone();\r\n        if (duration == 0 || duration === undefined || duration === null) {\r\n            target.transform.localRotationEuler = toRotation.clone();\r\n            complete && complete.apply(caller);\r\n            return;\r\n        }\r\n        if (frame <= 0 || frame === undefined || frame === null) {\r\n            frame = LwgAni3D.frameRate;\r\n        }\r\n        let updateRenderRotation = function () {\r\n            if (target.transform) {\r\n                target.transform.localRotationEuler = rotation;\r\n            }\r\n            update && update();\r\n        };\r\n        Laya.timer.once(delay, target, function () {\r\n            Laya.timer.frameLoop(frame, target, updateRenderRotation);\r\n        });\r\n        let endTween = function () {\r\n            if (target.transform) {\r\n                target.transform.localRotationEuler = toRotation.clone();\r\n                Laya.timer.clear(target, updateRenderRotation);\r\n            }\r\n            complete && complete.apply(caller);\r\n        };\r\n        let tween = Laya.Tween.to(rotation, { x: toRotation.x, y: toRotation.y, z: toRotation.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n        if (!LwgAni3D.tweenMap[target.id]) {\r\n            LwgAni3D.tweenMap[target.id] = [];\r\n        }\r\n        LwgAni3D.tweenMap[target.id].push(tween);\r\n    }\r\n    LwgAni3D.rotateToX = rotateToX;\r\n    function scaleTo(target, toScale, duration, caller, ease, complete, delay, coverBefore, update, frame) {\r\n        let localScale = target.transform.localScale.clone();\r\n        if (duration == 0 || duration === undefined || duration === null) {\r\n            target.transform.localScale = toScale.clone();\r\n            complete && complete.apply(caller);\r\n            return;\r\n        }\r\n        if (frame <= 0 || frame === undefined || frame === null) {\r\n            frame = LwgAni3D.frameRate;\r\n        }\r\n        let updateRenderPos = function () {\r\n            if (target.transform) {\r\n                target.transform.localScale = localScale;\r\n            }\r\n            update && update();\r\n        };\r\n        Laya.timer.once(delay, this, function () {\r\n            Laya.timer.frameLoop(frame, target, updateRenderPos);\r\n        });\r\n        let endTween = function () {\r\n            target.transform.localScale = toScale.clone();\r\n            Laya.timer.clear(target, updateRenderPos);\r\n            complete && complete.apply(caller);\r\n        };\r\n        let tween = Laya.Tween.to(localScale, { x: toScale.x, y: toScale.y, z: toScale.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n        if (!LwgAni3D.tweenMap[target.id]) {\r\n            LwgAni3D.tweenMap[target.id] = [];\r\n        }\r\n        LwgAni3D.tweenMap[target.id].push(tween);\r\n    }\r\n    LwgAni3D.scaleTo = scaleTo;\r\n    function ClearTween(target) {\r\n        let tweens = LwgAni3D.tweenMap[target.id];\r\n        if (tweens && tweens.length) {\r\n            while (tweens.length > 0) {\r\n                let tween = tweens.pop();\r\n                tween.clear();\r\n            }\r\n        }\r\n        Laya.timer.clearAll(target);\r\n    }\r\n    LwgAni3D.ClearTween = ClearTween;\r\n    function rock(target, range, duration, caller, func, delay, ease) {\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n        let v1 = new Laya.Vector3(target.transform.localRotationEulerX + range.x, target.transform.localRotationEulerY + range.y, target.transform.localRotationEulerZ + range.z);\r\n        rotateTo(target, v1, duration / 2, caller, ease, () => {\r\n            let v2 = new Laya.Vector3(target.transform.localRotationEulerX - range.x * 2, target.transform.localRotationEulerY - range.y * 2, target.transform.localRotationEulerZ - range.z * 2);\r\n            rotateTo(target, v2, duration, caller, ease, () => {\r\n                let v3 = new Laya.Vector3(target.transform.localRotationEulerX + range.x, target.transform.localRotationEulerY + range.y, target.transform.localRotationEulerZ + range.z);\r\n                rotateTo(target, v3, duration / 2, caller, ease, () => {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                });\r\n            });\r\n        }, delay);\r\n    }\r\n    LwgAni3D.rock = rock;\r\n    function moveRotateTo(Sp3d, Target, duration, caller, ease, complete, delay, coverBefore, update, frame) {\r\n        moveTo(Sp3d, Target.transform.position, duration, caller, ease, null, delay, coverBefore, update, frame);\r\n        rotateTo(Sp3d, Target.transform.localRotationEuler, duration, caller, ease, complete, delay, coverBefore, null, frame);\r\n    }\r\n    LwgAni3D.moveRotateTo = moveRotateTo;\r\n})(LwgAni3D || (LwgAni3D = {}));\r\nexport var LwgAni2D;\r\n(function (LwgAni2D) {\r\n    function clearAll(arr) {\r\n        for (let index = 0; index < arr.length; index++) {\r\n            Laya.Tween.clearAll(arr[index]);\r\n        }\r\n    }\r\n    LwgAni2D.clearAll = clearAll;\r\n    function circulation_scale(node, range, time, delay, cb) {\r\n        Laya.Tween.to(node, { scaleX: 1 + range, scaleY: 1 + range }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { scaleX: 1 - range, scaleY: 1 - range }, time * 2 / 3, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: 1, scaleY: 1 }, time * 1 / 2, null, Laya.Handler.create(this, function () {\r\n                    cb && cb();\r\n                }), 0);\r\n            }), 0);\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.circulation_scale = circulation_scale;\r\n    function leftRight_Shake(node, range, time, delay, cb) {\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n        Laya.Tween.to(node, { x: node.x - range }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { x: node.x + range * 2 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { x: node.x - range }, time, null, Laya.Handler.create(this, function () {\r\n                    cb && cb();\r\n                }));\r\n            }));\r\n        }), delay);\r\n    }\r\n    LwgAni2D.leftRight_Shake = leftRight_Shake;\r\n    function rotate(node, eRotate, time, delay, cb) {\r\n        Laya.Tween.to(node, { rotation: eRotate }, time, null, Laya.Handler.create(node, function () {\r\n            cb && cb();\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.rotate = rotate;\r\n    function upDown_Overturn(node, time, cb) {\r\n        Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                        cb && cb();\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }), 0);\r\n    }\r\n    LwgAni2D.upDown_Overturn = upDown_Overturn;\r\n    function leftRight_Overturn(node, time, cb) {\r\n        Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { scaleX: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                    }), 0);\r\n                    cb && cb();\r\n                }), 0);\r\n            }), 0);\r\n        }), 0);\r\n    }\r\n    LwgAni2D.leftRight_Overturn = leftRight_Overturn;\r\n    function upDwon_Shake(node, range, time, delay, cb) {\r\n        Laya.Tween.to(node, { y: node.y + range }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { y: node.y - range * 2 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { y: node.y + range }, time, null, Laya.Handler.create(this, function () {\r\n                    cb && cb();\r\n                }));\r\n            }));\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.upDwon_Shake = upDwon_Shake;\r\n    function fadeOut(node, alpha1, alpha2, time, delay, cb) {\r\n        node.alpha = alpha1;\r\n        Laya.Tween.to(node, { alpha: alpha2 }, time, null, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.fadeOut = fadeOut;\r\n    function fadeOut_KickBack(node, alpha1, alpha2, time, delay, cb) {\r\n        node.alpha = alpha1;\r\n        Laya.Tween.to(node, { alpha: alpha2 }, time, null, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }), delay);\r\n    }\r\n    LwgAni2D.fadeOut_KickBack = fadeOut_KickBack;\r\n    function move_FadeOut(node, firstX, firstY, targetX, targetY, time, delay, cb) {\r\n        node.alpha = 0;\r\n        node.x = firstX;\r\n        node.y = firstY;\r\n        Laya.Tween.to(node, { alpha: 1, x: targetX, y: targetY }, time, null, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }), delay);\r\n    }\r\n    LwgAni2D.move_FadeOut = move_FadeOut;\r\n    function move_Fade_Out(node, firstX, firstY, targetX, targetY, time, delay, cb) {\r\n        node.alpha = 1;\r\n        node.x = firstX;\r\n        node.y = firstY;\r\n        Laya.Tween.to(node, { alpha: 0, x: targetX, y: targetY }, time, null, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }), delay);\r\n    }\r\n    LwgAni2D.move_Fade_Out = move_Fade_Out;\r\n    function move_FadeOut_Scale(node, firstX, firstY, targetX, targetY, time, delay, cb) {\r\n        node.alpha = 0;\r\n        node.x = firstX;\r\n        node.y = firstY;\r\n        Laya.Tween.to(node, { alpha: 1, x: targetX, y: targetY, scaleX: 1, scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }), delay);\r\n    }\r\n    LwgAni2D.move_FadeOut_Scale = move_FadeOut_Scale;\r\n    function move_Scale(node, fScale, fX, fY, tX, tY, eScale, time, delay, ease, cb) {\r\n        node.scaleX = fScale;\r\n        node.scaleY = fScale;\r\n        node.x = fX;\r\n        node.y = fY;\r\n        Laya.Tween.to(node, { x: tX, y: tY, scaleX: eScale, scaleY: eScale }, time, ease ? null : ease, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.move_Scale = move_Scale;\r\n    function move_Rotate(Node, tRotate, tPoint, time, delay, cb) {\r\n        Laya.Tween.to(Node, { rotation: tRotate, x: tPoint.x, y: tPoint.y }, time, null, Laya.Handler.create(Node, () => {\r\n            cb && cb();\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.move_Rotate = move_Rotate;\r\n    function rotate_Scale(target, fRotate, fScaleX, fScaleY, eRotate, eScaleX, eScaleY, time, delay, cb) {\r\n        target.scaleX = fScaleX;\r\n        target.scaleY = fScaleY;\r\n        target.rotation = fRotate;\r\n        Laya.Tween.to(target, { rotation: eRotate, scaleX: eScaleX, scaleY: eScaleY }, time, null, Laya.Handler.create(this, () => {\r\n            cb && cb();\r\n            target.rotation = 0;\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.rotate_Scale = rotate_Scale;\r\n    function drop_Simple(node, fY, tY, rotation, time, delay, cb) {\r\n        node.y = fY;\r\n        Laya.Tween.to(node, { y: tY, rotation: rotation }, time, Laya.Ease.circOut, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }), delay);\r\n    }\r\n    LwgAni2D.drop_Simple = drop_Simple;\r\n    function drop_KickBack(target, fAlpha, firstY, targetY, extendY, time, delay, cb) {\r\n        target.alpha = fAlpha;\r\n        target.y = firstY;\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n        Laya.Tween.to(target, { alpha: 1, y: targetY + extendY }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(target, { y: targetY - extendY / 2 }, time / 2, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { y: targetY }, time / 4, null, Laya.Handler.create(this, function () {\r\n                    cb && cb();\r\n                }), 0);\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.drop_KickBack = drop_KickBack;\r\n    function drop_Excursion(node, targetY, targetX, rotation, time, delay, func) {\r\n        Laya.Tween.to(node, { x: node.x + targetX, y: node.y + targetY * 1 / 6 }, time, Laya.Ease.expoIn, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { x: node.x + targetX + 50, y: targetY, rotation: rotation }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.drop_Excursion = drop_Excursion;\r\n    function goUp_Simple(node, initialY, initialR, targetY, time, delay, func) {\r\n        node.y = initialY;\r\n        node.rotation = initialR;\r\n        Laya.Tween.to(node, { y: targetY, rotation: 0 }, time, Laya.Ease.cubicOut, Laya.Handler.create(this, function () {\r\n            if (func !== null) {\r\n                func();\r\n            }\r\n        }), delay);\r\n    }\r\n    LwgAni2D.goUp_Simple = goUp_Simple;\r\n    function cardRotateX_TowFace(node, time, func1, delay, func2) {\r\n        Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n            LwgTools.Node.childrenVisible2D(node, false);\r\n            if (func1) {\r\n                func1();\r\n            }\r\n            Laya.Tween.to(node, { scaleX: 1 }, time * 0.9, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: 0 }, time * 0.8, null, Laya.Handler.create(this, function () {\r\n                    LwgTools.Node.childrenVisible2D(node, true);\r\n                    Laya.Tween.to(node, { scaleX: 1 }, time * 0.7, null, Laya.Handler.create(this, function () {\r\n                        if (func2) {\r\n                            func2();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.cardRotateX_TowFace = cardRotateX_TowFace;\r\n    function cardRotateX_OneFace(node, func1, time, delay, func2) {\r\n        Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n            if (func1 !== null) {\r\n                func1();\r\n            }\r\n            Laya.Tween.to(node, { scaleX: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func2 !== null) {\r\n                    func2();\r\n                }\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.cardRotateX_OneFace = cardRotateX_OneFace;\r\n    function cardRotateY_TowFace(node, time, func1, delay, func2) {\r\n        Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n            LwgTools.Node.childrenVisible2D(node, false);\r\n            if (func1) {\r\n                func1();\r\n            }\r\n            Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleY: 1 }, time * 1 / 2, null, Laya.Handler.create(this, function () {\r\n                        LwgTools.Node.childrenVisible2D(node, true);\r\n                        if (func2) {\r\n                            func2();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.cardRotateY_TowFace = cardRotateY_TowFace;\r\n    function cardRotateY_OneFace(node, func1, time, delay, func2) {\r\n        Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n            if (func1) {\r\n                func1();\r\n            }\r\n            Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func2) {\r\n                    func2();\r\n                }\r\n            }), 0);\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.cardRotateY_OneFace = cardRotateY_OneFace;\r\n    function move_changeRotate(node, targetX, targetY, per, rotation_pe, time, func) {\r\n        let targetPerX = targetX * per + node.x * (1 - per);\r\n        let targetPerY = targetY * per + node.y * (1 - per);\r\n        Laya.Tween.to(node, { x: targetPerX, y: targetPerY, rotation: 45 }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { x: targetX, y: targetY, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), 0);\r\n        }), 0);\r\n    }\r\n    LwgAni2D.move_changeRotate = move_changeRotate;\r\n    function bomb_LeftRight(node, MaxScale, time, func, delay) {\r\n        Laya.Tween.to(node, { scaleX: MaxScale }, time, Laya.Ease.cubicInOut, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { scaleX: 0.85 }, time * 0.5, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: MaxScale * 0.9 }, time * 0.55, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: 0.95 }, time * 0.6, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { scaleX: 1 }, time * 0.65, null, Laya.Handler.create(this, function () {\r\n                            if (func)\r\n                                func();\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.bomb_LeftRight = bomb_LeftRight;\r\n    function bombs_Appear(node, firstAlpha, endScale, maxScale, rotation, time, func, delay) {\r\n        node.scale(0, 0);\r\n        node.alpha = firstAlpha;\r\n        Laya.Tween.to(node, { scaleX: maxScale, scaleY: maxScale, alpha: 1, rotation: rotation }, time, Laya.Ease.cubicInOut, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { scaleX: endScale, scaleY: endScale, rotation: 0 }, time / 2, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: endScale + (maxScale - endScale) / 3, scaleY: endScale + (maxScale - endScale) / 3, rotation: 0 }, time / 3, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: endScale, scaleY: endScale, rotation: 0 }, time / 4, null, Laya.Handler.create(this, function () {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.bombs_Appear = bombs_Appear;\r\n    function bombs_AppearAllChild(node, firstAlpha, endScale, scale1, rotation1, time1, interval, func, audioType) {\r\n        let de1 = 0;\r\n        if (!interval) {\r\n            interval = 100;\r\n        }\r\n        for (let index = 0; index < node.numChildren; index++) {\r\n            let Child = node.getChildAt(index);\r\n            Child.alpha = 0;\r\n            Laya.timer.once(de1, this, () => {\r\n                Child.alpha = 1;\r\n                if (index !== node.numChildren - 1) {\r\n                    func == null;\r\n                }\r\n                bombs_Appear(Child, firstAlpha, endScale, scale1, rotation1, time1, func);\r\n            });\r\n            de1 += interval;\r\n        }\r\n    }\r\n    LwgAni2D.bombs_AppearAllChild = bombs_AppearAllChild;\r\n    function bombs_VanishAllChild(node, endScale, alpha, rotation, time, interval, func) {\r\n        let de1 = 0;\r\n        if (!interval) {\r\n            interval = 100;\r\n        }\r\n        for (let index = 0; index < node.numChildren; index++) {\r\n            let Child = node.getChildAt(index);\r\n            Laya.timer.once(de1, this, () => {\r\n                if (index !== node.numChildren - 1) {\r\n                    func == null;\r\n                }\r\n                bombs_Vanish(node, endScale, alpha, rotation, time, func);\r\n            });\r\n            de1 += interval;\r\n        }\r\n    }\r\n    LwgAni2D.bombs_VanishAllChild = bombs_VanishAllChild;\r\n    function bombs_Vanish(node, scale, alpha, rotation, time, func, delay) {\r\n        Laya.Tween.to(node, { scaleX: scale, scaleY: scale, alpha: alpha, rotation: rotation }, time, Laya.Ease.cubicOut, Laya.Handler.create(this, function () {\r\n            if (func) {\r\n                func();\r\n            }\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.bombs_Vanish = bombs_Vanish;\r\n    function swell_shrink(node, firstScale, scale1, time, delay, cb) {\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n        Laya.Tween.to(node, { scaleX: scale1, scaleY: scale1, alpha: 1, }, time, Laya.Ease.cubicInOut, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { scaleX: firstScale, scaleY: firstScale, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: firstScale + (scale1 - firstScale) * 0.5, scaleY: firstScale + (scale1 - firstScale) * 0.5, rotation: 0 }, time * 0.5, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: firstScale, scaleY: firstScale, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                        cb && cb();\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.swell_shrink = swell_shrink;\r\n    function move(node, targetX, targetY, time, func, delay, ease) {\r\n        Laya.Tween.to(node, { x: targetX, y: targetY }, time, ease ? ease : null, Laya.Handler.create(this, function () {\r\n            if (func) {\r\n                func();\r\n            }\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.move = move;\r\n    function move_Deform_X(node, firstX, firstR, targetX, scaleX, scaleY, time, delay, func) {\r\n        node.alpha = 0;\r\n        node.x = firstX;\r\n        node.rotation = firstR;\r\n        Laya.Tween.to(node, { x: targetX, scaleX: 1 + scaleX, scaleY: 1 + scaleY, rotation: firstR / 3, alpha: 1 }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { scaleX: 1, scaleY: 1, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.move_Deform_X = move_Deform_X;\r\n    function move_Deform_Y(target, firstY, firstR, targeY, scaleX, scaleY, time, delay, func) {\r\n        target.alpha = 0;\r\n        if (firstY) {\r\n            target.y = firstY;\r\n        }\r\n        target.rotation = firstR;\r\n        Laya.Tween.to(target, { y: targeY, scaleX: 1 + scaleX, scaleY: 1 + scaleY, rotation: firstR / 3, alpha: 1 }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(target, { scaleX: 1, scaleY: 1, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.move_Deform_Y = move_Deform_Y;\r\n    function blink_FadeOut_v(target, minAlpha, maXalpha, time, delay, func) {\r\n        target.alpha = minAlpha;\r\n        Laya.Tween.to(target, { alpha: maXalpha }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(target, { alpha: minAlpha }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.blink_FadeOut_v = blink_FadeOut_v;\r\n    function blink_FadeOut(target, minAlpha, maXalpha, time, delay, func) {\r\n        target.alpha = minAlpha;\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n        Laya.Tween.to(target, { alpha: minAlpha }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(target, { alpha: maXalpha }, time, null, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), 0);\r\n        }), delay);\r\n    }\r\n    LwgAni2D.blink_FadeOut = blink_FadeOut;\r\n    function shookHead_Simple(target, rotate, time, delay, func) {\r\n        let firstR = target.rotation;\r\n        Laya.Tween.to(target, { rotation: firstR + rotate }, time, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(target, { rotation: firstR - rotate * 2 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { rotation: firstR + rotate }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(target, { rotation: firstR }, time, null, Laya.Handler.create(this, function () {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.shookHead_Simple = shookHead_Simple;\r\n    function hideAni_01(target, upNum, time1, stopTime, downNum, time2, func) {\r\n        target.alpha = 0;\r\n        Laya.Tween.to(target, { alpha: 1, y: target.y - upNum }, time1, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(target, { y: target.y - 15 }, stopTime, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { alpha: 0, y: target.y + upNum + downNum }, time2, null, Laya.Handler.create(this, function () {\r\n                    if (func !== null) {\r\n                        func();\r\n                    }\r\n                }), 0);\r\n            }), 0);\r\n        }), 0);\r\n    }\r\n    LwgAni2D.hideAni_01 = hideAni_01;\r\n    function scale_Alpha(target, fAlpha, fScaleX, fScaleY, eScaleX, eScaleY, eAlpha, time, delay, func, ease) {\r\n        if (!delay) {\r\n            delay = 0;\r\n        }\r\n        if (!ease) {\r\n            ease = null;\r\n        }\r\n        target.alpha = fAlpha;\r\n        target.scaleX = fScaleX;\r\n        target.scaleY = fScaleY;\r\n        Laya.Tween.to(target, { scaleX: eScaleX, scaleY: eScaleY, alpha: eAlpha }, time, ease, Laya.Handler.create(this, function () {\r\n            if (func) {\r\n                func();\r\n            }\r\n        }), delay);\r\n    }\r\n    LwgAni2D.scale_Alpha = scale_Alpha;\r\n    function scale(target, fScaleX, fScaleY, eScaleX, eScaleY, time, delay, func, ease) {\r\n        target.scaleX = fScaleX;\r\n        target.scaleY = fScaleY;\r\n        Laya.Tween.to(target, { scaleX: eScaleX, scaleY: eScaleY }, time, ease ? ease : null, Laya.Handler.create(this, function () {\r\n            if (func) {\r\n                func();\r\n            }\r\n        }), delay ? delay : 0);\r\n    }\r\n    LwgAni2D.scale = scale;\r\n    function rotate_Magnify_KickBack(node, eAngle, eScale, time1, time2, delay1, delay2, func) {\r\n        node.alpha = 0;\r\n        node.scaleX = 0;\r\n        node.scaleY = 0;\r\n        Laya.Tween.to(node, { alpha: 1, rotation: 360 + eAngle, scaleX: 1 + eScale, scaleY: 1 + eScale }, time1, null, Laya.Handler.create(this, function () {\r\n            Laya.Tween.to(node, { rotation: 360 - eAngle / 2, scaleX: 1 + eScale / 2, scaleY: 1 + eScale / 2 }, time2, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { rotation: 360 + eAngle / 3, scaleX: 1 + eScale / 5, scaleY: 1 + eScale / 5 }, time2, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { rotation: 360, scaleX: 1, scaleY: 1 }, time2, null, Laya.Handler.create(this, function () {\r\n                        node.rotation = 0;\r\n                        if (func !== null) {\r\n                            func();\r\n                        }\r\n                    }), 0);\r\n                }), delay2);\r\n            }), 0);\r\n        }), delay1);\r\n    }\r\n    LwgAni2D.rotate_Magnify_KickBack = rotate_Magnify_KickBack;\r\n})(LwgAni2D || (LwgAni2D = {}));\r\nexport var LwgSet;\r\n(function (LwgSet) {\r\n    class Sound {\r\n        static get switch() {\r\n            return Laya.LocalStorage.getItem('Setting/sound') == '0' ? false : true;\r\n        }\r\n        static set switch(value) {\r\n            let val;\r\n            if (value) {\r\n                val = 1;\r\n            }\r\n            else {\r\n                val = 0;\r\n            }\r\n            Laya.LocalStorage.setItem('Setting/sound', val.toString());\r\n        }\r\n    }\r\n    LwgSet.Sound = Sound;\r\n    ;\r\n    class BgMusic {\r\n        static get switch() {\r\n            return Laya.LocalStorage.getItem('Setting/bgMusic') == '0' ? false : true;\r\n        }\r\n        static set switch(value) {\r\n            let val;\r\n            if (value) {\r\n                val = 1;\r\n                Laya.LocalStorage.setItem('Setting/bgMusic', val.toString());\r\n                LwgSound.playMusic();\r\n            }\r\n            else {\r\n                val = 0;\r\n                Laya.LocalStorage.setItem('Setting/bgMusic', val.toString());\r\n                LwgSound.stopMusic();\r\n            }\r\n        }\r\n    }\r\n    LwgSet.BgMusic = BgMusic;\r\n    ;\r\n    class Shake {\r\n        static get switch() {\r\n            return Laya.LocalStorage.getItem('Setting/shake') == '0' ? false : true;\r\n        }\r\n        static set switch(value) {\r\n            let val;\r\n            if (value) {\r\n                val = 1;\r\n            }\r\n            else {\r\n                val = 0;\r\n            }\r\n            Laya.LocalStorage.setItem('Setting/shake', val.toString());\r\n        }\r\n    }\r\n    LwgSet.Shake = Shake;\r\n    ;\r\n    class Button extends LwgScene.ViewObjBase {\r\n        static get ins() {\r\n            if (!this._ins) {\r\n                this._ins = new Button();\r\n            }\r\n            return this._ins;\r\n        }\r\n        createCb() {\r\n            this.view.on(Laya.Event.CLICK, this, this.onView);\r\n        }\r\n        onView(e) {\r\n            e.stopPropagation();\r\n            LwgScene.openScene(LwgScene.NameBase.Set);\r\n        }\r\n    }\r\n    LwgSet.Button = Button;\r\n})(LwgSet || (LwgSet = {}));\r\nexport var LwgSound;\r\n(function (LwgSound) {\r\n    class Init {\r\n        constructor(_bgmUrl, _btnUrl, _victoryUrl, _defeatedUrl, _getMoneyUrl) {\r\n            LwgSound.bgmUrl = _bgmUrl;\r\n            LwgSound.btnUrl = _btnUrl;\r\n            LwgSound.victoryUrl = _victoryUrl;\r\n            LwgSound.defeatedUrl = _defeatedUrl;\r\n            LwgSound.getMoneyUrl = _getMoneyUrl;\r\n        }\r\n        get name() {\r\n            return 'LwgSound';\r\n        }\r\n    }\r\n    LwgSound.Init = Init;\r\n    LwgSound.bgmUrl = '';\r\n    LwgSound.btnUrl = '';\r\n    LwgSound.victoryUrl = '';\r\n    LwgSound.defeatedUrl = '';\r\n    LwgSound.getMoneyUrl = '';\r\n    function playSound(url, number, func) {\r\n        if (!url) {\r\n            url = LwgSound.btnUrl;\r\n        }\r\n        if (!number) {\r\n            number = 1;\r\n        }\r\n        if (LwgSet.Sound.switch) {\r\n            Laya.SoundManager.playSound(url, number, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    LwgSound.playSound = playSound;\r\n    function playBtnSound(number, func) {\r\n        if (!number) {\r\n            number = 1;\r\n        }\r\n        if (LwgSet.Sound.switch) {\r\n            Laya.SoundManager.playSound(LwgSound.btnUrl, number, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    LwgSound.playBtnSound = playBtnSound;\r\n    function playDefeatedSound(url, number, func, soundVolume) {\r\n        if (LwgSet.Sound.switch) {\r\n            Laya.SoundManager.soundVolume = soundVolume ? soundVolume : 1;\r\n            Laya.SoundManager.playSound(url ? url : LwgSound.defeatedUrl, number ? number : 1, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n                Laya.SoundManager.soundVolume = 1;\r\n            }));\r\n        }\r\n    }\r\n    LwgSound.playDefeatedSound = playDefeatedSound;\r\n    function playVictorySound(url, number, func, soundVolume) {\r\n        if (LwgSet.Sound.switch) {\r\n            Laya.SoundManager.soundVolume = soundVolume ? soundVolume : 1;\r\n            Laya.SoundManager.playSound(url ? url : LwgSound.victoryUrl, number ? number : 1, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n                Laya.SoundManager.soundVolume = 1;\r\n            }));\r\n        }\r\n    }\r\n    LwgSound.playVictorySound = playVictorySound;\r\n    function playMusic(url, number, delay) {\r\n        if (LwgSet.BgMusic.switch) {\r\n            Laya.SoundManager.playMusic(url ? url : LwgSound.bgmUrl, number ? number : 0, Laya.Handler.create(this, function () { }), delay ? delay : 0);\r\n        }\r\n    }\r\n    LwgSound.playMusic = playMusic;\r\n    function stopMusic() {\r\n        Laya.SoundManager.stopMusic();\r\n    }\r\n    LwgSound.stopMusic = stopMusic;\r\n    function stopSound(url) {\r\n        Laya.SoundManager.stopSound(url);\r\n    }\r\n    LwgSound.stopSound = stopSound;\r\n    function stopAllSound() {\r\n        Laya.SoundManager.stopAllSound();\r\n    }\r\n    LwgSound.stopAllSound = stopAllSound;\r\n    function stopAll() {\r\n        Laya.SoundManager.stopAll();\r\n    }\r\n    LwgSound.stopAll = stopAll;\r\n})(LwgSound || (LwgSound = {}));\r\nexport var LwgTools;\r\n(function (LwgTools) {\r\n    let GameLevels;\r\n    (function (GameLevels) {\r\n        function getMsgFromSprite3D(spirte) {\r\n            if (!spirte || spirte.destroyed) {\r\n                console.log(\"------ getMsg err\");\r\n                return;\r\n            }\r\n            console.log(\"------- getMsg start\");\r\n            let levelArr = [];\r\n            let LvRECORD = {\r\n                RECORDS: []\r\n            };\r\n            for (let i = 0; i < spirte.numChildren; i++) {\r\n                let levelMsg = {};\r\n                let child = spirte.getChildAt(i);\r\n                levelMsg[\"name\"] = child.name;\r\n                let list = [];\r\n                for (let j = 0; j < child.numChildren; j++) {\r\n                    let son = child.getChildAt(j);\r\n                    let data = {};\r\n                    setData(data, son);\r\n                    list.push(data);\r\n                }\r\n                levelMsg[\"childData\"] = list;\r\n                levelArr.push(levelMsg);\r\n            }\r\n            LvRECORD.RECORDS = levelArr;\r\n            writeMsgToFileThenDownload(JSON.stringify(LvRECORD), 'LevelsMsg.json');\r\n        }\r\n        GameLevels.getMsgFromSprite3D = getMsgFromSprite3D;\r\n        function writeMsgToFileThenDownload(content, filename) {\r\n            const eleLink = document.createElement('a');\r\n            eleLink.download = filename;\r\n            eleLink.style.display = 'none';\r\n            const blob = new Blob([content]);\r\n            eleLink.href = URL.createObjectURL(blob);\r\n            document.body.appendChild(eleLink);\r\n            eleLink.click();\r\n            document.body.removeChild(eleLink);\r\n        }\r\n        function setData(data, obj) {\r\n            data[\"name\"] = obj.name;\r\n            data[\"active\"] = obj.active;\r\n            data[\"data\"] = {\r\n                \"localPositionX\": obj.transform.localPosition.x,\r\n                \"localPositionY\": obj.transform.localPosition.y,\r\n                \"localPositionZ\": obj.transform.localPosition.z,\r\n                \"localRotationEulerX\": obj.transform.localRotationEuler.x,\r\n                \"localRotationEulerY\": obj.transform.localRotationEuler.y,\r\n                \"localRotationEulerZ\": obj.transform.localRotationEuler.z,\r\n                \"localScaleX\": obj.transform.localScale.x,\r\n                \"localScaleY\": obj.transform.localScale.y,\r\n                \"localScaleZ\": obj.transform.localScale.z,\r\n            };\r\n        }\r\n    })(GameLevels = LwgTools.GameLevels || (LwgTools.GameLevels = {}));\r\n    let Format;\r\n    (function (Format) {\r\n        function numberConvertedtoChinese(number) {\r\n            let str = '';\r\n            switch (number) {\r\n                case 1:\r\n                    str = '一';\r\n                    break;\r\n                case 2:\r\n                    str = '二';\r\n                    break;\r\n                case 3:\r\n                    str = '三';\r\n                    break;\r\n                case 4:\r\n                    str = '四';\r\n                    break;\r\n                case 5:\r\n                    str = '五';\r\n                    break;\r\n                case 6:\r\n                    str = '六';\r\n                    break;\r\n                case 7:\r\n                    str = '七';\r\n                    break;\r\n                case 8:\r\n                    str = '八';\r\n                    break;\r\n                case 9:\r\n                    str = '九';\r\n                    break;\r\n                case 10:\r\n                    str = '十';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return str;\r\n        }\r\n        Format.numberConvertedtoChinese = numberConvertedtoChinese;\r\n        function formatNumber(crc, fixNum = 0) {\r\n            let textTemp;\r\n            if (crc >= 1e27) {\r\n                textTemp = (crc / 1e27).toFixed(fixNum) + \"ae\";\r\n            }\r\n            else if (crc >= 1e24) {\r\n                textTemp = (crc / 1e24).toFixed(fixNum) + \"ad\";\r\n            }\r\n            else if (crc >= 1e21) {\r\n                textTemp = (crc / 1e21).toFixed(fixNum) + \"ac\";\r\n            }\r\n            else if (crc >= 1e18) {\r\n                textTemp = (crc / 1e18).toFixed(fixNum) + \"ab\";\r\n            }\r\n            else if (crc >= 1e15) {\r\n                textTemp = (crc / 1e15).toFixed(fixNum) + \"aa\";\r\n            }\r\n            else if (crc >= 1e12) {\r\n                textTemp = (crc / 1e12).toFixed(fixNum) + \"t\";\r\n            }\r\n            else if (crc >= 1e9) {\r\n                textTemp = (crc / 1e9).toFixed(fixNum) + \"b\";\r\n            }\r\n            else if (crc >= 1e6) {\r\n                textTemp = (crc / 1e6).toFixed(fixNum) + \"m\";\r\n            }\r\n            else if (crc >= 1e3) {\r\n                textTemp = (crc / 1e3).toFixed(fixNum) + \"k\";\r\n            }\r\n            else {\r\n                textTemp = Math.round(crc).toString();\r\n            }\r\n            return textTemp;\r\n        }\r\n        Format.formatNumber = formatNumber;\r\n        function strAddNum(str, num) {\r\n            return (Number(str) + num).toString();\r\n        }\r\n        Format.strAddNum = strAddNum;\r\n        function NumAddStr(num, str) {\r\n            return Number(str) + num;\r\n        }\r\n        Format.NumAddStr = NumAddStr;\r\n    })(Format = LwgTools.Format || (LwgTools.Format = {}));\r\n    let Node;\r\n    (function (Node_1) {\r\n        function childrenReverseOrder(spParent) {\r\n            for (let index = 0; index < spParent.numChildren; index++) {\r\n                const element = spParent.getChildAt(index);\r\n                spParent.setChildIndex(element, 0);\r\n            }\r\n        }\r\n        Node_1.childrenReverseOrder = childrenReverseOrder;\r\n        function tieByParent(Node) {\r\n            const Parent = Node.parent;\r\n            if (Node.x > Parent.width - Node.width / 2) {\r\n                Node.x = Parent.width - Node.width / 2;\r\n            }\r\n            if (Node.x < Node.width / 2) {\r\n                Node.x = Node.width / 2;\r\n            }\r\n            if (Node.y > Parent.height - Node.height / 2) {\r\n                Node.y = Parent.height - Node.height / 2;\r\n            }\r\n            if (Node.y < Node.height / 2) {\r\n                Node.y = Node.height / 2;\r\n            }\r\n        }\r\n        Node_1.tieByParent = tieByParent;\r\n        function tieByStage(Node, center) {\r\n            const Parent = Node.parent;\r\n            const gPoint = Parent.localToGlobal(new Laya.Point(Node.x, Node.y));\r\n            if (!center) {\r\n                if (gPoint.x > Laya.stage.width) {\r\n                    gPoint.x = Laya.stage.width;\r\n                }\r\n            }\r\n            else {\r\n                if (gPoint.x > Laya.stage.width - Node.width / 2) {\r\n                    gPoint.x = Laya.stage.width - Node.width / 2;\r\n                }\r\n            }\r\n            if (!center) {\r\n                if (gPoint.x < 0) {\r\n                    gPoint.x = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (gPoint.x < Node.width / 2) {\r\n                    gPoint.x = Node.width / 2;\r\n                }\r\n            }\r\n            if (!center) {\r\n                if (gPoint.y > Laya.stage.height) {\r\n                    gPoint.y = Laya.stage.height;\r\n                }\r\n            }\r\n            else {\r\n                if (gPoint.y > Laya.stage.height - Node.height / 2) {\r\n                    gPoint.y = Laya.stage.height - Node.height / 2;\r\n                }\r\n            }\r\n            if (!center) {\r\n                if (gPoint.y < 0) {\r\n                    gPoint.y = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (gPoint.y < Node.height / 2) {\r\n                    gPoint.y = Node.height / 2;\r\n                }\r\n            }\r\n            const lPoint = Parent.globalToLocal(gPoint);\r\n            Node.pos(lPoint.x, lPoint.y);\r\n        }\r\n        Node_1.tieByStage = tieByStage;\r\n        function simpleCopyImg(Target) {\r\n            let Img = new Laya.Image;\r\n            Img.skin = Target.skin;\r\n            Img.width = Target.width;\r\n            Img.height = Target.height;\r\n            Img.pivotX = Target.pivotX;\r\n            Img.pivotY = Target.pivotY;\r\n            Img.scaleX = Target.scaleX;\r\n            Img.scaleY = Target.scaleY;\r\n            Img.skewX = Target.skewX;\r\n            Img.skewY = Target.skewY;\r\n            Img.rotation = Target.rotation;\r\n            Img.x = Target.x;\r\n            Img.y = Target.y;\r\n            return Img;\r\n        }\r\n        Node_1.simpleCopyImg = simpleCopyImg;\r\n        function leaveStage(_Sprite, func) {\r\n            let Parent = _Sprite.parent;\r\n            if (!Parent) {\r\n                return false;\r\n            }\r\n            let gPoint = Parent.localToGlobal(new Laya.Point(_Sprite.x, _Sprite.y));\r\n            if (gPoint.x > Laya.stage.width + 10 || gPoint.x < -10) {\r\n                if (func) {\r\n                    func();\r\n                }\r\n                return true;\r\n            }\r\n            if (gPoint.y > Laya.stage.height + 10 || gPoint.y < -10) {\r\n                if (func) {\r\n                    func();\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        Node_1.leaveStage = leaveStage;\r\n        function getNodeGP(sp) {\r\n            if (!sp.parent) {\r\n                return;\r\n            }\r\n            return sp.parent.localToGlobal(new Laya.Point(sp.x, sp.y));\r\n        }\r\n        Node_1.getNodeGP = getNodeGP;\r\n        function checkTwoDistance(_Sprite1, _Sprite2, distance, func) {\r\n            if (!_Sprite1 || !_Sprite2) {\r\n                return;\r\n            }\r\n            let Parent1 = _Sprite1.parent;\r\n            let Parent2 = _Sprite2.parent;\r\n            if (!_Sprite1.parent || !_Sprite2.parent) {\r\n                return;\r\n            }\r\n            let gPoint1 = Parent1.localToGlobal(new Laya.Point(_Sprite1.x, _Sprite1.y));\r\n            let gPoint2 = Parent2.localToGlobal(new Laya.Point(_Sprite2.x, _Sprite2.y));\r\n            if (gPoint1.distance(gPoint2.x, gPoint2.y) <= distance) {\r\n                func && func();\r\n            }\r\n            return gPoint1.distance(gPoint2.x, gPoint2.y);\r\n        }\r\n        Node_1.checkTwoDistance = checkTwoDistance;\r\n        function childZOrderByY(sp, zOrder, along) {\r\n            let arr = [];\r\n            if (sp.numChildren == 0) {\r\n                return arr;\r\n            }\r\n            ;\r\n            for (let index = 0; index < sp.numChildren; index++) {\r\n                const element = sp.getChildAt(index);\r\n                arr.push(element);\r\n            }\r\n            ObjArray.sortByProperty(arr, 'y');\r\n            if (zOrder) {\r\n                for (let index = 0; index < arr.length; index++) {\r\n                    const element = arr[index];\r\n                    element['zOrder'] = index;\r\n                }\r\n            }\r\n            if (along) {\r\n                let arr0 = [];\r\n                for (let index = arr.length - 1; index >= 0; index--) {\r\n                    const element = arr[index];\r\n                    console.log(element);\r\n                    element['zOrder'] = arr.length - index;\r\n                    arr0.push(element);\r\n                }\r\n                return arr0;\r\n            }\r\n            else {\r\n                return arr;\r\n            }\r\n        }\r\n        Node_1.childZOrderByY = childZOrderByY;\r\n        function changePivot(sp, _pivotX, _pivotY, int) {\r\n            let originalPovitX = sp.pivotX;\r\n            let originalPovitY = sp.pivotY;\r\n            if (int) {\r\n                _pivotX = Math.round(_pivotX);\r\n                _pivotY = Math.round(_pivotY);\r\n            }\r\n            if (sp.width) {\r\n                sp.pivot(_pivotX, _pivotY);\r\n                sp.x += (sp.pivotX - originalPovitX);\r\n                sp.y += (sp.pivotY - originalPovitY);\r\n            }\r\n        }\r\n        Node_1.changePivot = changePivot;\r\n        function changePivotCenter(sp, int) {\r\n            let originalPovitX = sp.pivotX;\r\n            let originalPovitY = sp.pivotY;\r\n            let _pivotX;\r\n            let _pivotY;\r\n            if (int) {\r\n                _pivotX = Math.round(sp.width / 2);\r\n                _pivotY = Math.round(sp.height / 2);\r\n            }\r\n            if (sp.width) {\r\n                sp.pivot(sp.width / 2, sp.height / 2);\r\n                sp.x += (sp.pivotX - originalPovitX);\r\n                sp.y += (sp.pivotY - originalPovitY);\r\n            }\r\n        }\r\n        Node_1.changePivotCenter = changePivotCenter;\r\n        function getChildArrByProperty(node, property, value) {\r\n            let childArr = [];\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                const element = node.getChildAt(index);\r\n                if (element[property] == value) {\r\n                    childArr.push(element);\r\n                }\r\n            }\r\n            return childArr;\r\n        }\r\n        Node_1.getChildArrByProperty = getChildArrByProperty;\r\n        function randomChildren(node, num) {\r\n            let childArr = [];\r\n            let indexArr = [];\r\n            for (let i = 0; i < node.numChildren; i++) {\r\n                indexArr.push(i);\r\n            }\r\n            let randomIndex = LwgTools.Arr.randomGetOut(indexArr, num);\r\n            for (let j = 0; j < randomIndex.length; j++) {\r\n                childArr.push(node.getChildAt(randomIndex[j]));\r\n            }\r\n            return childArr;\r\n        }\r\n        Node_1.randomChildren = randomChildren;\r\n        function destroyAllChildren(node) {\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                const element = node.getChildAt(index);\r\n                element.destroy(true);\r\n                index--;\r\n            }\r\n        }\r\n        Node_1.destroyAllChildren = destroyAllChildren;\r\n        function destroyOneChildren(node, nodeName) {\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                const element = node.getChildAt(index);\r\n                if (element.name == nodeName) {\r\n                    element.destroy(true);\r\n                    index--;\r\n                }\r\n            }\r\n        }\r\n        Node_1.destroyOneChildren = destroyOneChildren;\r\n        function removeAllChildren(node) {\r\n            if (node.numChildren > 0) {\r\n                node.removeChildren(0, node.numChildren - 1);\r\n            }\r\n        }\r\n        Node_1.removeAllChildren = removeAllChildren;\r\n        function removeOneChildren(node, nodeName) {\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                const element = node.getChildAt(index);\r\n                if (element.name == nodeName) {\r\n                    element.removeSelf();\r\n                    index--;\r\n                }\r\n            }\r\n        }\r\n        Node_1.removeOneChildren = removeOneChildren;\r\n        function checkChildren(node, nodeName) {\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                const element = node.getChildAt(index);\r\n                if (element.name == nodeName) {\r\n                    return element;\r\n                }\r\n            }\r\n        }\r\n        Node_1.checkChildren = checkChildren;\r\n        function showExcludedChild2D(node, childNameArr, bool) {\r\n            for (let i = 0; i < node.numChildren; i++) {\r\n                let Child = node.getChildAt(i);\r\n                for (let j = 0; j < childNameArr.length; j++) {\r\n                    if (Child.name == childNameArr[j]) {\r\n                        if (bool || bool == undefined) {\r\n                            Child.visible = true;\r\n                        }\r\n                        else {\r\n                            Child.visible = false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (bool || bool == undefined) {\r\n                            Child.visible = false;\r\n                        }\r\n                        else {\r\n                            Child.visible = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Node_1.showExcludedChild2D = showExcludedChild2D;\r\n        function showExcludedChild3D(node, childNameArr, bool) {\r\n            for (let i = 0; i < node.numChildren; i++) {\r\n                let Child = node.getChildAt(i);\r\n                for (let j = 0; j < childNameArr.length; j++) {\r\n                    if (Child.name == childNameArr[j]) {\r\n                        if (bool || bool == undefined) {\r\n                            Child.active = true;\r\n                        }\r\n                        else {\r\n                            Child.active = false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (bool || bool == undefined) {\r\n                            Child.active = false;\r\n                        }\r\n                        else {\r\n                            Child.active = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Node_1.showExcludedChild3D = showExcludedChild3D;\r\n        function createPrefabByPool(prefab, Parent, point, script, zOrder, name) {\r\n            name = name ? name : prefab.json['props']['name'];\r\n            const Sp = Laya.Pool.getItemByCreateFun(name, prefab.create, prefab);\r\n            Parent && Parent.addChild(Sp);\r\n            point && Sp.pos(point[0], point[1]);\r\n            script && Sp.addComponent(script);\r\n            Sp.name = name;\r\n            LwgNode.addProperty(Sp);\r\n            if (zOrder)\r\n                Sp.zOrder = zOrder;\r\n            return Sp;\r\n        }\r\n        Node_1.createPrefabByPool = createPrefabByPool;\r\n        function childrenVisible2D(node, bool) {\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                const element = node.getChildAt(index);\r\n                if (bool) {\r\n                    element.visible = true;\r\n                }\r\n                else {\r\n                    element.visible = false;\r\n                }\r\n            }\r\n        }\r\n        Node_1.childrenVisible2D = childrenVisible2D;\r\n        function childrenVisible3D(node, bool) {\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                const element = node.getChildAt(index);\r\n                if (bool) {\r\n                    element.active = true;\r\n                }\r\n                else {\r\n                    element.active = false;\r\n                }\r\n            }\r\n        }\r\n        Node_1.childrenVisible3D = childrenVisible3D;\r\n        function findChild3D(parent, name) {\r\n            var item = null;\r\n            item = parent.getChildByName(name);\r\n            if (item != null)\r\n                return item;\r\n            var go = null;\r\n            for (var i = 0; i < parent.numChildren; i++) {\r\n                go = findChild3D(parent.getChildAt(i), name);\r\n                if (go != null)\r\n                    return go;\r\n            }\r\n            return null;\r\n        }\r\n        Node_1.findChild3D = findChild3D;\r\n        function findChild2D(parent, name) {\r\n            var item = null;\r\n            item = parent.getChildByName(name);\r\n            if (item != null)\r\n                return item;\r\n            var go = null;\r\n            for (var i = 0; i < parent.numChildren; i++) {\r\n                go = findChild2D(parent.getChildAt(i), name);\r\n                if (go != null)\r\n                    return go;\r\n            }\r\n            return null;\r\n        }\r\n        Node_1.findChild2D = findChild2D;\r\n        function findNodeBelongToParent(node, parentName) {\r\n            if (node.parent && node.parent.name == parentName) {\r\n                return node.parent;\r\n            }\r\n            else {\r\n                if (node.parent) {\r\n                    return findNodeBelongToParent(node.parent, parentName);\r\n                }\r\n            }\r\n        }\r\n        Node_1.findNodeBelongToParent = findNodeBelongToParent;\r\n    })(Node = LwgTools.Node || (LwgTools.Node = {}));\r\n    let Num;\r\n    (function (Num) {\r\n        function randomOneHalf() {\r\n            let number;\r\n            number = Math.floor(Math.random() * 2);\r\n            return number;\r\n        }\r\n        Num.randomOneHalf = randomOneHalf;\r\n        function randomNumerical(numSection, defaultNumSection, randomPlusOrMinus) {\r\n            let num = numSection ? LwgTools.Num.randomOneBySection(numSection[0], numSection[1]) : LwgTools.Num.randomOneBySection(defaultNumSection[0], defaultNumSection[1]);\r\n            if (randomPlusOrMinus) {\r\n                num = LwgTools.Num.randomOneHalf() === 0 ? num : -num;\r\n            }\r\n            return num;\r\n        }\r\n        Num.randomNumerical = randomNumerical;\r\n        function randomOneInt(section1, section2) {\r\n            if (section2) {\r\n                return Math.round(Math.random() * (section2 - section1)) + section1;\r\n            }\r\n            else {\r\n                return Math.round(Math.random() * section1);\r\n            }\r\n        }\r\n        Num.randomOneInt = randomOneInt;\r\n        function randomCountBySection(section1, section2, count, intSet) {\r\n            let arr = [];\r\n            if (!count) {\r\n                count = 1;\r\n            }\r\n            if (section2) {\r\n                while (count > arr.length) {\r\n                    let num;\r\n                    if (intSet || intSet == undefined) {\r\n                        num = Math.round(Math.random() * (section2 - section1)) + section1;\r\n                    }\r\n                    else {\r\n                        num = Math.random() * (section2 - section1) + section1;\r\n                    }\r\n                    arr.push(num);\r\n                    Arr.unique01(arr);\r\n                }\r\n                ;\r\n                return arr;\r\n            }\r\n            else {\r\n                while (count > arr.length) {\r\n                    let num;\r\n                    if (intSet || intSet == undefined) {\r\n                        num = Math.round(Math.random() * section1);\r\n                    }\r\n                    else {\r\n                        num = Math.random() * section1;\r\n                    }\r\n                    arr.push(num);\r\n                    Arr.unique01(arr);\r\n                }\r\n                return arr;\r\n            }\r\n        }\r\n        Num.randomCountBySection = randomCountBySection;\r\n        function randomOneBySection(section1, section2, intSet) {\r\n            let chage;\r\n            if (section1 > section2) {\r\n                chage = section1;\r\n                section1 = section2;\r\n                section2 = chage;\r\n            }\r\n            if (section2) {\r\n                let num;\r\n                if (intSet) {\r\n                    num = Math.round(Math.random() * (section2 - section1)) + section1;\r\n                }\r\n                else {\r\n                    num = Math.random() * (section2 - section1) + section1;\r\n                }\r\n                return num;\r\n            }\r\n            else {\r\n                let num;\r\n                if (intSet) {\r\n                    num = Math.round(Math.random() * section1);\r\n                }\r\n                else {\r\n                    num = Math.random() * section1;\r\n                }\r\n                return num;\r\n            }\r\n        }\r\n        Num.randomOneBySection = randomOneBySection;\r\n    })(Num = LwgTools.Num || (LwgTools.Num = {}));\r\n    let Point;\r\n    (function (Point) {\r\n        function createBezierPoints(anchorpoints, pointsAmount) {\r\n            var points = [];\r\n            for (var i = 0; i < pointsAmount; i++) {\r\n                var point = multiPointBezier(anchorpoints, i / pointsAmount);\r\n                points.push(point);\r\n            }\r\n            return points;\r\n        }\r\n        Point.createBezierPoints = createBezierPoints;\r\n        function multiPointBezier(points, t) {\r\n            var len = points.length;\r\n            var x = 0, y = 0;\r\n            var erxiangshi = function (start, end) {\r\n                var cs = 1, bcs = 1;\r\n                while (end > 0) {\r\n                    cs *= start;\r\n                    bcs *= end;\r\n                    start--;\r\n                    end--;\r\n                }\r\n                return (cs / bcs);\r\n            };\r\n            for (var i = 0; i < len; i++) {\r\n                var point = points[i];\r\n                x += point.x * Math.pow((1 - t), (len - 1 - i)) * Math.pow(t, i) * (erxiangshi(len - 1, i));\r\n                y += point.y * Math.pow((1 - t), (len - 1 - i)) * Math.pow(t, i) * (erxiangshi(len - 1, i));\r\n            }\r\n            return { x: x, y: y };\r\n        }\r\n        function getOtherLocal(element, Other) {\r\n            let Parent = element.parent;\r\n            let gPoint = Parent.localToGlobal(new Laya.Point(element.x, element.y));\r\n            return Other.globalToLocal(gPoint);\r\n        }\r\n        Point.getOtherLocal = getOtherLocal;\r\n        function angleByRadian(angle) {\r\n            return Math.PI / 180 * angle;\r\n        }\r\n        Point.angleByRadian = angleByRadian;\r\n        function pointByAngleOld(x, y) {\r\n            const radian = Math.atan2(x, y);\r\n            let angle = 90 - radian * (180 / Math.PI);\r\n            if (angle <= 0) {\r\n                angle = 270 + (90 + angle);\r\n            }\r\n            return angle - 90;\r\n        }\r\n        Point.pointByAngleOld = pointByAngleOld;\r\n        ;\r\n        function pointByAngleNew(x, y) {\r\n            const radian = Math.atan2(y, x);\r\n            let angle = radian * (180 / Math.PI);\r\n            if (angle <= 0) {\r\n                angle = 360 + angle;\r\n            }\r\n            return angle;\r\n        }\r\n        Point.pointByAngleNew = pointByAngleNew;\r\n        ;\r\n        function angleByPoint(angle) {\r\n            const radian = (90 - angle) / (180 / Math.PI);\r\n            const p = new Laya.Point(Math.sin(radian), Math.cos(radian));\r\n            p.normalize();\r\n            return p;\r\n        }\r\n        Point.angleByPoint = angleByPoint;\r\n        ;\r\n        function angleByPointNew(angle) {\r\n            const rad = angleByRadian(angle);\r\n            const p = new Laya.Point(Math.cos(rad), Math.sin(rad));\r\n            p.normalize();\r\n            return p;\r\n        }\r\n        Point.angleByPointNew = angleByPointNew;\r\n        ;\r\n        function dotRotatePoint(x0, y0, x1, y1, angle) {\r\n            let x2 = x0 + (x1 - x0) * Math.cos(angle * Math.PI / 180) - (y1 - y0) * Math.sin(angle * Math.PI / 180);\r\n            let y2 = y0 + (x1 - x0) * Math.sin(angle * Math.PI / 180) + (y1 - y0) * Math.cos(angle * Math.PI / 180);\r\n            return new Laya.Point(x2, y2);\r\n        }\r\n        Point.dotRotatePoint = dotRotatePoint;\r\n        function angleAndLenByPoint(angle, len) {\r\n            const point = new Laya.Point();\r\n            point.x = len * Math.cos(angle * Math.PI / 180);\r\n            point.y = len * Math.sin(angle * Math.PI / 180);\r\n            return point;\r\n        }\r\n        Point.angleAndLenByPoint = angleAndLenByPoint;\r\n        function getRoundPosOld(angle, radius, centerPos) {\r\n            const radian = angleByRadian(angle);\r\n            const X = centerPos.x + Math.sin(radian) * radius;\r\n            const Y = centerPos.y - Math.cos(radian) * radius;\r\n            return new Laya.Point(X, Y);\r\n        }\r\n        Point.getRoundPosOld = getRoundPosOld;\r\n        function getRoundPosNew(angle, radius, centerPos) {\r\n            const radian = angleByRadian(angle);\r\n            if (centerPos) {\r\n                const x = centerPos.x + Math.cos(radian) * radius;\r\n                const y = centerPos.y + Math.sin(radian) * radius;\r\n                return new Laya.Point(x, y);\r\n            }\r\n            else {\r\n                return new Laya.Point(null, null);\r\n            }\r\n        }\r\n        Point.getRoundPosNew = getRoundPosNew;\r\n        function randomPointByCenter(centerPos, radiusX, radiusY, count = 1) {\r\n            let arr = [];\r\n            for (let index = 0; index < count; index++) {\r\n                let x0 = LwgTools.Num.randomCountBySection(0, radiusX, 1, false);\r\n                let y0 = LwgTools.Num.randomCountBySection(0, radiusY, 1, false);\r\n                let diffX = LwgTools.Num.randomOneHalf() == 0 ? x0[0] : -x0[0];\r\n                let diffY = LwgTools.Num.randomOneHalf() == 0 ? y0[0] : -y0[0];\r\n                let p = new Laya.Point(centerPos.x + diffX, centerPos.y + diffY);\r\n                arr.push(p);\r\n            }\r\n            return arr;\r\n        }\r\n        Point.randomPointByCenter = randomPointByCenter;\r\n        function getPArrBetweenTwoP(p1, p2, num) {\r\n            let arr = [];\r\n            let x0 = p2.x - p1.x;\r\n            let y0 = p2.y - p1.y;\r\n            for (let index = 0; index < num; index++) {\r\n                arr.push(new Laya.Point(p1.x + (x0 / num) * index, p1.y + (y0 / num) * index));\r\n            }\r\n            if (arr.length >= 1) {\r\n                arr.unshift();\r\n            }\r\n            if (arr.length >= 1) {\r\n                arr.pop();\r\n            }\r\n            return arr;\r\n        }\r\n        Point.getPArrBetweenTwoP = getPArrBetweenTwoP;\r\n        function reverseVector(Vecoter1, Vecoter2, normalizing) {\r\n            let p;\r\n            p = new Laya.Point(Vecoter1.x - Vecoter2.x, Vecoter1.y - Vecoter2.y);\r\n            if (normalizing) {\r\n                p.normalize();\r\n            }\r\n            return p;\r\n        }\r\n        Point.reverseVector = reverseVector;\r\n    })(Point = LwgTools.Point || (LwgTools.Point = {}));\r\n    let D3;\r\n    (function (D3) {\r\n        function setLightShadow(light, shadowMode = Laya.ShadowMode.SoftHigh, shadowDistance = 200, shadowResolution = 4096, shadowCascadesModeshadowCascadesMode = Laya.ShadowCascadesMode.NoCascades) {\r\n            light.shadowMode = shadowMode;\r\n            light.shadowDistance = shadowDistance;\r\n            light.shadowResolution = shadowResolution;\r\n            light.shadowCascadesMode = Laya.ShadowCascadesMode.NoCascades;\r\n        }\r\n        D3.setLightShadow = setLightShadow;\r\n        function setCastShadow(node, bool) {\r\n            if (node && !node.destroyed) {\r\n                if (node instanceof Laya.MeshSprite3D) {\r\n                    node.meshRenderer.castShadow = bool;\r\n                }\r\n                else if (node instanceof Laya.SkinnedMeshSprite3D) {\r\n                    node.skinnedMeshRenderer.castShadow = bool;\r\n                }\r\n                for (var i = 0; i < node.numChildren; i++) {\r\n                    this.setCastShadow(node.getChildAt(i), bool);\r\n                }\r\n            }\r\n        }\r\n        D3.setCastShadow = setCastShadow;\r\n        function setReceiveShadow(node, bool) {\r\n            if (node && !node.destroyed) {\r\n                if (node instanceof Laya.MeshSprite3D) {\r\n                    node.meshRenderer.receiveShadow = bool;\r\n                }\r\n                else if (node instanceof Laya.SkinnedMeshSprite3D) {\r\n                    node.skinnedMeshRenderer.receiveShadow = bool;\r\n                }\r\n                for (var i = 0; i < node.numChildren; i++) {\r\n                    this.setReceiveShadow(node.getChildAt(i), bool);\r\n                }\r\n            }\r\n        }\r\n        D3.setReceiveShadow = setReceiveShadow;\r\n        function randomScopeByPosition(sp3D, scopeSize) {\r\n            let _pX = LwgTools.Num.randomOneBySection(scopeSize[0][0], scopeSize[1][0]);\r\n            let _pY = LwgTools.Num.randomOneBySection(scopeSize[0][1], scopeSize[1][1]);\r\n            let _pZ = LwgTools.Num.randomOneBySection(scopeSize[0][2], scopeSize[1][2]);\r\n            _pX = LwgTools.Num.randomOneHalf() == 0 ? _pX : -_pX;\r\n            _pY = LwgTools.Num.randomOneHalf() == 0 ? _pY : -_pY;\r\n            _pZ = LwgTools.Num.randomOneHalf() == 0 ? _pZ : -_pZ;\r\n            sp3D.transform.position = new Laya.Vector3(sp3D.transform.position.x + _pX, sp3D.transform.position.y + _pY, sp3D.transform.position.z + _pZ);\r\n        }\r\n        D3.randomScopeByPosition = randomScopeByPosition;\r\n        function getMeshSize(MSp3D) {\r\n            if (MSp3D.meshRenderer) {\r\n                let v3;\r\n                let extent = MSp3D.meshRenderer.bounds.getExtent();\r\n                return v3 = new Laya.Vector3(extent.x * 2, extent.y * 2, extent.z * 2);\r\n            }\r\n        }\r\n        D3.getMeshSize = getMeshSize;\r\n        function getSkinMeshSize(MSp3D) {\r\n            if (MSp3D.skinnedMeshRenderer) {\r\n                let v3;\r\n                let extent = MSp3D.skinnedMeshRenderer.bounds.getExtent();\r\n                return v3 = new Laya.Vector3(extent.x * 2, extent.y * 2, extent.z * 2);\r\n            }\r\n        }\r\n        D3.getSkinMeshSize = getSkinMeshSize;\r\n        function getTwoNodeDistance(obj1, obj2) {\r\n            let obj1V3 = obj1.transform.position;\r\n            let obj2V3 = obj2.transform.position;\r\n            let p = new Laya.Vector3();\r\n            Laya.Vector3.subtract(obj1V3, obj2V3, p);\r\n            let lenp = Laya.Vector3.scalarLength(p);\r\n            return lenp;\r\n        }\r\n        D3.getTwoNodeDistance = getTwoNodeDistance;\r\n        function getTwoPositionDistance(v1, v2) {\r\n            let p = getTwoSubV3(v1, v2);\r\n            let lenp = Laya.Vector3.scalarLength(p);\r\n            return lenp;\r\n        }\r\n        D3.getTwoPositionDistance = getTwoPositionDistance;\r\n        function getTwoSubV3(V31, V32, normalizing) {\r\n            let p = new Laya.Vector3();\r\n            Laya.Vector3.subtract(V31, V32, p);\r\n            if (normalizing) {\r\n                let p1 = new Laya.Vector3();\r\n                Laya.Vector3.normalize(p, p1);\r\n                return p1;\r\n            }\r\n            else {\r\n                return p;\r\n            }\r\n        }\r\n        D3.getTwoSubV3 = getTwoSubV3;\r\n        function getMaximumDistanceLimit(originV3, obj, length) {\r\n            let subP = new Laya.Vector3();\r\n            let objP = obj.transform.position;\r\n            Laya.Vector3.subtract(objP, originV3, subP);\r\n            let lenP = Laya.Vector3.scalarLength(subP);\r\n            if (lenP >= length) {\r\n                let normalizP = new Laya.Vector3();\r\n                Laya.Vector3.normalize(subP, normalizP);\r\n                let x = originV3.x + normalizP.x * length;\r\n                let y = originV3.y + normalizP.y * length;\r\n                let z = originV3.z + normalizP.z * length;\r\n                let p = new Laya.Vector3(x, y, z);\r\n                obj.transform.position = p;\r\n                return p;\r\n            }\r\n        }\r\n        D3.getMaximumDistanceLimit = getMaximumDistanceLimit;\r\n        function getPosToScreen(v3, camera) {\r\n            let ScreenV4 = new Laya.Vector4();\r\n            camera.viewport.project(v3, camera.projectionViewMatrix, ScreenV4);\r\n            let point = new Laya.Vector2();\r\n            point.x = ScreenV4.x / Laya.stage.clientScaleX;\r\n            point.y = ScreenV4.y / Laya.stage.clientScaleY;\r\n            return point;\r\n        }\r\n        D3.getPosToScreen = getPosToScreen;\r\n        function getReverseV3(Vecoter1, Vecoter2, normalizing) {\r\n            let p = new Laya.Vector3(Vecoter1.x - Vecoter2.x, Vecoter1.y - Vecoter2.y, Vecoter1.z - Vecoter2.z);\r\n            if (normalizing) {\r\n                let returnP = new Laya.Vector3();\r\n                Laya.Vector3.normalize(p, returnP);\r\n                return returnP;\r\n            }\r\n            else {\r\n                return p;\r\n            }\r\n        }\r\n        D3.getReverseV3 = getReverseV3;\r\n        function rayScanning(camera, scene3D, vector2, filtrateName) {\r\n            let _ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\r\n            let outs = new Array();\r\n            const _v2 = new Laya.Vector2(Laya.stage.clientScaleX * vector2.x, Laya.stage.clientScaleY * vector2.y);\r\n            camera.viewportPointToRay(_v2, _ray);\r\n            scene3D.physicsSimulation.rayCastAll(_ray, outs);\r\n            if (filtrateName) {\r\n                let chek;\r\n                for (let i = 0; i < outs.length; i++) {\r\n                    let Sp3d = outs[i].collider.owner;\r\n                    if (Sp3d.name == filtrateName) {\r\n                        chek = outs[i];\r\n                    }\r\n                }\r\n                return chek;\r\n            }\r\n            else {\r\n                return outs;\r\n            }\r\n        }\r\n        D3.rayScanning = rayScanning;\r\n        function rayScanningFirst(camera, scene3D, vector2) {\r\n            let _ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\r\n            let out = new Laya.HitResult();\r\n            const _v2 = new Laya.Vector2(Laya.stage.clientScaleX * vector2.x, Laya.stage.clientScaleY * vector2.y);\r\n            camera.viewportPointToRay(_v2, _ray);\r\n            scene3D.physicsSimulation.rayCast(_ray, out);\r\n            return out;\r\n        }\r\n        D3.rayScanningFirst = rayScanningFirst;\r\n        function playAnimator(Sp3D, aniName, speed = 1, normalizedTime, layerIndex) {\r\n            let sp3DAni = Sp3D.getComponent(Laya.Animator);\r\n            sp3DAni.speed = speed;\r\n            if (!sp3DAni) {\r\n                console.log(Sp3D.name, '没有动画组件');\r\n                return;\r\n            }\r\n            if (!layerIndex) {\r\n                layerIndex = 0;\r\n            }\r\n            if (!aniName) {\r\n                console.log(Sp3D.name, '没有动画组件', aniName);\r\n            }\r\n            else {\r\n                try {\r\n                    sp3DAni.play(aniName, layerIndex);\r\n                }\r\n                catch (error) {\r\n                    console.log(Sp3D.name, '没有动画组件', aniName);\r\n                }\r\n            }\r\n            return sp3DAni;\r\n        }\r\n        D3.playAnimator = playAnimator;\r\n    })(D3 = LwgTools.D3 || (LwgTools.D3 = {}));\r\n    let Skeleton;\r\n    (function (Skeleton) {\r\n        function sk_indexControl(sk, name) {\r\n            sk.play(name, true);\r\n            sk.player.currentTime = 15 * 1000 / sk.player.cacheFrameRate;\r\n        }\r\n        Skeleton.sk_indexControl = sk_indexControl;\r\n    })(Skeleton = LwgTools.Skeleton || (LwgTools.Skeleton = {}));\r\n    let Draw;\r\n    (function (Draw) {\r\n        function drawPieMask(parent, startAngle, endAngle) {\r\n            parent.cacheAs = \"bitmap\";\r\n            let drawPieSpt = new Laya.Sprite();\r\n            drawPieSpt.blendMode = \"destination-out\";\r\n            parent.addChild(drawPieSpt);\r\n            let drawPie = drawPieSpt.graphics.drawPie(parent.width / 2, parent.height / 2, parent.width / 2 + 10, startAngle, endAngle, \"#000000\");\r\n            return drawPie;\r\n        }\r\n        Draw.drawPieMask = drawPieMask;\r\n        function screenshot(Sp, quality) {\r\n            const htmlCanvas = Sp.drawToCanvas(Sp.width, Sp.height, Sp.x, Sp.y);\r\n            const base64 = htmlCanvas.toBase64(\"image/png\", quality ? quality : 1);\r\n            return base64;\r\n        }\r\n        Draw.screenshot = screenshot;\r\n        Draw._texArr = [];\r\n        function cameraToSprite(camera, sprite) {\r\n            const _camera = camera.clone();\r\n            camera.scene.addChild(_camera);\r\n            _camera.transform.position = camera.transform.position;\r\n            _camera.transform.localRotationEuler = camera.transform.localRotationEuler;\r\n            _camera.renderTarget = new Laya.RenderTexture(sprite.width, sprite.height);\r\n            _camera.renderingOrder = -1;\r\n            _camera.clearFlag = Laya.CameraClearFlags.Sky;\r\n            const ptex = new Laya.Texture(_camera.renderTarget, Laya.Texture.DEF_UV);\r\n            sprite.graphics.drawTexture(ptex, sprite.x, sprite.y, sprite.width, sprite.height);\r\n            Draw._texArr.push(ptex);\r\n            if (Draw._texArr.length > 3) {\r\n                Draw._texArr[0].destroy();\r\n                Draw._texArr.shift();\r\n            }\r\n            LwgTimer.frameOnce(5, this, () => {\r\n                _camera.destroy();\r\n            });\r\n        }\r\n        Draw.cameraToSprite = cameraToSprite;\r\n        function drawToTex(Sp, quality) {\r\n            let tex = Sp.drawToTexture(Sp.width, Sp.height, Sp.x, Sp.y);\r\n            return tex;\r\n        }\r\n        Draw.drawToTex = drawToTex;\r\n        function maskRound(sp, circleArr, eliminate) {\r\n            if (eliminate == undefined || eliminate == true) {\r\n                Node.destroyAllChildren(sp);\r\n            }\r\n            let interactionArea = sp.getChildByName('maskRound');\r\n            if (!interactionArea) {\r\n                interactionArea = new Laya.Sprite();\r\n                interactionArea.name = 'maskRound';\r\n                interactionArea.blendMode = \"destination-out\";\r\n                sp.addChild(interactionArea);\r\n            }\r\n            sp.cacheAs = \"bitmap\";\r\n            for (let index = 0; index < circleArr.length; index++) {\r\n                interactionArea.graphics.drawCircle(circleArr[index][0], circleArr[index][1], circleArr[index][2], \"#000000\");\r\n            }\r\n            interactionArea.pos(0, 0);\r\n            return interactionArea;\r\n        }\r\n        Draw.maskRound = maskRound;\r\n        function maskRect(sp, roundrectArr, eliminate) {\r\n            if (eliminate == undefined || eliminate == true) {\r\n                Node.removeAllChildren(sp);\r\n            }\r\n            let interactionArea = sp.getChildByName('maskRectRound');\r\n            if (!interactionArea) {\r\n                interactionArea = new Laya.Sprite();\r\n                interactionArea.name = 'maskRectRound';\r\n                interactionArea.blendMode = \"destination-out\";\r\n                sp.addChild(interactionArea);\r\n            }\r\n            if (sp.cacheAs !== \"bitmap\")\r\n                sp.cacheAs = \"bitmap\";\r\n            for (let index = 0; index < roundrectArr.length; index++) {\r\n                const element = roundrectArr[index];\r\n                element[0] = Math.round(element[0]);\r\n                element[1] = Math.round(element[1]);\r\n                element[2] = Math.round(element[2]);\r\n                element[3] = Math.round(element[3]);\r\n                interactionArea.graphics.drawRect(element[0], element[1], element[2], element[3], { fillStyle: \"#000000\" });\r\n            }\r\n        }\r\n        Draw.maskRect = maskRect;\r\n        function maskRectRound(sp, roundrectArr, eliminate) {\r\n            if (eliminate == undefined || eliminate == true) {\r\n                Node.removeAllChildren(sp);\r\n            }\r\n            let interactionArea = sp.getChildByName('maskRectRound');\r\n            if (!interactionArea) {\r\n                interactionArea = new Laya.Sprite();\r\n                interactionArea.name = 'maskRectRound';\r\n                interactionArea.blendMode = \"destination-out\";\r\n                sp.addChild(interactionArea);\r\n            }\r\n            if (sp.cacheAs !== \"bitmap\")\r\n                sp.cacheAs = \"bitmap\";\r\n            for (let index = 0; index < roundrectArr.length; index++) {\r\n                const element = roundrectArr[index];\r\n                element[0] = Math.round(element[0]);\r\n                element[1] = Math.round(element[1]);\r\n                element[2] = Math.round(element[2]);\r\n                element[3] = Math.round(element[3]);\r\n                element[4] = Math.round(element[4]);\r\n                interactionArea.graphics.drawPath(element[0], element[1], [[\"moveTo\", element[4], 0], [\"lineTo\", element[2] - element[4], 0], [\"arcTo\", element[2], 0, element[2], element[4], element[4]], [\"lineTo\", element[2], element[3] - element[4]], [\"arcTo\", element[2], element[3], element[2] - element[4], element[3], element[4]], [\"lineTo\", element[3] - element[4], element[3]], [\"arcTo\", 0, element[3], 0, element[3] - element[4], element[4]], [\"lineTo\", 0, element[4]], [\"arcTo\", 0, 0, element[4], 0, element[4]], [\"closePath\"]], { fillStyle: \"#000000\" });\r\n                interactionArea.pivotX = element[2] / 2;\r\n                interactionArea.pivotY = element[3] / 2;\r\n                interactionArea.pos(0, 0);\r\n            }\r\n        }\r\n        Draw.maskRectRound = maskRectRound;\r\n    })(Draw = LwgTools.Draw || (LwgTools.Draw = {}));\r\n    let ObjArray;\r\n    (function (ObjArray_1) {\r\n        function sortByProperty(array, property) {\r\n            var compare = function (obj1, obj2) {\r\n                var val1 = obj1[property];\r\n                var val2 = obj2[property];\r\n                if (!isNaN(Number(val1)) && !isNaN(Number(val2))) {\r\n                    val1 = Number(val1);\r\n                    val2 = Number(val2);\r\n                }\r\n                if (val1 < val2) {\r\n                    return -1;\r\n                }\r\n                else if (val1 > val2) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            };\r\n            array.sort(compare);\r\n            return array;\r\n        }\r\n        ObjArray_1.sortByProperty = sortByProperty;\r\n        function getDiffProByTwo(objArr1, objArr2, property) {\r\n            var diffArr = [];\r\n            for (var i = 0; i < objArr1.length; i++) {\r\n                var obj1 = objArr1[i];\r\n                var obj1Name = obj1[property];\r\n                var isExist = false;\r\n                for (var j = 0; j < objArr2.length; j++) {\r\n                    var obj2 = objArr2[j];\r\n                    var obj2Name = obj2[property];\r\n                    if (obj2Name == obj1Name) {\r\n                        isExist = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isExist) {\r\n                    let diffObj = ObjArray.objCopy(obj1);\r\n                    diffArr.push(diffObj);\r\n                }\r\n            }\r\n            return diffArr;\r\n        }\r\n        ObjArray_1.getDiffProByTwo = getDiffProByTwo;\r\n        function mergeObjArr1ToObjArr2ByPro(objArr1, objArr2, proName) {\r\n            if (proName) {\r\n                for (let index = 0; index < objArr1.length; index++) {\r\n                    const obj1 = objArr1[index];\r\n                    for (let index = 0; index < objArr2.length; index++) {\r\n                        const obj2 = objArr2[index];\r\n                        for (const key in obj1) {\r\n                            if (Object.prototype.hasOwnProperty.call(obj1, key)) {\r\n                                if (obj2[key] === undefined) {\r\n                                    obj2[key] = obj1[key];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (const key1 in objArr1) {\r\n                    if (Object.prototype.hasOwnProperty.call(objArr1, key1)) {\r\n                        const obj1 = objArr1[key1];\r\n                        for (let index = 0; index < objArr2.length; index++) {\r\n                            const obj2 = objArr2[index];\r\n                            if (obj1[proName] != undefined && obj2[proName] !== undefined) {\r\n                                for (const objKey in obj1) {\r\n                                    if (Object.prototype.hasOwnProperty.call(obj1, objKey)) {\r\n                                        if (obj2[objKey] === undefined) {\r\n                                            obj2[objKey] = obj1[objKey];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ObjArray_1.mergeObjArr1ToObjArr2ByPro = mergeObjArr1ToObjArr2ByPro;\r\n        function identicalPropertyObjArr(data1, data2, property) {\r\n            var result = [];\r\n            for (var i = 0; i < data1.length; i++) {\r\n                var obj1 = data1[i];\r\n                var obj1Name = obj1[property];\r\n                var isExist = false;\r\n                for (var j = 0; j < data2.length; j++) {\r\n                    var obj2 = data2[j];\r\n                    var obj2Name = obj2[property];\r\n                    if (obj2Name == obj1Name) {\r\n                        isExist = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (isExist) {\r\n                    result.push(obj1);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        ObjArray_1.identicalPropertyObjArr = identicalPropertyObjArr;\r\n        function uniqueByPro(arr, property) {\r\n            for (var i = 0, len = arr.length; i < len; i++) {\r\n                for (var j = i + 1, len = arr.length; j < len; j++) {\r\n                    if (arr[i][property] === arr[j][property]) {\r\n                        arr.splice(j, 1);\r\n                        j--;\r\n                        len--;\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        ObjArray_1.uniqueByPro = uniqueByPro;\r\n        function getArrByValue(objArr, property) {\r\n            let arr = [];\r\n            for (let i = 0; i < objArr.length; i++) {\r\n                if (objArr[i][property]) {\r\n                    arr.push(objArr[i][property]);\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        ObjArray_1.getArrByValue = getArrByValue;\r\n        function arrCopy(ObjArray) {\r\n            var sourceCopy = ObjArray instanceof Array ? [] : {};\r\n            for (var item in ObjArray) {\r\n                sourceCopy[item] = typeof ObjArray[item] === 'object' ? objCopy(ObjArray[item]) : ObjArray[item];\r\n            }\r\n            return sourceCopy;\r\n        }\r\n        ObjArray_1.arrCopy = arrCopy;\r\n        function modifyProValue(objArr, pro, value) {\r\n            for (const key in objArr) {\r\n                if (Object.prototype.hasOwnProperty.call(objArr, key)) {\r\n                    const element = objArr[key];\r\n                    if (element[pro]) {\r\n                        element[pro] = value;\r\n                    }\r\n                }\r\n            }\r\n            return objArr;\r\n        }\r\n        ObjArray_1.modifyProValue = modifyProValue;\r\n        function objCopy(obj) {\r\n            var _copyObj = {};\r\n            for (const item in obj) {\r\n                if (obj.hasOwnProperty(item)) {\r\n                    const element = obj[item];\r\n                    if (typeof element === 'object') {\r\n                        if (Array.isArray(element)) {\r\n                            let arr1 = Arr.copy(element);\r\n                            _copyObj[item] = arr1;\r\n                        }\r\n                        else {\r\n                            objCopy(element);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _copyObj[item] = element;\r\n                    }\r\n                }\r\n            }\r\n            return _copyObj;\r\n        }\r\n        ObjArray_1.objCopy = objCopy;\r\n    })(ObjArray = LwgTools.ObjArray || (LwgTools.ObjArray = {}));\r\n    let Arr;\r\n    (function (Arr) {\r\n        function sort(arr, inverted = false) {\r\n            if (!inverted) {\r\n                arr.sort((x, y) => {\r\n                    if (x < y) {\r\n                        return -1;\r\n                    }\r\n                    else if (x > y) {\r\n                        return 1;\r\n                    }\r\n                    else {\r\n                        return 0;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                arr.sort((x, y) => {\r\n                    if (x < y) {\r\n                        return 1;\r\n                    }\r\n                    else if (x > y) {\r\n                        return -1;\r\n                    }\r\n                    else {\r\n                        return 0;\r\n                    }\r\n                });\r\n            }\r\n            return arr;\r\n        }\r\n        Arr.sort = sort;\r\n        function addToArray(array1, array2) {\r\n            for (let index = 0; index < array2.length; index++) {\r\n                const element = array2[index];\r\n                array1.push(element);\r\n            }\r\n            return array1;\r\n        }\r\n        Arr.addToArray = addToArray;\r\n        function inverted(array) {\r\n            let arr = [];\r\n            for (let index = array.length - 1; index >= 0; index--) {\r\n                const element = array[index];\r\n                arr.push(element);\r\n            }\r\n            array = arr;\r\n            return array;\r\n        }\r\n        Arr.inverted = inverted;\r\n        function randomGetOutNewArr(arr, num) {\r\n            if (!num) {\r\n                num = 1;\r\n            }\r\n            let arrCopy = Arr.copy(arr);\r\n            let arr0 = [];\r\n            if (num > arrCopy.length) {\r\n                console.log('数组长度小于取出的数！');\r\n                return;\r\n            }\r\n            else {\r\n                for (let index = 0; index < num; index++) {\r\n                    let ran = Math.round(Math.random() * (arrCopy.length - 1));\r\n                    let a1 = arrCopy[ran];\r\n                    arrCopy.splice(ran, 1);\r\n                    arr0.push(a1);\r\n                }\r\n                return arr0;\r\n            }\r\n        }\r\n        Arr.randomGetOutNewArr = randomGetOutNewArr;\r\n        function randomGetOut(arr, num) {\r\n            if (!num) {\r\n                num = 1;\r\n            }\r\n            let arrCopy = Arr.copy(arr);\r\n            let arr0 = [];\r\n            if (num > arrCopy.length) {\r\n                console.log('数组长度小于取出的数！');\r\n                return;\r\n            }\r\n            else {\r\n                for (let index = 0; index < num; index++) {\r\n                    let ran = Math.round(Math.random() * (arrCopy.length - 1));\r\n                    let a1 = arrCopy[ran];\r\n                    arrCopy.splice(ran, 1);\r\n                    arr0.push(a1);\r\n                }\r\n                return arr0;\r\n            }\r\n        }\r\n        Arr.randomGetOut = randomGetOut;\r\n        function randomGetOne(arr) {\r\n            let arrCopy = copy(arr);\r\n            let ran = Math.round(Math.random() * (arrCopy.length - 1));\r\n            return arrCopy[ran];\r\n        }\r\n        Arr.randomGetOne = randomGetOne;\r\n        function copy(arr1) {\r\n            var arr = [];\r\n            for (var i = 0; i < arr1.length; i++) {\r\n                arr.push(arr1[i]);\r\n            }\r\n            return arr;\r\n        }\r\n        Arr.copy = copy;\r\n        function unique01(arr) {\r\n            for (var i = 0, len = arr.length; i < len; i++) {\r\n                for (var j = i + 1, len = arr.length; j < len; j++) {\r\n                    if (arr[i] === arr[j]) {\r\n                        arr.splice(j, 1);\r\n                        j--;\r\n                        len--;\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        Arr.unique01 = unique01;\r\n        function unique02(arr) {\r\n            arr = arr.sort();\r\n            var arr1 = [arr[0]];\r\n            for (var i = 1, len = arr.length; i < len; i++) {\r\n                if (arr[i] !== arr[i - 1]) {\r\n                    arr1.push(arr[i]);\r\n                }\r\n            }\r\n            return arr1;\r\n        }\r\n        Arr.unique02 = unique02;\r\n        function unique03(arr) {\r\n            return Array.from(new Set(arr));\r\n        }\r\n        Arr.unique03 = unique03;\r\n        function oneExcludeOtherOne(arr1, arr2) {\r\n            let arr1Capy = Arr.copy(arr1);\r\n            let arr2Capy = Arr.copy(arr2);\r\n            for (let i = 0; i < arr1Capy.length; i++) {\r\n                for (let j = 0; j < arr2Capy.length; j++) {\r\n                    if (arr1Capy[i] == arr2Capy[j]) {\r\n                        arr1Capy.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n            return arr1Capy;\r\n        }\r\n        Arr.oneExcludeOtherOne = oneExcludeOtherOne;\r\n        function moreExclude(arrays, exclude) {\r\n            let arr0 = [];\r\n            for (let i = 0; i < arrays.length; i++) {\r\n                for (let j = 0; j < arrays[i].length; j++) {\r\n                    arr0.push(arrays[i][j]);\r\n                }\r\n            }\r\n            let arr1 = copy(arr0);\r\n            let arr2 = copy(arr1);\r\n            let arrNum = [];\r\n            for (let k = 0; k < arr2.length; k++) {\r\n                arrNum.push({\r\n                    name: arr2[k],\r\n                    num: 0,\r\n                });\r\n            }\r\n            for (let l = 0; l < arr0.length; l++) {\r\n                for (let m = 0; m < arrNum.length; m++) {\r\n                    if (arr0[l] == arrNum[m]['name']) {\r\n                        arrNum[m]['num']++;\r\n                    }\r\n                }\r\n            }\r\n            let arrAllHave = [];\r\n            let arrDiffHave = [];\r\n            for (let n = 0; n < arrNum.length; n++) {\r\n                const element = arrNum[n];\r\n                if (arrNum[n]['num'] == arrays.length) {\r\n                    arrAllHave.push(arrNum[n]['name']);\r\n                }\r\n                else {\r\n                    arrDiffHave.push(arrNum[n]['name']);\r\n                }\r\n            }\r\n            if (!exclude) {\r\n                return arrAllHave;\r\n            }\r\n            else {\r\n                return arrDiffHave;\r\n            }\r\n        }\r\n        Arr.moreExclude = moreExclude;\r\n    })(Arr = LwgTools.Arr || (LwgTools.Arr = {}));\r\n})(LwgTools || (LwgTools = {}));\r\nexport var LwgPreLoad;\r\n(function (LwgPreLoad) {\r\n    class Init {\r\n        constructor(_lodeLogShow = true) {\r\n            LwgPreLoad.lodeLogShow = _lodeLogShow;\r\n        }\r\n        get name() {\r\n            return 'LwgPreLoad';\r\n        }\r\n    }\r\n    LwgPreLoad.Init = Init;\r\n    class PreLoadScene extends LwgScene.SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.ImageArr = [];\r\n            this.TextureArr = [];\r\n            this.Prefab2DArr = [];\r\n            this.ViewsArr = [];\r\n            this.Scene3DArr = [];\r\n            this.Prefab3DArr = [];\r\n            this.Texture2DArr = [];\r\n            this.EffectsTex2DArr = [];\r\n            this.MaterialArr = [];\r\n            this.Mesh3DArr = [];\r\n            this.JsonArr = [];\r\n            this.SkeletonArr = [];\r\n            this.AtlasArr = [];\r\n            this.loadRes = [this.ImageArr, this.TextureArr, this.Prefab2DArr, this.ViewsArr, this.Prefab3DArr, this.Texture2DArr, this.EffectsTex2DArr, this.MaterialArr, this.Mesh3DArr, this.Scene3DArr, this.JsonArr, this.SkeletonArr, this.AtlasArr];\r\n            this.loadOrderIndex = 0;\r\n            this.sumProgress = 0;\r\n            this.currentProgress = 0;\r\n            this.lodeLogShow = true;\r\n        }\r\n        get lodePercent() {\r\n            return this.currentProgress / this.sumProgress;\r\n        }\r\n        lodeStart(res) {\r\n            for (const typeClass in res) {\r\n                if (Object.prototype.hasOwnProperty.call(res, typeClass)) {\r\n                    for (const resObj in res[typeClass]) {\r\n                        if (Object.prototype.hasOwnProperty.call(res[typeClass], resObj)) {\r\n                            const obj = res[typeClass][resObj];\r\n                            this[`${typeClass}Arr`].push(obj);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let index = 0; index < this.loadRes.length; index++) {\r\n                this.sumProgress += this.loadRes[index].length;\r\n                if (this.loadRes[index].length <= 0) {\r\n                    this.loadRes.splice(index, 1);\r\n                    index--;\r\n                }\r\n            }\r\n            const time = this.lwgOpenAni();\r\n            Laya.timer.once(time ? time : 0, this, () => {\r\n                if (LwgInit.scene) {\r\n                    LwgInit.scene.close();\r\n                }\r\n                this.lodeRules();\r\n            });\r\n        }\r\n        lodeStepComplete() { }\r\n        lodeAllComplete() { return 0; }\r\n        ;\r\n        lodeAllCompleteAfter() { return false; }\r\n        ;\r\n        stepComplete() {\r\n            this.currentProgress++;\r\n            LwgPreLoad.lodeLogShow && console.log('当前进度条进度:', this.currentProgress / this.sumProgress);\r\n            if (this.currentProgress >= this.sumProgress) {\r\n                if (this.sumProgress == 0) {\r\n                    return;\r\n                }\r\n                LwgPreLoad.lodeLogShow && console.log(`所有资源加载完成！此时所有资源可通过例如:Laya.loader.getRes(\"url\")获取`);\r\n                this.allComplete();\r\n            }\r\n            else {\r\n                let number = 0;\r\n                for (let index = 0; index <= this.loadOrderIndex; index++) {\r\n                    number += this.loadRes[index].length;\r\n                }\r\n                if (this.currentProgress === number) {\r\n                    this.loadOrderIndex++;\r\n                }\r\n                this.lodeStepComplete();\r\n                this.lodeRules();\r\n            }\r\n        }\r\n        allComplete() {\r\n            Laya.timer.once(this.lodeAllComplete(), this, () => {\r\n                if (!this.lodeAllCompleteAfter()) {\r\n                    if (this.owner.name === LwgScene.NameBase.PreLoadCutIn) {\r\n                        if (LwgScene.preLoadInfo.openIsOverlay) {\r\n                            this.openOverlayScene(LwgScene.preLoadInfo.openName);\r\n                        }\r\n                        else {\r\n                            this.openScene(LwgScene.preLoadInfo.openName);\r\n                        }\r\n                    }\r\n                    else if (this.owner.name === LwgScene.NameBase.PreLoad) {\r\n                        this.openScene(LwgScene.NameBase.Start);\r\n                        LwgSound.playMusic();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        lodeLog(resArr, index, res, typeName, completeFunc) {\r\n            const urlOrUrlArr = resArr[index].url;\r\n            if (typeof urlOrUrlArr === 'object') {\r\n                LwgPreLoad.lodeLogShow && console.log(typeName, `数组加载完成，为数组对象`, '长度为:', urlOrUrlArr.length);\r\n            }\r\n            else {\r\n                if (res == null) {\r\n                    LwgPreLoad.lodeLogShow && console.log(`XXXXXXXXXXX${typeName}:${urlOrUrlArr}加载失败！不会停止加载进程！, 数组下标为：${index}, 'XXXXXXXXXXX`);\r\n                }\r\n                else {\r\n                    LwgPreLoad.lodeLogShow && console.log(`${typeName}:${urlOrUrlArr}加载完成！, 数组下标为${index}`);\r\n                    completeFunc && completeFunc();\r\n                }\r\n            }\r\n            this.stepComplete();\r\n        }\r\n        addDestoryAndClear(obj) {\r\n            obj.destoryAndClear = () => {\r\n                obj['instance'] && obj['instance'].destroy(true);\r\n                obj['instance'] = null;\r\n                Laya.loader.clearRes(obj.url);\r\n                Laya.Loader.clearRes(obj.url);\r\n                Laya.Resource.destroyUnusedResources();\r\n            };\r\n        }\r\n        lodeRules() {\r\n            if (this.loadRes.length <= 0) {\r\n                LwgPreLoad.lodeLogShow && console.log('没有加载项');\r\n                this.allComplete();\r\n                return;\r\n            }\r\n            let alreadyClassifyLen = 0;\r\n            for (let i = 0; i < this.loadOrderIndex; i++) {\r\n                alreadyClassifyLen += this.loadRes[i].length;\r\n            }\r\n            const classifyIndex = this.currentProgress - alreadyClassifyLen;\r\n            switch (this.loadRes[this.loadOrderIndex]) {\r\n                case this.ImageArr:\r\n                    Laya.loader.load(this.ImageArr[classifyIndex].url, Laya.Handler.create(this, (res) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, res, '2D图片', null);\r\n                    }));\r\n                    break;\r\n                case this.ViewsArr:\r\n                    const scene2D = this.ViewsArr[classifyIndex];\r\n                    Laya.loader.load(LwgPath.VIEWS + scene2D.url + '.json', Laya.Handler.create(this, (scene) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, scene, '2D场景', () => {\r\n                            scene2D.instance = scene;\r\n                            scene2D.url = LwgPath.VIEWS + scene2D.url + '.json';\r\n                        });\r\n                    }), null, Laya.Loader.JSON);\r\n                    break;\r\n                case this.Scene3DArr:\r\n                    const scene3DLode = this.Scene3DArr[classifyIndex];\r\n                    Laya.Scene3D.load(scene3DLode.url + '.ls', Laya.Handler.create(this, (Scene3D) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, Scene3D, '3D场景', () => {\r\n                            scene3DLode.instance = Scene3D;\r\n                            this.addDestoryAndClear(scene3DLode);\r\n                            Laya.loader.setGroup(scene3DLode.url, scene3DLode.group);\r\n                        });\r\n                    }));\r\n                    break;\r\n                case this.Prefab3DArr:\r\n                    const prefab3D = this.Prefab3DArr[classifyIndex];\r\n                    if (typeof prefab3D.url === 'object') {\r\n                        prefab3D.instanceArr = [];\r\n                        let index = 0;\r\n                        var lodeSp3DArr = (urlArr, sprite3DArr, cb) => {\r\n                            const url = urlArr[index];\r\n                            if (!url) {\r\n                                cb && cb();\r\n                                return;\r\n                            }\r\n                            Laya.Sprite3D.load(url, Laya.Handler.create(this, (sp3d) => {\r\n                                if (sp3d) {\r\n                                    sprite3DArr.push(sp3d);\r\n                                    LwgPreLoad.lodeLogShow && console.log('3D预制体：', url, '加载成功');\r\n                                }\r\n                                else {\r\n                                    LwgPreLoad.lodeLogShow && console.log('XXXXXXXXXXX 3D预制体：', url, '不存在！,继续加载');\r\n                                }\r\n                                index++;\r\n                                lodeSp3DArr(urlArr, sprite3DArr, cb);\r\n                            }));\r\n                        };\r\n                        lodeSp3DArr(prefab3D.url, prefab3D.instanceArr, () => {\r\n                            this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, prefab3D.instanceArr, '3D预制体', null);\r\n                        });\r\n                    }\r\n                    else {\r\n                        Laya.Sprite3D.load(prefab3D.url + '.lh', Laya.Handler.create(this, (Sp3D) => {\r\n                            this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, Sp3D, '3D预制体', () => {\r\n                                prefab3D.instance = Sp3D;\r\n                                this.addDestoryAndClear(prefab3D);\r\n                            });\r\n                        }));\r\n                    }\r\n                    break;\r\n                case this.Mesh3DArr:\r\n                    const mesh3D = this.Mesh3DArr[classifyIndex];\r\n                    Laya.Mesh.load(this.Mesh3DArr[classifyIndex].url, Laya.Handler.create(this, (Mesh3D) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, Mesh3D, '3D网格', () => {\r\n                            mesh3D.instance = Mesh3D;\r\n                            this.addDestoryAndClear(mesh3D);\r\n                        });\r\n                    }));\r\n                    break;\r\n                case this.TextureArr:\r\n                    const texture = this.TextureArr[classifyIndex];\r\n                    Laya.loader.load(this.TextureArr[classifyIndex].url, Laya.Handler.create(this, (tex) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, tex, '纹理', () => {\r\n                            texture.instance = tex;\r\n                            this.addDestoryAndClear(texture);\r\n                        });\r\n                    }));\r\n                    break;\r\n                case this.Texture2DArr:\r\n                    const texture2D = this.Texture2DArr[classifyIndex];\r\n                    Laya.Texture2D.load(this.Texture2DArr[classifyIndex].url, Laya.Handler.create(this, (tex2D) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, tex2D, '3D纹理', () => {\r\n                            texture2D.instance = tex2D;\r\n                            this.addDestoryAndClear(texture2D);\r\n                        });\r\n                    }));\r\n                    break;\r\n                case this.EffectsTex2DArr:\r\n                    const effectsTex2D = this.Texture2DArr[classifyIndex];\r\n                    Laya.Texture2D.load(this.EffectsTex2DArr[classifyIndex].url, Laya.Handler.create(this, (tex2D) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, tex2D, '3D纹理', () => {\r\n                            effectsTex2D.instance = tex2D;\r\n                            this.addDestoryAndClear(effectsTex2D);\r\n                        });\r\n                    }));\r\n                    break;\r\n                case this.MaterialArr:\r\n                    const material = this.MaterialArr[classifyIndex];\r\n                    Laya.Material.load(this.MaterialArr[classifyIndex].url, Laya.Handler.create(this, (Material) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, Material, '3D纹理', () => {\r\n                            material.instance = Material;\r\n                            if (!material['already']) {\r\n                                material['already'] = true;\r\n                                material.url = LwgPath.PREFAB3D + prefab3D.url + '.lmat';\r\n                            }\r\n                            this.addDestoryAndClear(material);\r\n                        });\r\n                    }));\r\n                    break;\r\n                case this.JsonArr:\r\n                    const lodeObj = this.JsonArr[classifyIndex];\r\n                    Laya.loader.load(LwgPath.LWGAMEDATA + lodeObj.url + '.json', Laya.Handler.create(this, (Json) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, Json, '数据表', () => {\r\n                            if (lodeObj.dataArrName) {\r\n                                lodeObj.dataArr = Json[lodeObj.dataArrName];\r\n                            }\r\n                            else {\r\n                                lodeObj.dataArr = Json[\"RECORDS\"];\r\n                                lodeObj.instance = Json[\"RECORDS\"];\r\n                            }\r\n                        });\r\n                    }), null, Laya.Loader.JSON);\r\n                    break;\r\n                case this.SkeletonArr:\r\n                    const skeleton = this.SkeletonArr[classifyIndex];\r\n                    skeleton.templet.on(Laya.Event.ERROR, this, () => {\r\n                        console.log('XXXXXXXXXXX骨骼动画' + this.SkeletonArr[classifyIndex] + '加载失败！不会停止加载进程！', '数组下标为：', classifyIndex, 'XXXXXXXXXXX');\r\n                        this.stepComplete();\r\n                    });\r\n                    skeleton.templet.on(Laya.Event.COMPLETE, this, () => {\r\n                        console.log('骨骼动画', this.SkeletonArr[classifyIndex].url, '加载完成！', '数组下标为：', classifyIndex);\r\n                        this.stepComplete();\r\n                        this.addDestoryAndClear(skeleton);\r\n                    });\r\n                    skeleton.templet.loadAni(this.SkeletonArr[classifyIndex].url);\r\n                    break;\r\n                case this.Prefab2DArr:\r\n                    const prefab2D = this.Prefab2DArr[classifyIndex];\r\n                    Laya.loader.load(this.Prefab2DArr[classifyIndex].url, Laya.Handler.create(this, (prefabJson) => {\r\n                        this.lodeLog(this.loadRes[this.loadOrderIndex], classifyIndex, prefabJson, '2D预制体', () => {\r\n                            const _prefab = new Laya.Prefab();\r\n                            _prefab.json = prefabJson;\r\n                            prefab2D.instance = _prefab;\r\n                            this.addDestoryAndClear(prefab2D);\r\n                        });\r\n                    }));\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    LwgPreLoad.PreLoadScene = PreLoadScene;\r\n    class PreLoadCutInScene extends PreLoadScene {\r\n        lwgOnAwake() {\r\n            this.preLoadOpenName = LwgScene.preLoadInfo.openName;\r\n        }\r\n    }\r\n    LwgPreLoad.PreLoadCutInScene = PreLoadCutInScene;\r\n})(LwgPreLoad || (LwgPreLoad = {}));\r\nexport var LwgPath;\r\n(function (LwgPath) {\r\n    LwgPath.LWGEFFECT = '';\r\n    LwgPath.LWGEFFECT3D = '';\r\n    LwgPath.LWGUI = 'Game/UI/';\r\n    LwgPath.LWGVOICE = '';\r\n    LwgPath.LWGAMEDATA = 'GameData/';\r\n    LwgPath.VIEWS = 'Views/';\r\n    LwgPath.VIEWSBASE = 'Views/Base/';\r\n    LwgPath.PREFAB = 'Prefab/';\r\n    LwgPath.PREFABBASE = 'Prefab/Base/';\r\n    LwgPath.SCENE3D = 'Game3D/Scene3D/';\r\n    LwgPath.PREFAB3D = 'Game3D/Prefab3D/';\r\n})(LwgPath || (LwgPath = {}));\r\nexport var LwgInit;\r\n(function (LwgInit) {\r\n    class Init {\r\n        constructor(_LwgPlatform, _LwgControl, _LwgPrelode, _LwgScene, _LwgCurrency, _LwgCommon, _LwgClick, _LwgSound, _LwgAdaptive) {\r\n        }\r\n    }\r\n    LwgInit.Init = Init;\r\n})(LwgInit || (LwgInit = {}));\r\nexport var Lwg3D;\r\n(function (Lwg3D) {\r\n    class Script3DBase extends Laya.Script3D {\r\n        get cameraPos() {\r\n            if (!this['__cameraPos']) {\r\n                return this['__cameraPos'] = new Laya.Vector3(this.mainCamera.transform.localPositionX, this.mainCamera.transform.localPositionY, this.mainCamera.transform.localPositionZ);\r\n            }\r\n            else {\r\n                return this['__cameraPos'];\r\n            }\r\n        }\r\n        get mainCamera() {\r\n            if (!this['_MainCamera']) {\r\n                if (this.owner.getChildByName('Main Camera')) {\r\n                    return this['_MainCamera'] = this.owner.getChildByName('Main Camera');\r\n                }\r\n                for (let index = 0; index < this.owner.numChildren; index++) {\r\n                    const element = this.owner.getChildAt(index);\r\n                    if (typeof element == typeof (Laya.Camera)) {\r\n                        return this['_MainCamera'] = element;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return this['_MainCamera'];\r\n            }\r\n        }\r\n        set mainCamera(Camera) {\r\n            this['_MainCamera'] = Camera;\r\n        }\r\n        child(name) {\r\n            if (!this[`_child${name}`]) {\r\n                if (this.owner.getChildByName(name)) {\r\n                    return this[`_child${name}`] = this.owner.getChildByName(name);\r\n                }\r\n                else {\r\n                    console.log(`不存在子节点${name}`);\r\n                }\r\n            }\r\n            else {\r\n                return this[`_child${name}`];\r\n            }\r\n        }\r\n        getChildComponent(name, Component) {\r\n            if (!this[`_child${name}${Component}`]) {\r\n                let Child = this.owner.getChildByName(name);\r\n                if (Child) {\r\n                    if (Child[Component]) {\r\n                        return this[`_child${name}${Component}`] = Child[Component];\r\n                    }\r\n                    else {\r\n                        console.log(`${name}子节点没有${Component}组件`);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(`不存在子节点${name}`);\r\n                }\r\n            }\r\n            else {\r\n                return this[`_child${name}${Component}`];\r\n            }\r\n        }\r\n        childTrans(name) {\r\n            return this.getChildComponent(name, 'transform');\r\n        }\r\n        childMRenderer(name) {\r\n            return this.getChildComponent(name, 'meshRenderer');\r\n        }\r\n        getFindComponent(name, Component) {\r\n            if (!this[`_child${name}${Component}`]) {\r\n                let Node = LwgTools.Node.findChild3D(this.owner, name);\r\n                if (Node) {\r\n                    if (Node[Component]) {\r\n                        return this[`_child${name}${Component}`] = Node[Component];\r\n                    }\r\n                    else {\r\n                        console.log(`${name}场景内节点没有${Component}组件`);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(`场景内不存在子节点${name}`);\r\n                }\r\n            }\r\n            else {\r\n                return this[`_child${name}${Component}`];\r\n            }\r\n        }\r\n        find(name) {\r\n            if (!this[`_FindNode${name}`]) {\r\n                let Node = LwgTools.Node.findChild3D(this.owner, name);\r\n                if (Node) {\r\n                    return this[`_FindNode${name}`] = Node;\r\n                }\r\n                else {\r\n                    console.log(`不存在节点${name}`);\r\n                }\r\n            }\r\n            else {\r\n                return this[`_FindNode${name}`];\r\n            }\r\n        }\r\n        findMRenderer(name) {\r\n            return this.getFindComponent(name, 'meshRenderer');\r\n        }\r\n        findTrans(name) {\r\n            return this.getFindComponent(name, 'transform');\r\n        }\r\n        lwgReset() { }\r\n        lwgOnAwake() {\r\n        }\r\n        lwgEventRegister() { }\r\n        ;\r\n        evReg(name, func) {\r\n            LwgEvent.register(name, this, func);\r\n        }\r\n        evNotify(name, args) {\r\n            LwgEvent.notify(name, args);\r\n        }\r\n        lwgOnEnable() { }\r\n        lwgOnStart() { }\r\n        lwgOnUpdate() {\r\n        }\r\n        lwgOnDisable() {\r\n        }\r\n        lwgClear() {\r\n            Laya.timer.clearAll(this);\r\n            Laya.Tween.clearAll(this);\r\n            LwgEvent.offAllCaller(this);\r\n            Laya.timer.clearAll(this.owner);\r\n            Laya.Tween.clearAll(this.owner);\r\n            LwgEvent.offAllCaller(this.owner);\r\n        }\r\n    }\r\n    class Scene3DBase extends Script3DBase {\r\n        constructor() {\r\n            super();\r\n            this.cameraFp = new Laya.Vector3;\r\n        }\r\n        onAwake() {\r\n            this.calssName = this['__proto__']['constructor'].name;\r\n            if (this.mainCamera) {\r\n                this.cameraFp.x = this.mainCamera.transform.localPositionX;\r\n                this.cameraFp.y = this.mainCamera.transform.localPositionY;\r\n                this.cameraFp.z = this.mainCamera.transform.localPositionZ;\r\n            }\r\n            this.lwgOnAwake();\r\n        }\r\n        onEnable() {\r\n            this.owner[this.calssName] = this;\r\n            this.lwgEventRegister();\r\n            this.lwgOnEnable();\r\n            this.lwgOpenAni();\r\n        }\r\n        onStart() {\r\n            this.lwgOnStart();\r\n        }\r\n        lwgOpenAni() {\r\n        }\r\n        lwgVanishAni() {\r\n        }\r\n        onUpdate() {\r\n            this.lwgOnUpdate();\r\n        }\r\n        onDisable() {\r\n            this.lwgOnDisable();\r\n            this.lwgClear();\r\n        }\r\n    }\r\n    Lwg3D.Scene3DBase = Scene3DBase;\r\n    class Object3D extends Script3DBase {\r\n        constructor() {\r\n            super();\r\n        }\r\n        get Owner() {\r\n            return this.owner;\r\n        }\r\n        locScale() {\r\n            return this.Owner.transform.localScale;\r\n        }\r\n        locPos() {\r\n            return this.Owner.transform.localPosition;\r\n        }\r\n        pos() {\r\n            return this.Owner.transform.position;\r\n        }\r\n        locEuler() {\r\n            return this.Owner.transform.localRotationEuler;\r\n        }\r\n        get parent() {\r\n            return this.owner.parent;\r\n        }\r\n        get transform() {\r\n            return this.Owner.transform;\r\n        }\r\n        get scene3D() {\r\n            return this.owner.scene;\r\n        }\r\n        get rig3D() {\r\n            if (!this.Owner['__Rigidbody3D']) {\r\n                this.Owner['__Rigidbody3D'] = this.Owner.getComponent(Laya.Rigidbody3D);\r\n            }\r\n            return this.Owner['__Rigidbody3D'];\r\n        }\r\n        onAwake() {\r\n            this.lwgOnAwake();\r\n            this.ownerAnimator = this.owner.getComponent(Laya.Animator);\r\n        }\r\n        onEnable() {\r\n            this.lwgEventRegister();\r\n            this.lwgOnEnable();\r\n        }\r\n        onUpdate() {\r\n            this.lwgOnUpdate();\r\n        }\r\n        onDisable() {\r\n            this.lwgReset();\r\n            this.lwgOnDisable();\r\n            this.lwgClear();\r\n        }\r\n    }\r\n    Lwg3D.Object3D = Object3D;\r\n})(Lwg3D || (Lwg3D = {}));\r\nLwgPlatform;\r\nLwgWX;\r\nLwgControl;\r\nLwgScene;\r\nLwgAdaptive;\r\nLwgSceneAni;\r\nLwgNode;\r\nLwgDialogue;\r\nLwgEvent;\r\nLwgTimer;\r\nLwgData;\r\nLwgStorage;\r\nLwgDate;\r\nLwgSet;\r\nLwgSound;\r\nLwgClick;\r\nLwgColor;\r\nLwgEff2D;\r\nLwgAni2D;\r\nLwgCurrency;\r\nLwgTools;\r\nLwgCommon;\r\nLwgPath;\r\nLwgPreLoad;\r\nLwgGuide;\r\nLwgInit;\r\nLwg3D;\r\nLwgAni3D;\r\nLwgEff3D;\r\n",
  "references": [
    "E:/SVN/老王哥/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/ui/layaMaxUI.ts"
  ]
}
