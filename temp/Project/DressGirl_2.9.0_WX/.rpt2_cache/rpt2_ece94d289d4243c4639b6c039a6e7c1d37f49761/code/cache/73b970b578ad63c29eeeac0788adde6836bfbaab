{
  "code": "import { Lwg3D, LwgAni3D, LwgCurrency, LwgDialogue, LwgEvent, LwgTimer, LwgTools, LwgWX } from \"../../Lwg/Lwg\";\r\nimport { GameData } from \"../Control/GameData\";\r\nimport { GameEnum } from \"../Control/GameEnum\";\r\nimport { GameEvent } from \"../Control/GameEvent\";\r\nimport { GameRes } from \"../Control/GameRes\";\r\nimport { MainScene } from \"./MainScene\";\r\nexport class Role {\r\n    constructor() {\r\n        Role.ins = this;\r\n        this.changeScene(MainScene.ins.scene);\r\n        StateControl.Init();\r\n    }\r\n    changeScene(scene) {\r\n        this.scene = scene;\r\n        this.cameraPoint = this.scene.getChildByName('CameraPoint');\r\n        this.camera = this.cameraPoint.getChildByName('Main Camera');\r\n        if (!this.scene.getChildByName('Role')) {\r\n            this.role = new Laya.Sprite3D;\r\n            this.role.name = 'Role';\r\n            this.scene.addChild(this.role);\r\n        }\r\n        else {\r\n            this.role = this.scene.getChildByName('Role');\r\n        }\r\n    }\r\n    setState(state, args = []) {\r\n        StateControl.stateClear();\r\n        switch (state) {\r\n            case GameEnum.RoleState.Suspend:\r\n                StateControl.Suspend.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.Ready:\r\n                StateControl.stateReset();\r\n                StateControl.Ready.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.Start:\r\n                StateControl.stateReset();\r\n                StateControl.Start.ins.action(args, () => {\r\n                    this.setState(GameEnum.RoleState.Run, args);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Run:\r\n                StateControl.MoveCrosswise.ins.action();\r\n                StateControl.MoveForward.ins.action(args);\r\n                StateControl.Run.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.RoadNarrows:\r\n                StateControl.RoadNarrows.ins.action(args, () => {\r\n                    StateControl.MoveCrosswise.ins.action();\r\n                    StateControl.MoveForward.ins.action();\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Diamond:\r\n                StateControl.Diamond.ins.action(args, () => {\r\n                    this.setState(GameEnum.RoleState.Run);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Wall:\r\n                StateControl.Wall.ins.action(args, () => {\r\n                    this.setState(GameEnum.RoleState.Defeated);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Bubble:\r\n                StateControl.Bubble.ins.action(args, (args) => {\r\n                    this.setState(GameEnum.RoleState.Run, args);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Door:\r\n                StateControl.Door.ins.action(args, () => {\r\n                    this.setState(GameEnum.RoleState.Run);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Slope:\r\n                StateControl.Slope.ins.action(args, () => {\r\n                    this.setState(GameEnum.RoleState.Run);\r\n                });\r\n                StateControl.MoveCrosswise.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.Destination:\r\n                StateControl.Destination.ins.action(args, () => {\r\n                    this.setState(GameEnum.RoleState.Victory);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Victory:\r\n                StateControl.Victory.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.Defeated:\r\n                StateControl.Defeated.ins.action();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    playAniRole(aniName) {\r\n        return;\r\n        const box = this.skin.getChildByName('box');\r\n        if (!box.getComponent(RoleScript)) {\r\n            box.addComponent(RoleScript);\r\n        }\r\n        const aniCilp = GameData.Animator.getClipNameByRoleNameAndAni(this.skin.name, aniName);\r\n        return LwgTools.D3.playAnimator(this.skin, aniCilp);\r\n    }\r\n    playAniCrossFade(roleSkin, aniName) {\r\n        return;\r\n        const animator = this.skin.getComponent(Laya.Animator);\r\n        const aniCilp = GameData.Animator.getClipNameByRoleNameAndAni(roleSkin.name, aniName);\r\n        animator.crossFade(aniCilp, 1);\r\n    }\r\n    playAniByCommon(roleSkin, aniName) {\r\n        return;\r\n        const aniCilp = GameData.Animator.getClipNameByRoleNameAndAni(roleSkin.name, aniName);\r\n        return LwgTools.D3.playAnimator(roleSkin, aniCilp);\r\n    }\r\n    changeColor(colorIdnex = 1) {\r\n        this.colorIndex = colorIdnex;\r\n        for (let index = 0; index < this.skin.numChildren; index++) {\r\n            const element = this.skin.getChildAt(index);\r\n            const index0 = +element.name.substr(6, 2);\r\n            if (element.name === 'box' || index0 === colorIdnex) {\r\n                element.active = true;\r\n            }\r\n            else {\r\n                element.active = false;\r\n            }\r\n        }\r\n    }\r\n    changeSkin(name, aniName, sound = true) {\r\n        sound && GameData.Sound.playSoundByID(16);\r\n        sound && LwgWX.shakeShort();\r\n        for (let index = 0; index < this.role.numChildren; index++) {\r\n            const element = this.role.getChildAt(index);\r\n            if (element.name.substr(0, 4) !== 'box') {\r\n                element.destroy(true);\r\n                index--;\r\n            }\r\n        }\r\n        this.skin = GameRes.Prefab3D.Role_001.instance.clone();\r\n        this.role.addChild(this.skin);\r\n        const box = this.skin.getChildByName('box');\r\n        if (!box.getComponent(RoleScript)) {\r\n            box.addComponent(RoleScript);\r\n        }\r\n    }\r\n    showFontHP(num, sp3D, diffX, diffY) {\r\n        return;\r\n        const sp3d0 = sp3D ? sp3D : Role.ins.role;\r\n        const point = LwgTools.D3.getPosToScreen(sp3d0.transform.position, Role.ins.camera);\r\n        let color = '#ff5547';\r\n        if (num >= 0) {\r\n            color = '#56ff47';\r\n        }\r\n        const numStr = num > 0 ? '+' + num.toString() : num.toString();\r\n        let diffX0 = diffX === undefined ? 100 : diffX;\r\n        let diffY0 = diffY === undefined ? 100 : diffY;\r\n        const scale = sp3d0.transform.localScaleX;\r\n        diffX0 *= scale;\r\n        diffY0 *= scale;\r\n        LwgDialogue.FloatWord.createFontSystem(point.x + diffX0, point.y + diffY0, { content: numStr, color: color }, 1, false);\r\n        LwgWX.shakeShort();\r\n    }\r\n    showFontAttribute(str) {\r\n        return;\r\n        let color = '#56ff47';\r\n        const point = LwgTools.D3.getPosToScreen(Role.ins.role.transform.position, Role.ins.camera);\r\n        point.y -= this.role.transform.localScaleX * 100;\r\n        point.y -= 50;\r\n        LwgDialogue.FloatWord.createFontSystem(point.x, point.y, { content: str, color: color }, 1, false);\r\n        LwgWX.shakeShort();\r\n    }\r\n    updateLevelDisplay() {\r\n        const point = LwgTools.D3.getPosToScreen(Role.ins.role.transform.position, Role.ins.camera);\r\n        point.y -= this.role.transform.localScaleX * 100;\r\n        point.y -= 50;\r\n        LwgEvent.notify(GameEvent.updateRoleDataDisplay, [point]);\r\n    }\r\n}\r\nclass RoleScript extends Lwg3D.Object3D {\r\n    onTriggerEnter(other) {\r\n        const otherOwner = other.owner;\r\n        const name = otherOwner.name;\r\n        if (otherOwner['alreadyEnter']) {\r\n            return;\r\n        }\r\n        otherOwner['alreadyEnter'] = true;\r\n        console.log(name);\r\n        if (name.substr(0, 4) == 'wall') {\r\n            Role.ins.setState(GameEnum.RoleState.Wall, [otherOwner]);\r\n        }\r\n        else if (name.substr(0, 6) == 'bubble') {\r\n            Role.ins.setState(GameEnum.RoleState.Bubble, [otherOwner]);\r\n        }\r\n        else if (name.substr(0, 4) == 'door') {\r\n            Role.ins.setState(GameEnum.RoleState.Door, [otherOwner]);\r\n        }\r\n        else if (name.substr(0, 11) == 'destination') {\r\n            Role.ins.setState(GameEnum.RoleState.Destination, [otherOwner]);\r\n        }\r\n        else if (name.substr(0, 5) == 'slope') {\r\n            Role.ins.setState(GameEnum.RoleState.Slope, [otherOwner]);\r\n        }\r\n    }\r\n    onTriggerExit(other) {\r\n        return;\r\n        const otherOwner = other.owner;\r\n        const name = otherOwner.name;\r\n        if (name.substr(0, 12) === 'yanjiang') {\r\n            if (otherOwner['alreadyExit']) {\r\n                return;\r\n            }\r\n            otherOwner['alreadyExit'] = true;\r\n        }\r\n        else if (name === 'Road_Base02') {\r\n            Role.ins.setState(GameEnum.RoleState.RoadNarrows, [0]);\r\n        }\r\n    }\r\n}\r\nexport class aniScript extends Lwg3D.Object3D {\r\n    lwgOnAwake() {\r\n    }\r\n    attackEnd() {\r\n        const animator = this.owner.getComponent(Laya.Animator);\r\n        const state = GameData.Animator.getClipNameByRoleNameAndAni(this.owner.name, GameEnum.RoleAni.idle);\r\n        animator.crossFade(state, 1);\r\n    }\r\n}\r\nexport var StateControl;\r\n(function (StateControl) {\r\n    function stateReset() {\r\n        for (const key in StateControl) {\r\n            if (Object.prototype.hasOwnProperty.call(StateControl, key)) {\r\n                const state = StateControl[key];\r\n                if (state['ins'] && state['ins']['reset']) {\r\n                    state['ins']['reset']();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StateControl.stateReset = stateReset;\r\n    function stateClear() {\r\n        for (const key in StateControl) {\r\n            if (Object.prototype.hasOwnProperty.call(StateControl, key)) {\r\n                const state = StateControl[key];\r\n                if (state['ins'] && state['ins']['actionStop']) {\r\n                    state['ins']['actionStop']();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StateControl.stateClear = stateClear;\r\n    function Init() {\r\n        for (const key in StateControl) {\r\n            if (Object.prototype.hasOwnProperty.call(StateControl, key)) {\r\n                const state = StateControl[key];\r\n                const name = state['name'];\r\n                if (name && name && name !== 'Init' && name !== 'stateClear' && name !== 'stateBase') {\r\n                    new state();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StateControl.Init = Init;\r\n    class stateBase {\r\n        action(args, continueCb, endCb) { }\r\n        ;\r\n    }\r\n    StateControl.stateBase = stateBase;\r\n    class Suspend {\r\n        constructor() {\r\n            Suspend.ins = this;\r\n        }\r\n        action() {\r\n        }\r\n    }\r\n    StateControl.Suspend = Suspend;\r\n    class Ready {\r\n        constructor() {\r\n            Ready.ins = this;\r\n        }\r\n        action() {\r\n            Role.ins.cameraPoint.transform.position = new Laya.Vector3(8.9, -6.9, -15);\r\n            Role.ins.cameraPoint.transform.localRotationEuler = new Laya.Vector3(-10, 150, 0);\r\n            Role.ins.role.transform.localPosition = new Laya.Vector3(0, 0, 0);\r\n            Role.ins.role.transform.localScale = new Laya.Vector3(1, 1, 1);\r\n            Role.ins.role.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);\r\n            Laya.timer.frameLoop(1, this, () => {\r\n                Role.ins.updateLevelDisplay();\r\n            });\r\n            Role.ins.changeSkin();\r\n        }\r\n        actionStop() {\r\n            Laya.timer.clearAll(this);\r\n        }\r\n    }\r\n    StateControl.Ready = Ready;\r\n    class Start {\r\n        constructor() {\r\n            Start.ins = this;\r\n        }\r\n        action(args, endCb) {\r\n            Laya.timer.frameLoop(1, this, () => {\r\n                Role.ins.updateLevelDisplay();\r\n            });\r\n            const time = 1000;\r\n            LwgAni3D.moveTo(Role.ins.cameraPoint, new Laya.Vector3(0, 0, 0), time, this, null, () => {\r\n            });\r\n            LwgAni3D.rotateTo(Role.ins.cameraPoint, new Laya.Vector3(0, 0, 0), time, this, null, () => {\r\n                endCb && endCb();\r\n            });\r\n        }\r\n        actionStop() {\r\n            Laya.timer.clearAll(this);\r\n        }\r\n    }\r\n    StateControl.Start = Start;\r\n    class MoveForward {\r\n        constructor() {\r\n            this.sprintCaller = {};\r\n            MoveForward.ins = this;\r\n            this.reset();\r\n        }\r\n        get sprintTime() {\r\n            if (GameData.Level.mode === GameEnum.LevelMode.endless) {\r\n                return 100;\r\n            }\r\n            else {\r\n                return 100;\r\n            }\r\n        }\r\n        reset() {\r\n            this.speedBase = 0.5;\r\n            this.sprintAddSpeed = 0.5;\r\n            this.speed = this.speedBase;\r\n        }\r\n        action(args = []) {\r\n            Laya.timer.frameLoop(1, this, this.actionCb);\r\n            if (args[0]) {\r\n                this.sprintProps();\r\n            }\r\n        }\r\n        actionCb() {\r\n            LwgEvent.notify(GameEvent.addMileageCur, [this.speed]);\r\n            Role.ins.cameraPoint.transform.translate(new Laya.Vector3(0, 0, this.speed), false);\r\n            Role.ins.role.transform.translate(new Laya.Vector3(0, 0, this.speed), false);\r\n            Role.ins.updateLevelDisplay();\r\n        }\r\n        sprintProps() {\r\n            this.sprintEff && this.sprintEff.destroy(true);\r\n            Laya.timer.clearAll(this.sprintCaller);\r\n            this.speed = this.speedBase + this.sprintAddSpeed;\r\n            this.sprint = true;\r\n            Laya.timer.once(this.sprintTime, this.sprintCaller, () => {\r\n                this.sprint = false;\r\n                LwgTimer.frameNumLoop(1, 30, this.sprintCaller, () => {\r\n                    this.speed - this.sprintAddSpeed / 30;\r\n                }, () => {\r\n                    this.speed = this.speedBase;\r\n                    this.sprintEff && this.sprintEff.destroy(true);\r\n                });\r\n            });\r\n        }\r\n        actionStop() {\r\n            Laya.timer.clear(this, this.actionCb);\r\n        }\r\n    }\r\n    StateControl.MoveForward = MoveForward;\r\n    class MoveCrosswise {\r\n        constructor() {\r\n            MoveCrosswise.ins = this;\r\n            this.reset();\r\n        }\r\n        reset() {\r\n            this.speed = 0.05;\r\n            StateControl.gMoveScope = [-9, 9];\r\n            StateControl.gMoveCameraScope = [-6, 6];\r\n        }\r\n        action() {\r\n            Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.stageMove);\r\n            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.stageUp);\r\n            Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.stageUp);\r\n        }\r\n        stageMove(event) {\r\n            if (this.mouseX) {\r\n                this.setScopeLimit(Role.ins.cameraPoint, event);\r\n                this.setScopeLimit(Role.ins.role, event);\r\n                this.mouseX = event.stageX;\r\n            }\r\n            else {\r\n                this.mouseX = event.stageX;\r\n            }\r\n        }\r\n        setScopeLimit(target, e) {\r\n            let croMouseX = this.mouseX;\r\n            let diffX = e.stageX - croMouseX;\r\n            let targetX = 0;\r\n            if (target == Role.ins.cameraPoint) {\r\n                targetX = target.transform.position.x - diffX * this.speed * 0.6;\r\n            }\r\n            else {\r\n                targetX = target.transform.position.x - diffX * this.speed;\r\n            }\r\n            target.transform.position = new Laya.Vector3(targetX, target.transform.position.y, target.transform.position.z);\r\n            const posTarget = target.transform.position.clone();\r\n            if (target == Role.ins.cameraPoint) {\r\n                if (target.transform.position.x < StateControl.gMoveCameraScope[0]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveCameraScope[0], posTarget.y, posTarget.z);\r\n                }\r\n                if (target.transform.position.x > StateControl.gMoveCameraScope[1]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveCameraScope[1], posTarget.y, posTarget.z);\r\n                }\r\n            }\r\n            else {\r\n                if (target.transform.position.x < StateControl.gMoveScope[0]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveScope[0], posTarget.y, posTarget.z);\r\n                }\r\n                if (target.transform.position.x > StateControl.gMoveScope[1]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveScope[1], posTarget.y, posTarget.z);\r\n                }\r\n            }\r\n        }\r\n        stageUp(e) {\r\n            this.mouseX = null;\r\n        }\r\n        actionStop() {\r\n            this.mouseX = null;\r\n            Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.stageMove);\r\n            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.stageUp);\r\n            Laya.stage.off(Laya.Event.MOUSE_OUT, this, this.stageUp);\r\n        }\r\n    }\r\n    StateControl.MoveCrosswise = MoveCrosswise;\r\n    class Run {\r\n        constructor() {\r\n            Run.ins = this;\r\n        }\r\n        action() {\r\n            Role.ins.playAniRole(GameEnum.RoleAni.run);\r\n        }\r\n    }\r\n    StateControl.Run = Run;\r\n    class Slope {\r\n        constructor() {\r\n            this.addHeight = 15;\r\n            this.slopeLen = 35;\r\n            Slope.ins = this;\r\n        }\r\n        action(args, cuntinueCb) {\r\n            const slope = args[0];\r\n            const road = slope.parent;\r\n            const time = 300;\r\n            cuntinueCb && cuntinueCb();\r\n            LwgAni3D.moveToY(Role.ins.role, road.heightRoad + this.addHeight, time, this, null, () => {\r\n                LwgAni3D.moveToY(Role.ins.role, road.heightRoad, time * 2.5, this, Laya.Ease.strongInOut, () => { });\r\n            });\r\n            LwgAni3D.moveZ(Role.ins.role, this.slopeLen, time, this);\r\n            const cameraDiffY = Role.ins.cameraPoint.transform.position.y - Role.ins.role.transform.position.y;\r\n            LwgAni3D.moveToY(Role.ins.cameraPoint, road.heightRoad + cameraDiffY + this.addHeight, time, this, null, () => {\r\n                LwgAni3D.moveToY(Role.ins.cameraPoint, road.heightRoad + cameraDiffY, time * 2.5, this, Laya.Ease.strongInOut, () => { });\r\n            });\r\n            LwgAni3D.moveZ(Role.ins.cameraPoint, this.slopeLen, time, this);\r\n        }\r\n    }\r\n    StateControl.Slope = Slope;\r\n    class RoadNarrows {\r\n        constructor() {\r\n            this.arr0 = [];\r\n            this.arr1 = [];\r\n            RoadNarrows.ins = this;\r\n        }\r\n        reset() {\r\n            this.arr0 = [];\r\n            this.arr1 = [];\r\n        }\r\n        action(ags = [], cuntinueCb) {\r\n            if (ags[0] === 1) {\r\n                this.arr1.push(1);\r\n                const limitR = 4;\r\n                let limitC = 2;\r\n                let time = 100;\r\n                const timeBase = 100;\r\n                if (Role.ins.role.transform.position.x > limitR) {\r\n                    time = Math.abs(limitR - Role.ins.role.transform.position.x) * timeBase;\r\n                    LwgAni3D.moveToX(Role.ins.role, limitR, time, this, null, () => {\r\n                        cuntinueCb && cuntinueCb();\r\n                    });\r\n                    limitC = limitR - Role.ins.role.transform.position.x;\r\n                    LwgAni3D.moveX(Role.ins.cameraPoint, limitC, time, this);\r\n                }\r\n                else if (Role.ins.role.transform.position.x < -limitR) {\r\n                    time = Math.abs(-limitR - Role.ins.role.transform.position.x) * timeBase;\r\n                    LwgAni3D.moveToX(Role.ins.role, -limitR, time, this, null, () => {\r\n                        cuntinueCb && cuntinueCb();\r\n                    });\r\n                    limitC = -limitR - Role.ins.role.transform.position.x;\r\n                    LwgAni3D.moveX(Role.ins.cameraPoint, limitC, time, this);\r\n                }\r\n                else {\r\n                    cuntinueCb && cuntinueCb();\r\n                }\r\n            }\r\n            else {\r\n                cuntinueCb && cuntinueCb();\r\n                this.arr0.push(0);\r\n            }\r\n            if (this.arr0.length < this.arr1.length) {\r\n                StateControl.gMoveScope = [-4, 4];\r\n                StateControl.gMoveCameraScope = [-2, 2];\r\n            }\r\n            else {\r\n                StateControl.gMoveScope = [-9, 9];\r\n                StateControl.gMoveCameraScope = [-6, 6];\r\n            }\r\n        }\r\n    }\r\n    StateControl.RoadNarrows = RoadNarrows;\r\n    class Diamond {\r\n        constructor() {\r\n            this.addNum = 5;\r\n            this.sumNum = 0;\r\n            Diamond.ins = this;\r\n        }\r\n        reset() {\r\n            this.sumNum = 0;\r\n        }\r\n        action(args = [], continueCb) {\r\n            GameData.Sound.playSoundByID(2);\r\n            const diamond = args[0];\r\n            diamond.removeSelf();\r\n            this.sumNum += this.addNum;\r\n            continueCb && continueCb();\r\n            const point = LwgTools.D3.getPosToScreen(Role.ins.role.transform.position, Role.ins.camera);\r\n            LwgCurrency.Diamond.playGetSingleAni(Laya.stage, 1, 40, 35, 'Game/UI/img_icon_money_01.png', new Laya.Point(point.x, point.y - 250), new Laya.Point(100, 100), null, () => {\r\n                LwgEvent.notify(GameEvent.updateDiamond, [this.sumNum]);\r\n            });\r\n        }\r\n    }\r\n    StateControl.Diamond = Diamond;\r\n    class Wall {\r\n        constructor() {\r\n            this.num = 2;\r\n            Wall.ins = this;\r\n        }\r\n        action(args = [], defeatedCb) {\r\n            const wall = args[0];\r\n            GameData.Sound.playSoundByID(8);\r\n            const posZ = -5;\r\n            const time = 50;\r\n            LwgAni3D.moveZ(Role.ins.role, posZ, time, this, null, () => {\r\n                defeatedCb && defeatedCb();\r\n            });\r\n            LwgAni3D.moveZ(Role.ins.cameraPoint, posZ, time, this);\r\n        }\r\n    }\r\n    StateControl.Wall = Wall;\r\n    class Bubble {\r\n        constructor() {\r\n            this.addNum = 3;\r\n            this.subNum = -3;\r\n            Bubble.ins = this;\r\n        }\r\n        reset() {\r\n            this.bubblesNum = 0;\r\n        }\r\n        get bubblesNum() {\r\n            return this['_num'] ? this['_num'] : 0;\r\n        }\r\n        set bubblesNum(val) {\r\n            this['_num'] = val;\r\n            LwgEvent.notify(GameEvent.bubblesNum, [val]);\r\n        }\r\n        action(args = [], continueCb) {\r\n            const bubble = args[0];\r\n            const index = +bubble.name.substr(7, 2);\r\n            let _args = [];\r\n            if (index == Role.ins.colorIndex) {\r\n                bubble.transform.localPositionY -= 2;\r\n                _args = [true];\r\n                this.bubblesNum++;\r\n            }\r\n            else {\r\n                this.bubblesNum--;\r\n            }\r\n            continueCb && continueCb(_args);\r\n        }\r\n    }\r\n    StateControl.Bubble = Bubble;\r\n    class Door {\r\n        constructor() {\r\n            Door.ins = this;\r\n        }\r\n        reset() {\r\n        }\r\n        action(args = [], cuntinueCb) {\r\n            const door = args[0];\r\n            LwgWX.shakeShort();\r\n            this.changeForm(door);\r\n            door.active = false;\r\n            cuntinueCb && cuntinueCb();\r\n        }\r\n        changeForm(door) {\r\n            const index = +door.name.substr(5, 2);\r\n            Role.ins.changeColor(index);\r\n        }\r\n    }\r\n    StateControl.Door = Door;\r\n    class Destination {\r\n        constructor() {\r\n            Destination.ins = this;\r\n        }\r\n        action(args = [], continueCb) {\r\n            continueCb && continueCb();\r\n        }\r\n    }\r\n    StateControl.Destination = Destination;\r\n    class Victory {\r\n        constructor() {\r\n            Victory.ins = this;\r\n        }\r\n        action() {\r\n            Laya.timer.once(1500, this, () => {\r\n                LwgEvent.notify(GameEvent.victory);\r\n            });\r\n        }\r\n    }\r\n    StateControl.Victory = Victory;\r\n    class Defeated {\r\n        constructor() {\r\n            Defeated.ins = this;\r\n        }\r\n        action() {\r\n            Role.ins.playAniCrossFade(Role.ins.skin, GameEnum.RoleAni.death);\r\n            Laya.timer.once(1500, this, () => {\r\n                LwgEvent.notify(GameEvent.defeated);\r\n            });\r\n        }\r\n    }\r\n    StateControl.Defeated = Defeated;\r\n})(StateControl || (StateControl = {}));\r\n",
  "references": [
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/ui/layaMaxUI.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Lwg/Lwg.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameData.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameEnum.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameEvent.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameRes.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameType.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Game3D/Effect3D.ts",
    "E:/svn/泡泡/Bubble_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Game3D/MainScene.ts"
  ]
}
