{
  "code": "import { LwgControl, LwgData, LwgDate, LwgEvent, LwgSound, LwgStorage, LwgTools } from \"../../Lwg/Lwg\";\r\nimport { GameEnum } from \"./GameEnum\";\r\nimport { GameEvent } from \"./GameEvent\";\r\nimport { GameRes } from \"./GameRes\";\r\nexport var GameData;\r\n(function (GameData) {\r\n    class init {\r\n        constructor() {\r\n            GameData.Level = new LevelData(GameRes.Json.Level.dataArr);\r\n            GameData.LevelScore = new LevelScoreData(GameRes.Json.LevelScore.dataArr);\r\n            GameData.LevelsMsg = new LevelsMsgData(GameRes.Json.levelsMsg.dataArr);\r\n            GameData.Uint = new UintData(GameRes.Json.Unit.dataArr);\r\n            GameData.Item = new ItemData(GameRes.Json.Item.dataArr);\r\n            GameData.Skin = new SkinData(GameRes.Json.Role.dataArr);\r\n            GameData.Sound = new SoundData(GameRes.Json.Sound.dataArr);\r\n            GameData.Reward = new RewardData(GameRes.Json.Reward.dataArr);\r\n            GameData.CheckIn = new CheckInData(GameRes.Json.Reward.dataArr);\r\n            GameData.Lottery = new LotteryData(GameRes.Json.Reward.dataArr);\r\n            GameData.LuckyWheel = new LuckyWheelData(GameRes.Json.Reward.dataArr);\r\n            GameData.Animator = new AnimatorData(GameRes.Json.Animator.dataArr);\r\n            GameData.Skill = new SkillData(GameRes.Json.Skill.dataArr);\r\n            GameData.Dinosaur = new DinosaureData(GameRes.Json.Dinosaur.dataArr);\r\n            GameData.FoodValue = new FoodValueData(GameRes.Json.FoodValue.dataArr);\r\n            GameData.Body = new BodyData(GameRes.Json.Body.dataArr);\r\n        }\r\n    }\r\n    GameData.init = init;\r\n    class DinosaureData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n    }\r\n    class FoodValueData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        valueByNameAndForm(name, form) {\r\n            let num = 0;\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.name === name) {\r\n                    num = element[form];\r\n                }\r\n            }\r\n            return num;\r\n        }\r\n    }\r\n    class BodyData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        scaleByNameAndForm(name, form) {\r\n            let num = 0;\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.name === name) {\r\n                    num = element[form];\r\n                }\r\n            }\r\n            return num;\r\n        }\r\n    }\r\n    class SkillData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        get levelArr() {\r\n            const len = this.getTypeNum;\r\n            const arr = [];\r\n            for (let index = 0; index < len; index++) {\r\n                arr.push(1);\r\n            }\r\n            return LwgStorage.array('SkillData/levelArr', null, arr).value;\r\n        }\r\n        set levelArr(val) {\r\n            for (let index = 0; index < val.length; index++) {\r\n                const maxLv = this.getMaxLevelByType(index);\r\n                if (val[index] > maxLv) {\r\n                    val[index] = maxLv;\r\n                }\r\n            }\r\n            LwgStorage.array('SkillData/levelArr').value = val;\r\n        }\r\n        addLevelByType(type, num = 1) {\r\n            const arr = [];\r\n            for (let index = 0; index < GameData.Skill.levelArr.length; index++) {\r\n                let element = GameData.Skill.levelArr[index];\r\n                if (type === index) {\r\n                    arr.push(element + num);\r\n                }\r\n                else {\r\n                    arr.push(element);\r\n                }\r\n            }\r\n            GameData.Skill.levelArr = arr;\r\n        }\r\n        getCurConsumeByType(type) {\r\n            const level = this.levelArr[type];\r\n            let consume = 200;\r\n            this.eachDataArr((element) => {\r\n                if (element.type === type && element.level === level) {\r\n                    consume = element.consume;\r\n                }\r\n            });\r\n            return consume;\r\n        }\r\n        getCurLevelByType(type) {\r\n            return this.levelArr[type];\r\n        }\r\n        get getTypeNum() {\r\n            const arr = [];\r\n            this.eachDataArr((element) => {\r\n                arr.push(element.type);\r\n            });\r\n            const len = LwgTools.Arr.unique01(arr).length;\r\n            return len;\r\n        }\r\n        getMaxLevelByType(type) {\r\n            const arr = [];\r\n            const len = this.getTypeNum;\r\n            for (let index = 0; index < len; index++) {\r\n                this.eachDataArr((element) => {\r\n                    if (element.type === type) {\r\n                        arr.push(element);\r\n                    }\r\n                });\r\n            }\r\n            LwgTools.ObjArray.sortByProperty(arr, 'level');\r\n            return arr.pop().level;\r\n        }\r\n        getAttack() {\r\n            const attackLv = this.levelArr[GameEnum.SkillType.Attack];\r\n            let addtion = [1];\r\n            this.eachDataArr((element) => {\r\n                if (element.type === GameEnum.SkillType.Attack && element.level === attackLv) {\r\n                    addtion = element.addition;\r\n                }\r\n            });\r\n            return addtion[0];\r\n        }\r\n        getSettlement() {\r\n            const aSpeedLv = this.levelArr[GameEnum.SkillType.settlement];\r\n            let addtion = [1];\r\n            this.eachDataArr((element) => {\r\n                if (element.type === GameEnum.SkillType.settlement && element.level === aSpeedLv) {\r\n                    addtion = element.addition;\r\n                }\r\n            });\r\n            return addtion[0];\r\n        }\r\n        getHP() {\r\n            const HPLv = this.levelArr[GameEnum.SkillType.HP];\r\n            let addtion = [1];\r\n            this.eachDataArr((element) => {\r\n                if (element.type === GameEnum.SkillType.HP && element.level === HPLv) {\r\n                    addtion = element.addition;\r\n                }\r\n            });\r\n            return addtion[0];\r\n        }\r\n        getObjArrByCurLv() {\r\n            const arr = [];\r\n            const len = this.getTypeNum;\r\n            for (let index = 0; index < len; index++) {\r\n                const level = this.levelArr[index];\r\n                this.eachDataArr((element) => {\r\n                    if (element.type === index && element.level === level) {\r\n                        arr.push(element);\r\n                    }\r\n                });\r\n            }\r\n            return arr;\r\n        }\r\n    }\r\n    class AnimatorData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        getClipNameByRoleNameAndAni(roleName, aniType) {\r\n            const obj = this.getObjFirstByProNameAndVal('name', roleName);\r\n            if (obj) {\r\n                return obj[aniType] ? obj[aniType] : null;\r\n            }\r\n            else {\r\n                console.log(roleName, obj, '不存在动画:', aniType);\r\n            }\r\n        }\r\n    }\r\n    class RoleData extends LwgData.EntiretyTable {\r\n        constructor(arr) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                const element = arr[index];\r\n                if (201 <= element.ID && element.ID <= 206) {\r\n                    element.complete = true;\r\n                }\r\n            }\r\n            super('SkinData/arr', arr);\r\n        }\r\n        getType(ID) {\r\n            const obj = this.getObjByID(ID);\r\n            return obj.pathWay;\r\n        }\r\n        getNameByID(ID) {\r\n            const obj = this.getObjByID(ID);\r\n            return obj.name;\r\n        }\r\n        get getDefultName() {\r\n            const obj = this.getObjByID(201);\r\n            return obj.name;\r\n        }\r\n        setBattleByID(ID) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.ID === ID) {\r\n                    element.battle = true;\r\n                }\r\n                else {\r\n                    if (element.type.substr(0, 1) === element.type.substr(0, 1)) {\r\n                        element.battle = false;\r\n                    }\r\n                }\r\n            }\r\n            this.refreshAndStorage();\r\n        }\r\n        getDinosaurGroupArr() {\r\n            const groupArr = [];\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle) {\r\n                    groupArr.push(element);\r\n                }\r\n            }\r\n            return groupArr;\r\n        }\r\n        get getNameByVegan() {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle && element.type.substr(0, 1) === 'A') {\r\n                    return element.name;\r\n                }\r\n            }\r\n        }\r\n        get getNameByMeat() {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle && element.type.substr(0, 1) === 'C') {\r\n                    return element.name;\r\n                }\r\n            }\r\n        }\r\n        get getNameByEvolve_vegan() {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle && element.type.substr(0, 1) === 'B') {\r\n                    return element.name;\r\n                }\r\n            }\r\n        }\r\n        get getNameByEvolve_meat() {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle && element.type.substr(0, 1) === 'D') {\r\n                    return element.name;\r\n                }\r\n            }\r\n        }\r\n        getEvolveNameByName(name) {\r\n            const obj = this.getFirstObjByPro('name', name);\r\n            const type = obj.type.substr(0, 1);\r\n            let newTypeHead = 'A';\r\n            switch (type) {\r\n                case 'A':\r\n                    newTypeHead = 'B';\r\n                    break;\r\n                case 'B':\r\n                    newTypeHead = 'A';\r\n                    break;\r\n                case 'C':\r\n                    newTypeHead = 'D';\r\n                    break;\r\n                case 'D':\r\n                    newTypeHead = 'C';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle && element.type.substr(0, 1) === newTypeHead) {\r\n                    return element.name;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    class RewardData extends LwgData.ItmeTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        getPrepareReward() {\r\n            const itemArr = this.getItemArrObjByID(10016);\r\n            const itemGroup = {\r\n                index: 0,\r\n                ID: itemArr.itemArr[0],\r\n                number: itemArr.numberArr[0],\r\n                weight: itemArr.weightArr[0],\r\n            };\r\n            return itemGroup;\r\n        }\r\n    }\r\n    class SoundData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        getUrlByID(ID) {\r\n            const obj = this.getObjByID(ID);\r\n            if (!obj) {\r\n                return null;\r\n            }\r\n            else {\r\n                return `Game/Sound/${obj.name}`;\r\n            }\r\n        }\r\n        playSoundByID(ID) {\r\n            LwgSound.playSound(this.getUrlByID(ID));\r\n        }\r\n        playBgmByID(ID) {\r\n            LwgSound.playSound(this.getUrlByID(ID));\r\n        }\r\n    }\r\n    class SkinGetWayData extends LwgData.EntiretyTable {\r\n        constructor(arr) {\r\n            super('SkinGetWayData/arr', arr);\r\n        }\r\n        getType(ID) {\r\n            const obj = this.getObjByID(ID);\r\n            return obj.pathWay;\r\n        }\r\n    }\r\n    class SkinData extends LwgData.EntiretyTable {\r\n        constructor(arr) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                const element = arr[index];\r\n                if (201 <= element.ID && element.ID <= 208) {\r\n                    element.complete = true;\r\n                }\r\n            }\r\n            super('SkinData/arr', arr);\r\n        }\r\n        get getVeganArr() {\r\n            const arr = [];\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                const typeT = element.type.substr(0, 1);\r\n                if (typeT === 'A' || typeT === 'B' || typeT === 'E') {\r\n                    if (element.ID === this.endBattleID_A || element.ID === this.endBattleID_B || element.ID === this.endBattleID_E) {\r\n                        element.battle = true;\r\n                    }\r\n                    else {\r\n                        element.battle = false;\r\n                    }\r\n                    arr.push(element);\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        get getMeatArr() {\r\n            const arr = [];\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                const typeT = element.type.substr(0, 1);\r\n                if (typeT === 'C' || typeT === 'D' || typeT === 'F') {\r\n                    if (element.ID === this.endBattleID_C || element.ID === this.endBattleID_D || element.ID === this.endBattleID_F) {\r\n                        element.battle = true;\r\n                    }\r\n                    else {\r\n                        element.battle = false;\r\n                    }\r\n                    arr.push(element);\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        ;\r\n        get getBaseName() {\r\n            const obj = this.getObjByID(201);\r\n            return obj.name;\r\n        }\r\n        getTypeByName(name) {\r\n            const element = this.getObjByName(name);\r\n            const typeT = element.type.substr(0, 1);\r\n            if (typeT === 'C' || typeT === 'D' || typeT === 'F') {\r\n                return GameEnum.RoleType.meat;\r\n            }\r\n            else if (typeT === 'A' || typeT === 'B' || typeT === 'E') {\r\n                return GameEnum.RoleType.vegan;\r\n            }\r\n        }\r\n        getHPByName(name) {\r\n            const obj = this.getObjByName(name);\r\n            const attr = obj.attribute.split('_');\r\n            if (attr.length > 1) {\r\n                if (+attr[0] === 1) {\r\n                    return +attr[1];\r\n                }\r\n            }\r\n            return 0;\r\n        }\r\n        getAttackByName(name) {\r\n            const obj = this.getObjByName(name);\r\n            const attr = obj.attribute.split('_');\r\n            if (attr.length > 1) {\r\n                if (+attr[0] === 2) {\r\n                    return +attr[1];\r\n                }\r\n            }\r\n            return 0;\r\n        }\r\n        setBattleByData(data, dataArr) {\r\n            for (let index = 0; index < dataArr.length; index++) {\r\n                const element = dataArr[index];\r\n                if (element.ID !== data.ID) {\r\n                    if (element.type.substr(0, 1) === data.type.substr(0, 1)) {\r\n                        element.battle = false;\r\n                    }\r\n                }\r\n            }\r\n            data.battle = true;\r\n            if (data.complete) {\r\n                this['endBattleID_' + data.type.substr(0, 1)] = data.ID;\r\n                this.refreshAndStorage();\r\n            }\r\n        }\r\n        get endBattleID_A() {\r\n            return LwgStorage.number('SkinData/endBattleID_A', null, 203).value;\r\n        }\r\n        set endBattleID_A(ID) {\r\n            LwgStorage.number('SkinData/endBattleID_A', null, 203).value = ID;\r\n        }\r\n        get endBattleID_B() {\r\n            return LwgStorage.number('SkinData/endBattleID_B', null, 204).value;\r\n        }\r\n        set endBattleID_B(ID) {\r\n            LwgStorage.number('SkinData/endBattleID_B', null, 204).value = ID;\r\n        }\r\n        get endBattleID_E() {\r\n            return LwgStorage.number('SkinData/endBattleID_E', null, 205).value;\r\n        }\r\n        set endBattleID_E(ID) {\r\n            LwgStorage.number('SkinData/endBattleID_E', null, 205).value = ID;\r\n        }\r\n        get endBattleID_C() {\r\n            return LwgStorage.number('SkinData/endBattleID_C', null, 206).value;\r\n        }\r\n        set endBattleID_C(ID) {\r\n            LwgStorage.number('SkinData/endBattleID_C', null, 206).value = ID;\r\n        }\r\n        get endBattleID_D() {\r\n            return LwgStorage.number('SkinData/endBattleID_D', null, 207).value;\r\n        }\r\n        set endBattleID_D(ID) {\r\n            LwgStorage.number('SkinData/endBattleID_D', null, 207).value = ID;\r\n        }\r\n        get endBattleID_F() {\r\n            return LwgStorage.number('SkinData/endBattleID_F', null, 208).value;\r\n        }\r\n        set endBattleID_F(ID) {\r\n            LwgStorage.number('SkinData/endBattleID_F', null, 208).value = ID;\r\n        }\r\n        getBattleGroupArr() {\r\n            const groupArr = [];\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle) {\r\n                    groupArr.push(element);\r\n                }\r\n            }\r\n            return groupArr;\r\n        }\r\n        get getNameByVegan1() {\r\n            return this.getBattleName('A');\r\n        }\r\n        get getNameByVegan2() {\r\n            return this.getBattleName('B');\r\n        }\r\n        get getNameByVegan3() {\r\n            return this.getBattleName('E');\r\n        }\r\n        get getNameByMeat1() {\r\n            return this.getBattleName('C');\r\n        }\r\n        get getNameByMeat2() {\r\n            return this.getBattleName('D');\r\n        }\r\n        get getNameByMeat3() {\r\n            return this.getBattleName('F');\r\n        }\r\n        getBattleName(typeHead) {\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                if (element.battle && element.type.substr(0, 1) === typeHead) {\r\n                    return element.name;\r\n                }\r\n            }\r\n        }\r\n        get getNoCompeletExCheckAndLottery() {\r\n            const objSkin1 = GameData.CheckIn.day7RwardArr[0];\r\n            const objSkin2 = GameData.Lottery.getBestReward;\r\n            for (let index = 0; index < this.arr.length; index++) {\r\n                const element = this.arr[index];\r\n                const typeT = element.type.substr(0, 1);\r\n                if (typeT === 'A' || typeT === 'B' || typeT === 'C' || typeT === 'D' || typeT === 'E' || typeT === 'F') {\r\n                    if (objSkin2.type == GameEnum.ItemType.Skin) {\r\n                        if (element.ID !== objSkin1.ID && element.ID !== objSkin2.ID && !element.complete) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (element.ID !== objSkin1.ID && !element.complete) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        getRanSkinTry() {\r\n            const obj = this.getRanObjByNoCompelet();\r\n            if (obj) {\r\n                return obj.ID;\r\n            }\r\n        }\r\n    }\r\n    class LevelsMsgData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        getDataByLevel() {\r\n            const msgArr = [];\r\n            const dataArr = GameData.Level.getUnitDataArr();\r\n            for (let i = 0; i < dataArr.length; i++) {\r\n                const raodData = dataArr[i];\r\n                for (let j = 0; j < this.arr.length; j++) {\r\n                    const msg = this.arr[j];\r\n                    if (msg.name === raodData.name) {\r\n                        msg.length = raodData.length;\r\n                        msgArr.push(msg);\r\n                    }\r\n                }\r\n            }\r\n            return msgArr;\r\n        }\r\n    }\r\n    class LevelScoreData extends LwgData.BaseTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        getRanRewardByNum(num) {\r\n            const obj = this.getObjByID(num);\r\n            const rewardId = obj.rewardId;\r\n            const rewardObj = GameData.Reward.ranSuperpositionWeight(rewardId);\r\n            let item = GameData.Item.getItemBaseByID(rewardObj.ID);\r\n            item.number = rewardObj.number;\r\n            if (item.type === GameEnum.ItemType.Skin) {\r\n                const have = GameData.Skin.checkCompeletByID(item.ID);\r\n                if (have) {\r\n                    const rewardObjP = GameData.Reward.getPrepareReward();\r\n                    item = GameData.Item.getItemBaseByID(rewardObjP.ID);\r\n                    item.number = rewardObjP.ID;\r\n                }\r\n            }\r\n            return item;\r\n        }\r\n    }\r\n    class LevelData extends LwgData.ItmeTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n            this.upgradeValue = 19;\r\n            this.eatFoodScale = 0.05;\r\n            this.eatFoodScaleByBaby = 0.01;\r\n        }\r\n        get playEndlessNum() {\r\n            return LwgStorage.number('LevelData/playEndlessNum', null, 1).value;\r\n        }\r\n        set playEndlessNum(val) {\r\n            LwgStorage.number('LevelData/playEndlessNum', null, 1).value = val;\r\n        }\r\n        getEndlessLvData() {\r\n            GameData.Level.playEndlessNum++;\r\n            const unitArr = [];\r\n            let obj = this.getEndlessLvObj();\r\n            for (let index = 0; index < obj.unitArr.length; index++) {\r\n                const unitId = obj.unitArr[index];\r\n                const unitObj = GameData.Uint.getObjByID(unitId);\r\n                const nameStrArr = unitObj.name.split(',');\r\n                const ranName = LwgTools.Arr.randomGetOne(nameStrArr);\r\n                const newObj = {\r\n                    ID: unitObj.ID,\r\n                    name: ranName,\r\n                    length: unitObj.length,\r\n                };\r\n                unitArr.push(newObj);\r\n            }\r\n            return unitArr;\r\n        }\r\n        getEndlessLvObj() {\r\n            let obj;\r\n            if (this.playEndlessNum % 2 == 0) {\r\n                obj = this.getObjByID(67);\r\n            }\r\n            else {\r\n                obj = this.getObjByID(68);\r\n            }\r\n            return obj;\r\n        }\r\n        getEndlessLvFood() {\r\n            let obj;\r\n            if (this.playEndlessNum % 2 == 0) {\r\n                obj = this.getObjByID(67);\r\n                return 'FoodB0' + obj.FoodB;\r\n            }\r\n            else {\r\n                obj = this.getObjByID(68);\r\n                return 'FoodA0' + obj.FoodA;\r\n            }\r\n        }\r\n        getInitGrowValue() {\r\n            let curLevelObj = this.getObjByID(LwgControl.Game.level);\r\n            if (!curLevelObj) {\r\n                curLevelObj = this.getObjByID(1);\r\n            }\r\n            return curLevelObj.startChild;\r\n        }\r\n        getBossHPByLevel() {\r\n            let curLevelObj = this.getObjByID(LwgControl.Game.level);\r\n            if (!curLevelObj) {\r\n                curLevelObj = this.getObjByID(1);\r\n            }\r\n            return curLevelObj.bossHP;\r\n        }\r\n        getBossASpeedByLevel() {\r\n            let curLevelObj = this.getObjByID(LwgControl.Game.level);\r\n            if (!curLevelObj) {\r\n                curLevelObj = this.getObjByID(1);\r\n            }\r\n            return curLevelObj.bossaspeed;\r\n        }\r\n        getBossAttackByLevel() {\r\n            let curLevelObj = this.getObjByID(LwgControl.Game.level);\r\n            if (!curLevelObj) {\r\n                curLevelObj = this.getObjByID(1);\r\n            }\r\n            return curLevelObj.bossattack;\r\n        }\r\n        getFoodAType() {\r\n            let curLevelObj = this.getObjByID(LwgControl.Game.level);\r\n            if (!curLevelObj) {\r\n                curLevelObj = this.getObjByID(1);\r\n            }\r\n            return curLevelObj.FoodA;\r\n        }\r\n        getFoodBType() {\r\n            let curLevelObj = this.getObjByID(LwgControl.Game.level);\r\n            if (!curLevelObj) {\r\n                curLevelObj = this.getObjByID(1);\r\n            }\r\n            return curLevelObj.FoodB;\r\n        }\r\n        getUnitDataArr() {\r\n            const unitArr = [];\r\n            let curLevelObj = this.getObjByID(LwgControl.Game.level);\r\n            if (!curLevelObj) {\r\n                curLevelObj = this.getObjByID(1);\r\n            }\r\n            for (let index = 0; index < curLevelObj.unitArr.length; index++) {\r\n                const unitId = curLevelObj.unitArr[index];\r\n                const unitObj = GameData.Uint.getObjByID(unitId);\r\n                unitArr.push(unitObj);\r\n            }\r\n            return unitArr;\r\n        }\r\n        getUnitLenByID(ID) {\r\n            const unitObj = GameData.Uint.getObjByID(ID);\r\n            return unitObj.length;\r\n        }\r\n    }\r\n    class UintData extends LwgData.ItmeTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n    }\r\n    class CheckInData extends LwgData.ItmeTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        get num() {\r\n            return LwgStorage.number('CheckInData/num').value;\r\n        }\r\n        set num(num) {\r\n            LwgStorage.number('CheckInData/num').value = num;\r\n        }\r\n        get lastDate() {\r\n            return LwgStorage.number('CheckInData/lastDate', null, -1).value;\r\n        }\r\n        set lastDate(date) {\r\n            LwgStorage.number('CheckInData/lastDate').value = date;\r\n            LwgEvent.notify(GameEvent.redDotHint);\r\n        }\r\n        get today() {\r\n            return this.lastDate == LwgDate.Now.date;\r\n        }\r\n        get dayArr6() {\r\n            const arrdata = [];\r\n            if (arrdata.length <= 0) {\r\n                for (let i = 0; i < 6; i++) {\r\n                    const obj = this.getItemArrObjByID(10000 + i + 1);\r\n                    for (let j = 0; j < obj.weightArr.length; j++) {\r\n                        const weight = obj.weightArr[j];\r\n                        const number = obj.numberArr[j];\r\n                        const ran = Math.floor(Math.random() * 10);\r\n                        if (weight > ran) {\r\n                            const ranItemId = obj.itemArr[j];\r\n                            const item = GameData.Item.getItemBaseByID(ranItemId);\r\n                            item.number = number;\r\n                            arrdata.push(item);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return arrdata;\r\n        }\r\n        get day7RwardArr() {\r\n            const arrdata = [];\r\n            if (arrdata.length <= 0) {\r\n                const obj = this.getItemArrObjByID(10007);\r\n                for (let index = 0; index < obj.weightArr.length; index++) {\r\n                    const weight = obj.weightArr[index];\r\n                    const ran = Math.floor(Math.random() * 10);\r\n                    const number = obj.numberArr[index];\r\n                    if (weight > ran) {\r\n                        let ranItemId = obj.itemArr[index];\r\n                        let item = GameData.Item.getItemBaseByID(ranItemId);\r\n                        ranItemId = obj.itemArr[index];\r\n                        item.number = number;\r\n                        arrdata.push(item);\r\n                    }\r\n                }\r\n            }\r\n            return arrdata;\r\n        }\r\n    }\r\n    class LotteryData extends LwgData.ItmeTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        get KeyNum() {\r\n            return LwgStorage.number('LotteryData/chestKeyNum').value;\r\n        }\r\n        set KeyNum(num) {\r\n            if (num > 3) {\r\n                num = 3;\r\n            }\r\n            LwgStorage.number('LotteryData/chestKeyNum').value = num;\r\n        }\r\n        get ranReward() {\r\n            const obj = this.ranSuperpositionWeight(10015);\r\n            const item = GameData.Item.getItemBaseByID(obj.ID);\r\n            item.number = obj.number;\r\n            return item;\r\n        }\r\n        get getBestReward() {\r\n            const itemGroup = GameData.Reward.getItemGroupObjByIndex(10015, 8);\r\n            let item = GameData.Item.getItemBaseByID(itemGroup.ID);\r\n            item.number = itemGroup.number;\r\n            item.index = itemGroup.index;\r\n            if (item.type === GameEnum.ItemType.Skin) {\r\n                const compelet = GameData.Skin.checkCompeletByID(item.ID);\r\n                if (compelet) {\r\n                    let itemGroup0 = GameData.Reward.getItemGroupObjByIndex(10016, 0);\r\n                    item = GameData.Item.getItemBaseByID(itemGroup0.ID);\r\n                    item.number = itemGroup0.number;\r\n                    item.index = itemGroup0.index;\r\n                }\r\n            }\r\n            return item;\r\n        }\r\n    }\r\n    class LuckyWheelData extends LwgData.ItmeTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        get ranReward() {\r\n            const obj = this.ranSuperpositionWeight(10014);\r\n            const item = GameData.Item.getItemBaseByID(obj.ID);\r\n            item.number = obj.number;\r\n            item.index = obj.index;\r\n            return item;\r\n        }\r\n        get getItemArr() {\r\n            const itemArr = [];\r\n            const obj = this.getItemArrObjByID(10014);\r\n            for (let index = 0; index < obj.weightArr.length; index++) {\r\n                let item = GameData.Item.getItemBaseByID(obj.itemArr[index]);\r\n                item.number = obj.numberArr[index];\r\n                item.index = index;\r\n                itemArr.push(item);\r\n            }\r\n            return itemArr;\r\n        }\r\n        get lastDate() {\r\n            return LwgStorage.number('LuckyWheelData/lastDate', null, -1).value;\r\n        }\r\n        set lastDate(date) {\r\n            LwgStorage.number('LuckyWheelData/lastDate').value = date;\r\n            LwgEvent.notify(GameEvent.redDotHint);\r\n        }\r\n        get todayFree() {\r\n            return this.lastDate !== LwgDate.Now.date;\r\n        }\r\n    }\r\n    class ItemData extends LwgData.ItmeTable {\r\n        constructor(arr) {\r\n            super(arr);\r\n        }\r\n        getItemBaseByID(ID) {\r\n            const skinObj = this.getObjByID(ID);\r\n            if (skinObj.type === GameEnum.ItemType.Skin) {\r\n                const path = 'Game/UI/SkinIcon/';\r\n                skinObj.iconSkin = path + skinObj.model + '.png';\r\n                skinObj.picSkin = path + skinObj.model + '.png';\r\n                skinObj.picBigSkin = path + skinObj.model + '.png';\r\n            }\r\n            else {\r\n                let iconName = '';\r\n                let picName = '';\r\n                let picBigName = '';\r\n                switch (ID) {\r\n                    case 101:\r\n                        iconName = `img_icon_money_01`;\r\n                        picName = `img_icon_money_01b`;\r\n                        picBigName = `img_icon_zuanshibig`;\r\n                        break;\r\n                    case 102:\r\n                        iconName = `img_icon_money_01`;\r\n                        picName = `img_icon_money_01b`;\r\n                        picBigName = `img_icon_zuanshibig`;\r\n                        break;\r\n                    case 103:\r\n                        iconName = `img_icon_money_02`;\r\n                        picName = `img_icon_money_02`;\r\n                        picBigName = `img_icon_tili_02`;\r\n                        break;\r\n                    case 301:\r\n                        iconName = `img_icon_zhuanpan_zailaiyici`;\r\n                        picName = `img_icon_zhuanpan_zailaiyici`;\r\n                        picBigName = `img_icon_zhuanpan_zailaiyici`;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                const basePath = 'Game/UI/';\r\n                skinObj.iconSkin = basePath + iconName + '.png';\r\n                skinObj.picSkin = basePath + picName + '.png';\r\n                skinObj.picBigSkin = basePath + picBigName + '.png';\r\n            }\r\n            skinObj.number = 1;\r\n            skinObj.index = 0;\r\n            const obj = LwgTools.ObjArray.objCopy(skinObj);\r\n            return obj;\r\n        }\r\n    }\r\n})(GameData || (GameData = {}));\r\n",
  "references": [
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Lwg/Lwg.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameEnum.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameEvent.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameRes.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameType.ts"
  ]
}
