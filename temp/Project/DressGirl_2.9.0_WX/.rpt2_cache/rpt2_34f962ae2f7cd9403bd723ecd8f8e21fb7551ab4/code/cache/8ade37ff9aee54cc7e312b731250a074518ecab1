{
  "code": "import { LwgAni3D, LwgDialogue, LwgEvent, LwgTimer, LwgTools, LwgWX } from \"../../Lwg/Lwg\";\r\nimport { Lwg3D } from \"../../Lwg/Lwg3D\";\r\nimport { GameData } from \"../Control/GameData\";\r\nimport { GameEnum } from \"../Control/GameEnum\";\r\nimport { GameEvent } from \"../Control/GameEvent\";\r\nimport { GameRes } from \"../Control/GameRes\";\r\nimport { MainScene } from \"./MainScene\";\r\nexport class Role {\r\n    constructor() {\r\n        Role.ins = this;\r\n        this.mainScene = GameRes.Scene3D.MainScene.instance;\r\n        this.cameraPoint = this.mainScene.getChildByName('CameraPoint');\r\n        this.camera = this.cameraPoint.getChildByName('Main Camera');\r\n        this.role = new Laya.Sprite3D;\r\n        this.role.name = 'Role';\r\n        this.mainScene.addChild(this.role);\r\n        StateControl.Init();\r\n    }\r\n    setState(state, args) {\r\n        StateControl.stateClear();\r\n        switch (state) {\r\n            case GameEnum.RoleState.Ready:\r\n                StateControl.stateReset();\r\n                StateControl.Ready.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.Start:\r\n                StateControl.stateReset();\r\n                StateControl.Start.ins.action(() => {\r\n                    this.setState(GameEnum.RoleState.Run);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Run:\r\n                StateControl.MoveCrosswise.ins.action();\r\n                StateControl.MoveForward.ins.action();\r\n                StateControl.Run.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.Magma:\r\n                StateControl.MoveCrosswise.ins.action();\r\n                StateControl.MoveForward.ins.action();\r\n                StateControl.Magma.ins.action(args[0], () => {\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.RoadNarrows:\r\n                StateControl.RoadNarrows.ins.action(args[0], () => {\r\n                    StateControl.MoveCrosswise.ins.action();\r\n                    StateControl.MoveForward.ins.action();\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Enemy:\r\n                break;\r\n            case GameEnum.RoleState.EatFood:\r\n                StateControl.MoveCrosswise.ins.action();\r\n                StateControl.MoveForward.ins.action();\r\n                StateControl.EatFood.ins.action(args[0], () => {\r\n                }, () => {\r\n                    this.setState(GameEnum.RoleState.Defeated);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Transformation:\r\n                StateControl.MoveCrosswise.ins.action();\r\n                StateControl.MoveForward.ins.action();\r\n                StateControl.Transformation.ins.action(args[0], () => {\r\n                    StateControl.MoveForward.ins.action();\r\n                }, () => {\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Destination:\r\n                StateControl.MoveForward.ins.action();\r\n                StateControl.MoveForward.ins.speed *= 2;\r\n                StateControl.Destination.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.VSBOSS:\r\n                StateControl.VSBOSS.ins.action(args[0], () => {\r\n                    this.setState(GameEnum.RoleState.AccumulateStrength);\r\n                }, () => {\r\n                    this.setState(GameEnum.RoleState.Defeated);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.AccumulateStrength:\r\n                StateControl.AccumulateStrength.ins.action(() => {\r\n                    this.setState(GameEnum.RoleState.Victory);\r\n                });\r\n                break;\r\n            case GameEnum.RoleState.Victory:\r\n                StateControl.Victory.ins.action();\r\n                break;\r\n            case GameEnum.RoleState.Defeated:\r\n                StateControl.Defeated.ins.action();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.state = state;\r\n    }\r\n    playAni(aniName) {\r\n        const skin = this.role.getChildAt(0);\r\n        const box = skin.getChildByName('box');\r\n        if (!box.getComponent(RoleScript)) {\r\n            box.addComponent(RoleScript);\r\n        }\r\n        const aniCilp = GameData.Animator.getClipNameByRoleNameAndAni(skin.name, aniName);\r\n        return LwgTools.D3.playAnimator(skin, aniCilp);\r\n    }\r\n    playAniByAppoint(skin, aniName) {\r\n        const aniCilp = GameData.Animator.getClipNameByRoleNameAndAni(skin.name, aniName);\r\n        return LwgTools.D3.playAnimator(skin, aniCilp);\r\n    }\r\n    changeSkin(name, aniName) {\r\n        LwgTools.Node.destroyAllChildren(this.role);\r\n        const skin = GameRes.Prefab3D[name].instance.clone();\r\n        this.role.addChild(skin);\r\n        skin.transform.localPosition = new Laya.Vector3(0, 0, 0);\r\n        const box = skin.getChildByName('box');\r\n        if (!box.getComponent(RoleScript)) {\r\n            box.addComponent(RoleScript);\r\n        }\r\n        if (aniName) {\r\n            const aniCilp = GameData.Animator.getClipNameByRoleNameAndAni(skin.name, GameEnum.RoleAni.run);\r\n            LwgTools.D3.playAnimator(skin, aniCilp);\r\n        }\r\n    }\r\n    showFontHP(num) {\r\n        const point = LwgTools.D3.getPosToScreen(Role.ins.role.transform.position, Role.ins.camera);\r\n        let color = '#ff5547';\r\n        if (num >= 0) {\r\n            color = '#56ff47';\r\n        }\r\n        LwgDialogue.FloatWord.createFontSystem(point.x + 100, point.y, { content: num.toString(), color: color }, 1, false);\r\n        LwgWX.shakeShort();\r\n    }\r\n}\r\nclass RoleScript extends Lwg3D.Object3D {\r\n    onTriggerEnter(other) {\r\n        const otherOwner = other.owner;\r\n        const name = otherOwner.name;\r\n        if (otherOwner['already']) {\r\n            return;\r\n        }\r\n        otherOwner['already'] = true;\r\n        if (name == 'RoadMen01' || name == 'RoadMen02') {\r\n            Role.ins.setState(GameEnum.RoleState.Transformation, [otherOwner]);\r\n        }\r\n        else if (name.substr(0, 4) == 'Food') {\r\n            Role.ins.setState(GameEnum.RoleState.EatFood, [otherOwner]);\r\n        }\r\n        else if (name === 'destination') {\r\n            Role.ins.setState(GameEnum.RoleState.Destination, [otherOwner]);\r\n        }\r\n        else if (name === 'box') {\r\n            Role.ins.setState(GameEnum.RoleState.VSBOSS, [otherOwner]);\r\n        }\r\n        else if (name.substr(0, 12) === 'Magma') {\r\n            Role.ins.setState(GameEnum.RoleState.Magma, [otherOwner]);\r\n        }\r\n        else if (name === 'Road_Base02') {\r\n            Role.ins.setState(GameEnum.RoleState.RoadNarrows, [1]);\r\n        }\r\n    }\r\n    onTriggerExit(other) {\r\n        const otherOwner = other.owner;\r\n        const name = otherOwner.name;\r\n        if (name.substr(0, 12) === 'Magma') {\r\n            Role.ins.setState(GameEnum.RoleState.Magma, [otherOwner]);\r\n        }\r\n        else if (name === 'Road_Base02') {\r\n            Role.ins.setState(GameEnum.RoleState.RoadNarrows, [0]);\r\n        }\r\n    }\r\n}\r\nexport var StateControl;\r\n(function (StateControl) {\r\n    function stateReset() {\r\n        for (const key in StateControl) {\r\n            if (Object.prototype.hasOwnProperty.call(StateControl, key)) {\r\n                const state = StateControl[key];\r\n                if (state['ins'] && state['ins']['reset']) {\r\n                    state['ins']['reset']();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StateControl.stateReset = stateReset;\r\n    function stateClear() {\r\n        for (const key in StateControl) {\r\n            if (Object.prototype.hasOwnProperty.call(StateControl, key)) {\r\n                const state = StateControl[key];\r\n                if (state['ins'] && state['ins']['actionStop']) {\r\n                    state['ins']['actionStop']();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StateControl.stateClear = stateClear;\r\n    function Init() {\r\n        for (const key in StateControl) {\r\n            if (Object.prototype.hasOwnProperty.call(StateControl, key)) {\r\n                const state = StateControl[key];\r\n                const name = state['name'];\r\n                if (name && name && name !== 'Init' && name !== 'stateClear' && name !== 'stateBase') {\r\n                    new state();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StateControl.Init = Init;\r\n    class stateBase {\r\n    }\r\n    StateControl.stateBase = stateBase;\r\n    class Ready {\r\n        constructor() {\r\n            Ready.ins = this;\r\n            this.cameraPointFP = Role.ins.cameraPoint.transform.position.clone();\r\n            this.cameraPointFR = Role.ins.cameraPoint.transform.localRotationEuler.clone();\r\n            this.cameraFP = Role.ins.camera.transform.localPosition.clone();\r\n            this.cameraFR = Role.ins.camera.transform.localRotationEuler.clone();\r\n            this.roleFP = Role.ins.role.transform.localPosition.clone();\r\n            this.roleFS = Role.ins.role.transform.localScale.clone();\r\n            this.roleFR = Role.ins.role.transform.localRotationEuler.clone();\r\n        }\r\n        action() {\r\n            Role.ins.cameraPoint.transform.position = this.cameraPointFP;\r\n            Role.ins.cameraPoint.transform.localRotationEuler = this.cameraPointFR;\r\n            Role.ins.camera.transform.localPosition = this.cameraFP;\r\n            Role.ins.camera.transform.localRotationEuler = this.cameraFR;\r\n            Role.ins.role.transform.localPosition = this.roleFP;\r\n            Role.ins.role.transform.localScale = this.roleFS;\r\n            Role.ins.role.transform.localRotationEuler = this.roleFR;\r\n            Role.ins.changeSkin(GameData.Role.getDefultName);\r\n        }\r\n    }\r\n    StateControl.Ready = Ready;\r\n    class Start {\r\n        constructor() {\r\n            Start.ins = this;\r\n        }\r\n        action(endCb) {\r\n            Role.ins.playAni(GameEnum.RoleAni.run);\r\n            endCb && endCb();\r\n        }\r\n    }\r\n    StateControl.Start = Start;\r\n    class MoveForward {\r\n        constructor() {\r\n            MoveForward.ins = this;\r\n            this.reset();\r\n        }\r\n        reset() {\r\n            this.speed = 0.2;\r\n        }\r\n        action() {\r\n            Laya.timer.frameLoop(1, this, this.actionCb);\r\n        }\r\n        actionCb() {\r\n            MainScene.ins.lenCur += this.speed;\r\n            Role.ins.cameraPoint.transform.translate(new Laya.Vector3(0, 0, this.speed), false);\r\n            Role.ins.role.transform.translate(new Laya.Vector3(0, 0, this.speed), false);\r\n        }\r\n        actionStop() {\r\n            Laya.timer.clear(this, this.actionCb);\r\n        }\r\n    }\r\n    StateControl.MoveForward = MoveForward;\r\n    class MoveCrosswise {\r\n        constructor() {\r\n            MoveCrosswise.ins = this;\r\n            this.reset();\r\n        }\r\n        reset() {\r\n            this.speed = 0.05;\r\n            StateControl.gMoveScope = [-9, 9];\r\n            StateControl.gMoveCameraScope = [-6, 6];\r\n        }\r\n        action() {\r\n            Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.stageMove);\r\n            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.stageUp);\r\n            Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.stageUp);\r\n        }\r\n        stageMove(event) {\r\n            if (this.mouseX) {\r\n                this.setScopeLimit(Role.ins.cameraPoint, event);\r\n                this.setScopeLimit(Role.ins.role, event);\r\n                this.mouseX = event.stageX;\r\n            }\r\n            else {\r\n                this.mouseX = event.stageX;\r\n            }\r\n        }\r\n        setScopeLimit(target, e) {\r\n            let croMouseX = this.mouseX;\r\n            let diffX = e.stageX - croMouseX;\r\n            if (target == Role.ins.cameraPoint) {\r\n                target.transform.translate(new Laya.Vector3(-diffX * this.speed * 0.6, 0, 0));\r\n            }\r\n            else {\r\n                target.transform.translate(new Laya.Vector3(-diffX * this.speed, 0, 0));\r\n            }\r\n            const posTarget = target.transform.position.clone();\r\n            if (target == Role.ins.cameraPoint) {\r\n                if (target.transform.position.x < StateControl.gMoveCameraScope[0]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveCameraScope[0], posTarget.y, posTarget.z);\r\n                }\r\n                if (target.transform.position.x > StateControl.gMoveCameraScope[1]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveCameraScope[1], posTarget.y, posTarget.z);\r\n                }\r\n            }\r\n            else {\r\n                if (target.transform.position.x < StateControl.gMoveScope[0]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveScope[0], posTarget.y, posTarget.z);\r\n                }\r\n                if (target.transform.position.x > StateControl.gMoveScope[1]) {\r\n                    target.transform.position = new Laya.Vector3(StateControl.gMoveScope[1], posTarget.y, posTarget.z);\r\n                }\r\n            }\r\n        }\r\n        stageUp(e) {\r\n            this.mouseX = null;\r\n        }\r\n        actionStop() {\r\n            this.mouseX = null;\r\n            Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.stageMove);\r\n            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.stageUp);\r\n            Laya.stage.off(Laya.Event.MOUSE_OUT, this, this.stageUp);\r\n        }\r\n    }\r\n    StateControl.MoveCrosswise = MoveCrosswise;\r\n    class Run {\r\n        constructor() {\r\n            Run.ins = this;\r\n        }\r\n        action() {\r\n            Role.ins.playAni(GameEnum.RoleAni.run);\r\n        }\r\n    }\r\n    StateControl.Run = Run;\r\n    class RoadNarrows {\r\n        constructor() {\r\n            this.arr0 = [];\r\n            this.arr1 = [];\r\n            RoadNarrows.ins = this;\r\n        }\r\n        reset() {\r\n            this.arr0 = [];\r\n            this.arr1 = [];\r\n        }\r\n        action(type, cuntinueCb) {\r\n            if (type === 1) {\r\n                this.arr1.push(1);\r\n                const limitR = 4;\r\n                const limitC = 2;\r\n                const time = 300;\r\n                if (Role.ins.role.transform.position.x > limitR) {\r\n                    LwgAni3D.moveToX(Role.ins.role, limitR, time, this, null, () => {\r\n                        cuntinueCb && cuntinueCb();\r\n                    });\r\n                    LwgAni3D.moveToX(Role.ins.cameraPoint, limitC, time, this);\r\n                }\r\n                else if (Role.ins.role.transform.position.x < -limitR) {\r\n                    LwgAni3D.moveToX(Role.ins.role, -limitR, time, this, null, () => {\r\n                        cuntinueCb && cuntinueCb();\r\n                    });\r\n                    LwgAni3D.moveToX(Role.ins.cameraPoint, -limitC, time, this);\r\n                }\r\n                else {\r\n                    cuntinueCb && cuntinueCb();\r\n                }\r\n            }\r\n            else {\r\n                cuntinueCb && cuntinueCb();\r\n                this.arr0.push(0);\r\n            }\r\n            if (this.arr0.length < this.arr1.length) {\r\n                StateControl.gMoveScope = [-4, 4];\r\n                StateControl.gMoveCameraScope = [-2, 2];\r\n            }\r\n            else {\r\n                StateControl.gMoveScope = [-9, 9];\r\n                StateControl.gMoveCameraScope = [-6, 6];\r\n            }\r\n        }\r\n    }\r\n    StateControl.RoadNarrows = RoadNarrows;\r\n    StateControl.gGrowthValue = {\r\n        get value() {\r\n            return this['_value'] ? this['_value'] : 0;\r\n        },\r\n        set value(val) {\r\n            LwgEvent.notify(GameEvent.updateGrowthValue, [val]);\r\n            this['_value'] = val;\r\n        }\r\n    };\r\n    class EatFood {\r\n        constructor() {\r\n            EatFood.ins = this;\r\n        }\r\n        reset() {\r\n            StateControl.gGrowthValue.value = GameData.Level.getInitGrowValue();\r\n        }\r\n        action(food, continueCb, defeatedCb) {\r\n            food.active = false;\r\n            let num = GameData.FoodValue.valueByNameAndForm(food.name.substr(0, 7), gForm.value);\r\n            StateControl.gGrowthValue.value += num;\r\n            if (StateControl.gGrowthValue.value >= 50) {\r\n                if (gForm.value === GameEnum.FormState.meat) {\r\n                    gForm.value = GameEnum.FormState.evolve_meat;\r\n                    Role.ins.role.transform.localScale = new Laya.Vector3(1, 1, 1);\r\n                }\r\n                if (gForm.value === GameEnum.FormState.vegan) {\r\n                    gForm.value = GameEnum.FormState.evolve_vegan;\r\n                    Role.ins.role.transform.localScale = new Laya.Vector3(1, 1, 1);\r\n                }\r\n            }\r\n            else {\r\n                if (gForm.value === GameEnum.FormState.evolve_meat) {\r\n                    gForm.value = GameEnum.FormState.meat;\r\n                    Role.ins.role.transform.localScale = new Laya.Vector3(1, 1, 1);\r\n                }\r\n                if (gForm.value === GameEnum.FormState.evolve_vegan) {\r\n                    gForm.value = GameEnum.FormState.vegan;\r\n                }\r\n            }\r\n            if (num < 0) {\r\n                GameData.Sound.playSoundByID(8);\r\n            }\r\n            else {\r\n                GameData.Sound.playSoundByID(2);\r\n            }\r\n            if (StateControl.gGrowthValue.value < 0) {\r\n                defeatedCb && defeatedCb();\r\n                return;\r\n            }\r\n            else if (StateControl.gGrowthValue.value > 100) {\r\n                Role.ins.role.transform.localScale = new Laya.Vector3(1.3, 1.3, 1.3);\r\n            }\r\n            else {\r\n                let numLv = StateControl.gGrowthValue.value % 50;\r\n                if (numLv < 10) {\r\n                    numLv = 0;\r\n                }\r\n                else {\r\n                    numLv = Number(numLv.toString().substr(0, 1));\r\n                }\r\n                const scale = numLv * 0.05 + 1;\r\n                Role.ins.role.transform.localScale = new Laya.Vector3(scale, scale, scale);\r\n            }\r\n            Role.ins.showFontHP(num);\r\n            continueCb && continueCb();\r\n        }\r\n    }\r\n    StateControl.EatFood = EatFood;\r\n    let gForm = {\r\n        get value() {\r\n            return this['_value'] ? this['_value'] : GameEnum.FormState.constant;\r\n        },\r\n        set value(val) {\r\n            this['_value'] = val;\r\n            let name;\r\n            switch (val) {\r\n                case GameEnum.FormState.constant:\r\n                    name = GameData.Role.getDefultName;\r\n                    break;\r\n                case GameEnum.FormState.meat:\r\n                    name = GameData.Role.getNameByMeat;\r\n                    break;\r\n                case GameEnum.FormState.vegan:\r\n                    name = GameData.Role.getNameByVegan;\r\n                    break;\r\n                case GameEnum.FormState.evolve_meat:\r\n                    name = GameData.Role.getNameByEvolve_meat;\r\n                    break;\r\n                case GameEnum.FormState.evolve_vegan:\r\n                    name = GameData.Role.getNameByEvolve_vegan;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            Role.ins.changeSkin(name, GameEnum.RoleAni.run);\r\n        }\r\n    };\r\n    class Transformation {\r\n        constructor() {\r\n            this.isTransformation = false;\r\n            Transformation.ins = this;\r\n        }\r\n        reset() {\r\n            gForm.value = GameEnum.FormState.constant;\r\n        }\r\n        action(box, cuntinueCb, passCb) {\r\n            if (this.isTransformation) {\r\n                return;\r\n            }\r\n            this.isTransformation = true;\r\n            const diffX = box.transform.position.x - Role.ins.role.transform.position.x;\r\n            const time2 = 300;\r\n            if (Math.abs(diffX) > 2) {\r\n                if (diffX > 0) {\r\n                    LwgAni3D.moveX(Role.ins.role, diffX, time2, this, null, () => {\r\n                        this.pass(box, cuntinueCb, passCb);\r\n                    });\r\n                    LwgAni3D.moveX(Role.ins.cameraPoint, diffX, time2, this);\r\n                }\r\n                else {\r\n                    const moveX = diffX + 1;\r\n                    LwgAni3D.moveX(Role.ins.role, diffX, time2, this, null, () => {\r\n                        this.pass(box, cuntinueCb, passCb);\r\n                    });\r\n                    LwgAni3D.moveX(Role.ins.cameraPoint, diffX, time2, this);\r\n                }\r\n            }\r\n            else {\r\n                this.pass(box, cuntinueCb, passCb);\r\n            }\r\n            Role.ins.playAni(GameEnum.RoleAni.run);\r\n        }\r\n        pass(box, cuntinueCb, passCb) {\r\n            cuntinueCb && cuntinueCb();\r\n            Laya.timer.once(500, this, () => {\r\n                this.isTransformation = false;\r\n                this.changeForm(box);\r\n                passCb && passCb();\r\n            });\r\n        }\r\n        changeForm(box) {\r\n            if (box.name === 'RoadMen01') {\r\n                if (StateControl.gGrowthValue.value > 50) {\r\n                    if (gForm.value !== GameEnum.FormState.evolve_meat) {\r\n                        gForm.value = GameEnum.FormState.evolve_meat;\r\n                    }\r\n                }\r\n                else {\r\n                    if (gForm.value !== GameEnum.FormState.meat) {\r\n                        gForm.value = GameEnum.FormState.meat;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (StateControl.gGrowthValue.value > 50) {\r\n                    if (gForm.value !== GameEnum.FormState.evolve_vegan) {\r\n                        gForm.value = GameEnum.FormState.evolve_vegan;\r\n                    }\r\n                }\r\n                else {\r\n                    if (gForm.value !== GameEnum.FormState.vegan) {\r\n                        gForm.value = GameEnum.FormState.vegan;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StateControl.Transformation = Transformation;\r\n    class Magma {\r\n        constructor() {\r\n            this.magmaArr = [];\r\n            Magma.ins = this;\r\n        }\r\n        reset() {\r\n            this.magmaArr = [];\r\n        }\r\n        action(magma, endCb) {\r\n            let element0 = null;\r\n            for (let index = 0; index < this.magmaArr.length; index++) {\r\n                const element = this.magmaArr[index];\r\n                if (element == magma) {\r\n                    element0 = element;\r\n                }\r\n            }\r\n            if (!element0) {\r\n                GameData.Sound.playBgmByID(10);\r\n                this.magmaArr.push(magma);\r\n                const sub = -1;\r\n                LwgTimer.frameLoop(15, magma, () => {\r\n                    Role.ins.showFontHP(sub);\r\n                    StateControl.gGrowthValue.value += sub;\r\n                }, true);\r\n            }\r\n            else {\r\n                Laya.timer.clearAll(magma);\r\n            }\r\n            endCb && endCb();\r\n        }\r\n    }\r\n    StateControl.Magma = Magma;\r\n    class Destination {\r\n        constructor() {\r\n            Destination.ins = this;\r\n        }\r\n        action() {\r\n            GameData.Sound.playBgmByID(12);\r\n            const time = 1000;\r\n            LwgAni3D.moveToX(Role.ins.cameraPoint, 0, time, this);\r\n            LwgAni3D.moveToX(Role.ins.role, 0, time, this);\r\n        }\r\n    }\r\n    StateControl.Destination = Destination;\r\n    let Boss;\r\n    class VSBOSS {\r\n        constructor() {\r\n            this.crossFadeValue = 0.1;\r\n            this.baseSpeed = 5000;\r\n            VSBOSS.ins = this;\r\n        }\r\n        bossAttack(defeatedCb) {\r\n            this.animatorBoss = Boss.getComponent(Laya.Animator);\r\n            this.HPBoss = Math.round(GameData.Level.getBossHPByLevel());\r\n            const aSpeedBoss = GameData.Level.getBossASpeedByLevel();\r\n            const attackBoss = GameData.Level.getBossAttackByLevel();\r\n            LwgEvent.notify(GameEvent.updateBossHP, [this.HPBoss]);\r\n            Laya.timer.loop(aSpeedBoss * this.baseSpeed, this, () => {\r\n                this.HPRole = Math.round(this.HPRole - attackBoss);\r\n                if (this.HPRole <= 0) {\r\n                    this.HPRole = 0;\r\n                    this.actionStop();\r\n                    console.log('战斗结束boss胜利！');\r\n                    defeatedCb && defeatedCb();\r\n                }\r\n                LwgEvent.notify(GameEvent.updateRoleHP, [this.HPRole]);\r\n                Laya.timer.clearAll(Boss);\r\n                const attack = GameData.Animator.getClipNameByRoleNameAndAni(Boss.name, GameEnum.RoleAni.attack);\r\n                const run = GameData.Animator.getClipNameByRoleNameAndAni(Boss.name, GameEnum.RoleAni.run);\r\n                this.animatorBoss.play(run);\r\n                this.animatorBoss.play(attack);\r\n            });\r\n        }\r\n        roleAttack(victoryCb) {\r\n            const model = Role.ins.role.getChildAt(0);\r\n            this.animatorRole = model.getComponent(Laya.Animator);\r\n            this.HPRole = Math.round(GameData.Skill.getHP() * StateControl.gGrowthValue.value);\r\n            const aSpeedRole = GameData.Skill.getASpeed();\r\n            const attackRole = GameData.Skill.getAttack();\r\n            LwgEvent.notify(GameEvent.updateRoleHP, [this.HPRole]);\r\n            Laya.timer.loop(aSpeedRole * this.baseSpeed, this, () => {\r\n                this.HPBoss = Math.round(this.HPBoss - attackRole);\r\n                if (this.HPBoss <= 0) {\r\n                    this.HPBoss = 0;\r\n                    this.actionStop();\r\n                    victoryCb && victoryCb();\r\n                    console.log('战斗结束玩家胜利！');\r\n                }\r\n                LwgEvent.notify(GameEvent.updateBossHP, [this.HPBoss]);\r\n                Laya.timer.clearAll(Role.ins.role);\r\n                const attack = GameData.Animator.getClipNameByRoleNameAndAni(model.name, GameEnum.RoleAni.attack);\r\n                const run = GameData.Animator.getClipNameByRoleNameAndAni(model.name, GameEnum.RoleAni.run);\r\n                this.animatorRole.play(run);\r\n                this.animatorRole.play(attack);\r\n            });\r\n        }\r\n        action(bossBox, victoryCb, defeatedCb) {\r\n            Boss = bossBox.parent;\r\n            const time = 1000;\r\n            LwgAni3D.moveToX(Role.ins.cameraPoint, -10, time, this);\r\n            LwgAni3D.rotateTo(Role.ins.cameraPoint, new Laya.Vector3(-20, 60, 0), time, this, null, () => {\r\n                this.bossAttack(defeatedCb);\r\n                this.roleAttack(victoryCb);\r\n            });\r\n            LwgAni3D.scaleTo(Role.ins.role, new Laya.Vector3(2, 2, 2), time, this);\r\n        }\r\n        actionStop() {\r\n            Laya.timer.clearAll(this);\r\n        }\r\n    }\r\n    StateControl.VSBOSS = VSBOSS;\r\n    class AccumulateStrength {\r\n        constructor() {\r\n            this.pressLen = 250;\r\n            this.strengthAdd = 10;\r\n            this.strengthSub = 2;\r\n            AccumulateStrength.ins = this;\r\n            this.reset();\r\n        }\r\n        get strength() {\r\n            return this['_strength'] ? this['_strength'] : 5;\r\n        }\r\n        set strength(val) {\r\n            if (val > this.pressLen) {\r\n                val = this.pressLen;\r\n                this.actionStop();\r\n                this.repelBoss(this.victoryCb);\r\n                LwgEvent.notify(GameEvent.updateStrengthTime, [-1]);\r\n            }\r\n            this['_strength'] = val;\r\n        }\r\n        reset() {\r\n            this.time = 5;\r\n            this.strength = 5;\r\n        }\r\n        action(victoryCb) {\r\n            this.victoryCb = victoryCb;\r\n            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onstageUp);\r\n            LwgEvent.notify(GameEvent.updateStrengthTime, [this.time]);\r\n            LwgTimer.frameNumLoop(60, 5, this, () => {\r\n                this.time--;\r\n                LwgEvent.notify(GameEvent.updateStrengthTime, [this.time]);\r\n            }, () => {\r\n                console.log('结束!');\r\n                this.actionStop();\r\n                this.repelBoss(victoryCb);\r\n            });\r\n            let time0 = 0;\r\n            LwgTimer.frameLoop(1, this, () => {\r\n                time0++;\r\n                if (time0 % 10 == 0) {\r\n                    this.strength -= this.strengthSub;\r\n                }\r\n                LwgEvent.notify(GameEvent.updateStrengthValue, [this.strength]);\r\n            });\r\n        }\r\n        repelBoss(victoryCb) {\r\n            let coefficient = 0.5;\r\n            coefficient += this.strength / this.pressLen;\r\n            const time1 = 2000 * 2;\r\n            const disZ = 100 * coefficient;\r\n            let num = Math.round((disZ - 20) / 15);\r\n            console.log('总段数:', num);\r\n            const score = GameData.LevelScore.getScoreByNum(num);\r\n            LwgEvent.notify(GameEvent.updateScore, [score + StateControl.gGrowthValue.value]);\r\n            const time2 = 1000;\r\n            const delay2 = 200;\r\n            LwgAni3D.moveToY(Role.ins.cameraPoint, 10, time2 / 2, this);\r\n            LwgAni3D.moveToX(Role.ins.cameraPoint, 0, time1, this);\r\n            LwgAni3D.rotateTo(Role.ins.cameraPoint, new Laya.Vector3(0, 0, 0), time2, this, null, null, delay2);\r\n            LwgAni3D.moveZ(Role.ins.cameraPoint, disZ - 20, time1, this);\r\n            LwgAni3D.moveZ(Boss, disZ, time1, this, null, () => { });\r\n            const time4 = 1000;\r\n            const time5 = 450;\r\n            const time6 = 200;\r\n            const high1 = 20 * coefficient;\r\n            const high2 = 8 * coefficient;\r\n            const high3 = 2 * coefficient;\r\n            LwgAni3D.moveToY(Boss, high1, time4, this, Laya.Ease.quintOut, () => {\r\n                LwgAni3D.moveToY(Boss, 0, time4, this, Laya.Ease.quintIn, () => {\r\n                    LwgAni3D.moveToY(Boss, high2, time5, this, Laya.Ease.quintOut, () => {\r\n                        LwgAni3D.moveToY(Boss, 0, time5, this, Laya.Ease.quintIn, () => {\r\n                            LwgAni3D.moveToY(Boss, high3, time6, this, Laya.Ease.quintOut, () => {\r\n                                LwgAni3D.moveToY(Boss, 0, time6, this, Laya.Ease.quintIn, () => {\r\n                                    Laya.timer.once(1000, this, () => {\r\n                                        victoryCb && victoryCb();\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        onstageUp() {\r\n            this.strength += this.strengthAdd;\r\n        }\r\n        actionStop() {\r\n            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onstageUp);\r\n            Laya.timer.clearAll(this);\r\n        }\r\n    }\r\n    StateControl.AccumulateStrength = AccumulateStrength;\r\n    class Victory {\r\n        constructor() {\r\n            Victory.ins = this;\r\n        }\r\n        action() {\r\n            LwgEvent.notify(GameEvent.victory);\r\n        }\r\n    }\r\n    StateControl.Victory = Victory;\r\n    class Defeated {\r\n        constructor() {\r\n            Defeated.ins = this;\r\n        }\r\n        action() {\r\n            LwgEvent.notify(GameEvent.defeated);\r\n        }\r\n    }\r\n    StateControl.Defeated = Defeated;\r\n})(StateControl || (StateControl = {}));\r\n",
  "references": [
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/ui/layaMaxUI.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Lwg/Lwg.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Lwg/Lwg3D.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameData.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameEnum.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameEvent.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Control/GameRes.ts",
    "E:/svn/恐龙跑酷/DinosaursGrow_Laya_2.9.0/DinosaursGrowUp_2.9.0/src/script/Game/Game3D/MainScene.ts"
  ]
}
